
Autopilot symulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000719c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073d4  080073d4  00020198  2**0
                  CONTENTS
  4 .ARM          00000008  080073d4  080073d4  000173d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073dc  080073dc  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073dc  080073dc  000173dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  080073e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000058  0800743c  00020058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000f8  080074dc  000200f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007f4  20000198  0800757c  00020198  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000098c  0800757c  0002098c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201c6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00019772  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002fad  00000000  00000000  0003997b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000014a8  00000000  00000000  0003c928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001021  00000000  00000000  0003ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029e5e  00000000  00000000  0003edf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001796e  00000000  00000000  00068c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010602a  00000000  00000000  000805bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000058e0  00000000  00000000  001865e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006e  00000000  00000000  0018bec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000198 	.word	0x20000198
 8000214:	00000000 	.word	0x00000000
 8000218:	0800737c 	.word	0x0800737c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000019c 	.word	0x2000019c
 8000234:	0800737c 	.word	0x0800737c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f001 f853 	bl	80015e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f860 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 fa78 	bl	8000a34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000544:	f000 fa58 	bl	80009f8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000548:	f000 f9f8 	bl	800093c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800054c:	f000 fa26 	bl	800099c <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000550:	f000 f9c4 	bl	80008dc <MX_UART4_Init>
  MX_TIM4_Init();
 8000554:	f000 f94a 	bl	80007ec <MX_TIM4_Init>
  MX_ETH_Init();
 8000558:	f000 f8fa 	bl	8000750 <MX_ETH_Init>
  MX_CAN1_Init();
 800055c:	f000 f8c2 	bl	80006e4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // start timer
  HAL_UART_Receive_IT(&huart4, rx_data, RX_DATA);
 8000560:	2205      	movs	r2, #5
 8000562:	4921      	ldr	r1, [pc, #132]	; (80005e8 <main+0xb4>)
 8000564:	4821      	ldr	r0, [pc, #132]	; (80005ec <main+0xb8>)
 8000566:	f005 f968 	bl	800583a <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart4, tx_boot, TX_BOOT, UART_TIMEOUT);
 800056a:	230f      	movs	r3, #15
 800056c:	2211      	movs	r2, #17
 800056e:	4920      	ldr	r1, [pc, #128]	; (80005f0 <main+0xbc>)
 8000570:	481e      	ldr	r0, [pc, #120]	; (80005ec <main+0xb8>)
 8000572:	f005 f8d9 	bl	8005728 <HAL_UART_Transmit>
  TxHeader.DLC = 1;
  TxHeader.IDE = CAN_ID_STD;
  TxHeader.RTR = CAN_RTR_DATA;
  TxHeader.StdId = 0x466;
	*/
  TIM4->CCR1 = 2500;
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <main+0xc0>)
 8000578:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (communication_type) {
 800057e:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <main+0xc4>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b02      	cmp	r3, #2
 8000584:	d01c      	beq.n	80005c0 <main+0x8c>
 8000586:	2b02      	cmp	r3, #2
 8000588:	dc25      	bgt.n	80005d6 <main+0xa2>
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <main+0x60>
 800058e:	2b01      	cmp	r3, #1
 8000590:	d00b      	beq.n	80005aa <main+0x76>
	  		  if (TIM4->CR1 & TIM_CR1_CEN) {
	  			  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
	  		  }
	  		  break;
	  	  default:
	  		  break;
 8000592:	e020      	b.n	80005d6 <main+0xa2>
	  		  if (TIM4->CR1 & TIM_CR1_CEN) {
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <main+0xc0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	2b00      	cmp	r3, #0
 800059e:	d01c      	beq.n	80005da <main+0xa6>
	  			  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80005a0:	2100      	movs	r1, #0
 80005a2:	4816      	ldr	r0, [pc, #88]	; (80005fc <main+0xc8>)
 80005a4:	f004 f9bc 	bl	8004920 <HAL_TIM_PWM_Stop>
	  		  break;
 80005a8:	e017      	b.n	80005da <main+0xa6>
	  		  if (!(TIM4->CR1 & TIM_CR1_CEN)) {
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <main+0xc0>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d113      	bne.n	80005de <main+0xaa>
	  			  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005b6:	2100      	movs	r1, #0
 80005b8:	4810      	ldr	r0, [pc, #64]	; (80005fc <main+0xc8>)
 80005ba:	f004 f8b7 	bl	800472c <HAL_TIM_PWM_Start>
	  		  break;
 80005be:	e00e      	b.n	80005de <main+0xaa>
	  		  if (TIM4->CR1 & TIM_CR1_CEN) {
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <main+0xc0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00a      	beq.n	80005e2 <main+0xae>
	  			  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80005cc:	2100      	movs	r1, #0
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <main+0xc8>)
 80005d0:	f004 f9a6 	bl	8004920 <HAL_TIM_PWM_Stop>
	  		  break;
 80005d4:	e005      	b.n	80005e2 <main+0xae>
	  		  break;
 80005d6:	bf00      	nop
 80005d8:	e7d1      	b.n	800057e <main+0x4a>
	  		  break;
 80005da:	bf00      	nop
 80005dc:	e7cf      	b.n	800057e <main+0x4a>
	  		  break;
 80005de:	bf00      	nop
 80005e0:	e7cd      	b.n	800057e <main+0x4a>
	  		  break;
 80005e2:	bf00      	nop
	  switch (communication_type) {
 80005e4:	e7cb      	b.n	800057e <main+0x4a>
 80005e6:	bf00      	nop
 80005e8:	20000960 	.word	0x20000960
 80005ec:	20000370 	.word	0x20000370
 80005f0:	08007394 	.word	0x08007394
 80005f4:	40000800 	.word	0x40000800
 80005f8:	20000970 	.word	0x20000970
 80005fc:	200002c4 	.word	0x200002c4

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2234      	movs	r2, #52	; 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f006 fe87 	bl	8007322 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f002 fe6e 	bl	8003304 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemClock_Config+0xdc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a2b      	ldr	r2, [pc, #172]	; (80006dc <SystemClock_Config+0xdc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemClock_Config+0xdc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0xe0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <SystemClock_Config+0xe0>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemClock_Config+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000674:	2360      	movs	r3, #96	; 0x60
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fe9b 	bl	80033c4 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000694:	f000 fc1e 	bl	8000ed4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000698:	f002 fe44 	bl	8003324 <HAL_PWREx_EnableOverDrive>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006a2:	f000 fc17 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2103      	movs	r1, #3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 f92c 	bl	8003920 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ce:	f000 fc01 	bl	8000ed4 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_CAN1_Init+0x64>)
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <MX_CAN1_Init+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_CAN1_Init+0x64>)
 80006f0:	2218      	movs	r2, #24
 80006f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_CAN1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_CAN1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_CAN1_Init+0x64>)
 8000702:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000706:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_CAN1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_CAN1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_CAN1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_CAN1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_CAN1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_CAN1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_CAN1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_CAN1_Init+0x64>)
 8000734:	f000 ffd6 	bl	80016e4 <HAL_CAN_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800073e:	f000 fbc9 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200001ec 	.word	0x200001ec
 800074c:	40006400 	.word	0x40006400

08000750 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_ETH_Init+0x84>)
 8000756:	4a20      	ldr	r2, [pc, #128]	; (80007d8 <MX_ETH_Init+0x88>)
 8000758:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_ETH_Init+0x8c>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_ETH_Init+0x8c>)
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_ETH_Init+0x8c>)
 8000768:	22e1      	movs	r2, #225	; 0xe1
 800076a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_ETH_Init+0x8c>)
 800076e:	2200      	movs	r2, #0
 8000770:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_ETH_Init+0x8c>)
 8000774:	2200      	movs	r2, #0
 8000776:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_ETH_Init+0x8c>)
 800077a:	2200      	movs	r2, #0
 800077c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_ETH_Init+0x84>)
 8000780:	4a16      	ldr	r2, [pc, #88]	; (80007dc <MX_ETH_Init+0x8c>)
 8000782:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_ETH_Init+0x84>)
 8000786:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800078a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_ETH_Init+0x84>)
 800078e:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <MX_ETH_Init+0x90>)
 8000790:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_ETH_Init+0x84>)
 8000794:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <MX_ETH_Init+0x94>)
 8000796:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_ETH_Init+0x84>)
 800079a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800079e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_ETH_Init+0x84>)
 80007a2:	f001 ff61 	bl	8002668 <HAL_ETH_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 fb92 	bl	8000ed4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007b0:	2238      	movs	r2, #56	; 0x38
 80007b2:	2100      	movs	r1, #0
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <MX_ETH_Init+0x98>)
 80007b6:	f006 fdb4 	bl	8007322 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_ETH_Init+0x98>)
 80007bc:	2221      	movs	r2, #33	; 0x21
 80007be:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_ETH_Init+0x98>)
 80007c2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007c6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_ETH_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000214 	.word	0x20000214
 80007d8:	40028000 	.word	0x40028000
 80007dc:	20000980 	.word	0x20000980
 80007e0:	200000f8 	.word	0x200000f8
 80007e4:	20000058 	.word	0x20000058
 80007e8:	200001b4 	.word	0x200001b4

080007ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <MX_TIM4_Init+0xe8>)
 8000820:	4a2d      	ldr	r2, [pc, #180]	; (80008d8 <MX_TIM4_Init+0xec>)
 8000822:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <MX_TIM4_Init+0xe8>)
 8000826:	225f      	movs	r2, #95	; 0x5f
 8000828:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <MX_TIM4_Init+0xe8>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8000830:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <MX_TIM4_Init+0xe8>)
 8000832:	f241 3287 	movw	r2, #4999	; 0x1387
 8000836:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_TIM4_Init+0xe8>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <MX_TIM4_Init+0xe8>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000844:	4823      	ldr	r0, [pc, #140]	; (80008d4 <MX_TIM4_Init+0xe8>)
 8000846:	f003 feb9 	bl	80045bc <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000850:	f000 fb40 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800085a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085e:	4619      	mov	r1, r3
 8000860:	481c      	ldr	r0, [pc, #112]	; (80008d4 <MX_TIM4_Init+0xe8>)
 8000862:	f004 f9f1 	bl	8004c48 <HAL_TIM_ConfigClockSource>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800086c:	f000 fb32 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000870:	4818      	ldr	r0, [pc, #96]	; (80008d4 <MX_TIM4_Init+0xe8>)
 8000872:	f003 fefa 	bl	800466a <HAL_TIM_PWM_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800087c:	f000 fb2a 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4811      	ldr	r0, [pc, #68]	; (80008d4 <MX_TIM4_Init+0xe8>)
 8000890:	f004 fe6e 	bl	8005570 <HAL_TIMEx_MasterConfigSynchronization>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800089a:	f000 fb1b 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089e:	2360      	movs	r3, #96	; 0x60
 80008a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	2200      	movs	r2, #0
 80008b2:	4619      	mov	r1, r3
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <MX_TIM4_Init+0xe8>)
 80008b6:	f004 f8b3 	bl	8004a20 <HAL_TIM_PWM_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80008c0:	f000 fb08 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008c4:	4803      	ldr	r0, [pc, #12]	; (80008d4 <MX_TIM4_Init+0xe8>)
 80008c6:	f000 fc85 	bl	80011d4 <HAL_TIM_MspPostInit>

}
 80008ca:	bf00      	nop
 80008cc:	3738      	adds	r7, #56	; 0x38
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200002c4 	.word	0x200002c4
 80008d8:	40000800 	.word	0x40000800

080008dc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_UART4_Init+0x58>)
 80008e2:	4a15      	ldr	r2, [pc, #84]	; (8000938 <MX_UART4_Init+0x5c>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_UART4_Init+0x58>)
 80008e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_UART4_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_UART4_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_UART4_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_UART4_Init+0x58>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_UART4_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_UART4_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_UART4_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_UART4_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_UART4_Init+0x58>)
 8000920:	f004 feb4 	bl	800568c <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800092a:	f000 fad3 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000370 	.word	0x20000370
 8000938:	40004c00 	.word	0x40004c00

0800093c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000942:	4a15      	ldr	r2, [pc, #84]	; (8000998 <MX_USART3_UART_Init+0x5c>)
 8000944:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART3_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_USART3_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_USART3_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000980:	f004 fe84 	bl	800568c <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800098a:	f000 faa3 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200003f8 	.word	0x200003f8
 8000998:	40004800 	.word	0x40004800

0800099c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	2206      	movs	r2, #6
 80009ac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	2202      	movs	r2, #2
 80009be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e0:	f002 fb55 	bl	800308e <HAL_PCD_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ea:	f000 fa73 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000480 	.word	0x20000480

080009f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_DMA_Init+0x38>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <MX_DMA_Init+0x38>)
 8000a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_DMA_Init+0x38>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	200b      	movs	r0, #11
 8000a1c:	f001 fa71 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a20:	200b      	movs	r0, #11
 8000a22:	f001 fa8a 	bl	8001f3a <HAL_NVIC_EnableIRQ>

}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a46      	ldr	r2, [pc, #280]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a40      	ldr	r2, [pc, #256]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a3a      	ldr	r2, [pc, #232]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a34      	ldr	r2, [pc, #208]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a2e      	ldr	r2, [pc, #184]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac2:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a28      	ldr	r2, [pc, #160]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|Blue_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ae0:	4822      	ldr	r0, [pc, #136]	; (8000b6c <MX_GPIO_Init+0x138>)
 8000ae2:	f002 fabb 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2140      	movs	r1, #64	; 0x40
 8000aea:	4821      	ldr	r0, [pc, #132]	; (8000b70 <MX_GPIO_Init+0x13c>)
 8000aec:	f002 fab6 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	481b      	ldr	r0, [pc, #108]	; (8000b74 <MX_GPIO_Init+0x140>)
 8000b08:	f002 f8fc 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|Blue_Pin;
 8000b0c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_GPIO_Init+0x138>)
 8000b26:	f002 f8ed 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b2a:	2340      	movs	r3, #64	; 0x40
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <MX_GPIO_Init+0x13c>)
 8000b42:	f002 f8df 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_GPIO_Init+0x13c>)
 8000b5a:	f002 f8d3 	bl	8002d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3730      	adds	r7, #48	; 0x30
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40021800 	.word	0x40021800
 8000b74:	40020800 	.word	0x40020800

08000b78 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

//usart callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	if (huart == &huart4) { // Check if the callback is for huart4
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a49      	ldr	r2, [pc, #292]	; (8000ca8 <HAL_UART_RxCpltCallback+0x130>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	f040 818a 	bne.w	8000e9e <HAL_UART_RxCpltCallback+0x326>

		if (rx_data[0] == 'A' && rx_data[1] == 'T') {
 8000b8a:	4b48      	ldr	r3, [pc, #288]	; (8000cac <HAL_UART_RxCpltCallback+0x134>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b41      	cmp	r3, #65	; 0x41
 8000b90:	d106      	bne.n	8000ba0 <HAL_UART_RxCpltCallback+0x28>
 8000b92:	4b46      	ldr	r3, [pc, #280]	; (8000cac <HAL_UART_RxCpltCallback+0x134>)
 8000b94:	785b      	ldrb	r3, [r3, #1]
 8000b96:	2b54      	cmp	r3, #84	; 0x54
 8000b98:	d102      	bne.n	8000ba0 <HAL_UART_RxCpltCallback+0x28>
			at_found = 1;
 8000b9a:	4b45      	ldr	r3, [pc, #276]	; (8000cb0 <HAL_UART_RxCpltCallback+0x138>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
		}

		if (at_found) {
 8000ba0:	4b43      	ldr	r3, [pc, #268]	; (8000cb0 <HAL_UART_RxCpltCallback+0x138>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f000 8175 	beq.w	8000e94 <HAL_UART_RxCpltCallback+0x31c>
			int rx_numbers_index = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]

			for (int i = 0; i <= NUMBERS; i++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	e00e      	b.n	8000bd2 <HAL_UART_RxCpltCallback+0x5a>
				if (rx_data[2] == numbers[i]) {
 8000bb4:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <HAL_UART_RxCpltCallback+0x134>)
 8000bb6:	789a      	ldrb	r2, [r3, #2]
 8000bb8:	493e      	ldr	r1, [pc, #248]	; (8000cb4 <HAL_UART_RxCpltCallback+0x13c>)
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	440b      	add	r3, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d103      	bne.n	8000bcc <HAL_UART_RxCpltCallback+0x54>
					rx_numbers_index++;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
					break;
 8000bca:	e005      	b.n	8000bd8 <HAL_UART_RxCpltCallback+0x60>
			for (int i = 0; i <= NUMBERS; i++) {
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	2b0a      	cmp	r3, #10
 8000bd6:	dded      	ble.n	8000bb4 <HAL_UART_RxCpltCallback+0x3c>
				}
			}

			if (rx_numbers_index == 1) {
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d114      	bne.n	8000c08 <HAL_UART_RxCpltCallback+0x90>
				for (int i = 0; i <= NUMBERS; i++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	e00e      	b.n	8000c02 <HAL_UART_RxCpltCallback+0x8a>
					if (rx_data[3] == numbers[i]) {
 8000be4:	4b31      	ldr	r3, [pc, #196]	; (8000cac <HAL_UART_RxCpltCallback+0x134>)
 8000be6:	78da      	ldrb	r2, [r3, #3]
 8000be8:	4932      	ldr	r1, [pc, #200]	; (8000cb4 <HAL_UART_RxCpltCallback+0x13c>)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	440b      	add	r3, r1
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d103      	bne.n	8000bfc <HAL_UART_RxCpltCallback+0x84>
						rx_numbers_index++;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
						break;
 8000bfa:	e005      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x90>
				for (int i = 0; i <= NUMBERS; i++) {
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2b0a      	cmp	r3, #10
 8000c06:	dded      	ble.n	8000be4 <HAL_UART_RxCpltCallback+0x6c>
					}
				}
			}

			if (rx_numbers_index == 2) {
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d114      	bne.n	8000c38 <HAL_UART_RxCpltCallback+0xc0>
				for (int i = 0; i <= NUMBERS; i++) {
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	e00e      	b.n	8000c32 <HAL_UART_RxCpltCallback+0xba>
					if (rx_data[4] == numbers[i]) {
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <HAL_UART_RxCpltCallback+0x134>)
 8000c16:	791a      	ldrb	r2, [r3, #4]
 8000c18:	4926      	ldr	r1, [pc, #152]	; (8000cb4 <HAL_UART_RxCpltCallback+0x13c>)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	440b      	add	r3, r1
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d103      	bne.n	8000c2c <HAL_UART_RxCpltCallback+0xb4>
						rx_numbers_index++;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
						break;
 8000c2a:	e005      	b.n	8000c38 <HAL_UART_RxCpltCallback+0xc0>
				for (int i = 0; i <= NUMBERS; i++) {
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	2b0a      	cmp	r3, #10
 8000c36:	dded      	ble.n	8000c14 <HAL_UART_RxCpltCallback+0x9c>
					}
				}
			}

			if (rx_numbers_index == 3) {
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d179      	bne.n	8000d32 <HAL_UART_RxCpltCallback+0x1ba>

				// percentage of speed 0 - 100 %
				percentageNumber = 100 * ((int)rx_data[2] - 48) + 10 * ((int)rx_data[3] - 48) + ((int)rx_data[4] - 48);
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_UART_RxCpltCallback+0x134>)
 8000c40:	789b      	ldrb	r3, [r3, #2]
 8000c42:	3b30      	subs	r3, #48	; 0x30
 8000c44:	2264      	movs	r2, #100	; 0x64
 8000c46:	fb02 f103 	mul.w	r1, r2, r3
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_RxCpltCallback+0x134>)
 8000c4c:	78db      	ldrb	r3, [r3, #3]
 8000c4e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	18ca      	adds	r2, r1, r3
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_UART_RxCpltCallback+0x134>)
 8000c5e:	791b      	ldrb	r3, [r3, #4]
 8000c60:	3b30      	subs	r3, #48	; 0x30
 8000c62:	4413      	add	r3, r2
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <HAL_UART_RxCpltCallback+0x140>)
 8000c66:	6013      	str	r3, [r2, #0]

				if (percentageNumber > 100) {
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_UART_RxCpltCallback+0x140>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b64      	cmp	r3, #100	; 0x64
 8000c6e:	dd0b      	ble.n	8000c88 <HAL_UART_RxCpltCallback+0x110>
					percentageNumber = 100;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_RxCpltCallback+0x140>)
 8000c72:	2264      	movs	r2, #100	; 0x64
 8000c74:	601a      	str	r2, [r3, #0]
					rx_data[2] = (uint8_t) 49;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_UART_RxCpltCallback+0x134>)
 8000c78:	2231      	movs	r2, #49	; 0x31
 8000c7a:	709a      	strb	r2, [r3, #2]
					rx_data[3] = (uint8_t) 48;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_UART_RxCpltCallback+0x134>)
 8000c7e:	2230      	movs	r2, #48	; 0x30
 8000c80:	70da      	strb	r2, [r3, #3]
					rx_data[4] = (uint8_t) 48;
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_UART_RxCpltCallback+0x134>)
 8000c84:	2230      	movs	r2, #48	; 0x30
 8000c86:	711a      	strb	r2, [r3, #4]
				}
				// Can data
				txData[0] = percentageNumber;
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_UART_RxCpltCallback+0x140>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_UART_RxCpltCallback+0x144>)
 8000c90:	701a      	strb	r2, [r3, #0]

				// Message for user
				if (rx_data[2] == '0') {
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_UART_RxCpltCallback+0x134>)
 8000c94:	789b      	ldrb	r3, [r3, #2]
 8000c96:	2b30      	cmp	r3, #48	; 0x30
 8000c98:	d116      	bne.n	8000cc8 <HAL_UART_RxCpltCallback+0x150>
					tx_perc[9] = ' ';
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_UART_RxCpltCallback+0x148>)
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	725a      	strb	r2, [r3, #9]
					tx_ask_speed[10] = ' ';
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_UART_RxCpltCallback+0x14c>)
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	729a      	strb	r2, [r3, #10]
 8000ca6:	e017      	b.n	8000cd8 <HAL_UART_RxCpltCallback+0x160>
 8000ca8:	20000370 	.word	0x20000370
 8000cac:	20000960 	.word	0x20000960
 8000cb0:	20000968 	.word	0x20000968
 8000cb4:	080073a8 	.word	0x080073a8
 8000cb8:	2000096c 	.word	0x2000096c
 8000cbc:	20000978 	.word	0x20000978
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000038 	.word	0x20000038
				} else {
					tx_perc[9] = rx_data[2];
 8000cc8:	4b77      	ldr	r3, [pc, #476]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000cca:	789a      	ldrb	r2, [r3, #2]
 8000ccc:	4b77      	ldr	r3, [pc, #476]	; (8000eac <HAL_UART_RxCpltCallback+0x334>)
 8000cce:	725a      	strb	r2, [r3, #9]
					tx_ask_speed[10] = rx_data[2];
 8000cd0:	4b75      	ldr	r3, [pc, #468]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000cd2:	789a      	ldrb	r2, [r3, #2]
 8000cd4:	4b76      	ldr	r3, [pc, #472]	; (8000eb0 <HAL_UART_RxCpltCallback+0x338>)
 8000cd6:	729a      	strb	r2, [r3, #10]
				}
				tx_perc[10] = rx_data[3];
 8000cd8:	4b73      	ldr	r3, [pc, #460]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000cda:	78da      	ldrb	r2, [r3, #3]
 8000cdc:	4b73      	ldr	r3, [pc, #460]	; (8000eac <HAL_UART_RxCpltCallback+0x334>)
 8000cde:	729a      	strb	r2, [r3, #10]
				tx_perc[11] = rx_data[4];
 8000ce0:	4b71      	ldr	r3, [pc, #452]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000ce2:	791a      	ldrb	r2, [r3, #4]
 8000ce4:	4b71      	ldr	r3, [pc, #452]	; (8000eac <HAL_UART_RxCpltCallback+0x334>)
 8000ce6:	72da      	strb	r2, [r3, #11]


				tx_ask_speed[11] = rx_data[3];
 8000ce8:	4b6f      	ldr	r3, [pc, #444]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000cea:	78da      	ldrb	r2, [r3, #3]
 8000cec:	4b70      	ldr	r3, [pc, #448]	; (8000eb0 <HAL_UART_RxCpltCallback+0x338>)
 8000cee:	72da      	strb	r2, [r3, #11]
				tx_ask_speed[12] = rx_data[4];
 8000cf0:	4b6d      	ldr	r3, [pc, #436]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000cf2:	791a      	ldrb	r2, [r3, #4]
 8000cf4:	4b6e      	ldr	r3, [pc, #440]	; (8000eb0 <HAL_UART_RxCpltCallback+0x338>)
 8000cf6:	731a      	strb	r2, [r3, #12]

				HAL_UART_Transmit(&huart4, tx_perc, TX_PERC, UART_TIMEOUT);
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	2211      	movs	r2, #17
 8000cfc:	496b      	ldr	r1, [pc, #428]	; (8000eac <HAL_UART_RxCpltCallback+0x334>)
 8000cfe:	486d      	ldr	r0, [pc, #436]	; (8000eb4 <HAL_UART_RxCpltCallback+0x33c>)
 8000d00:	f004 fd12 	bl	8005728 <HAL_UART_Transmit>

				// Duty
				TIM4->CCR1 = 4000 * percentageNumber/100 + 500;
 8000d04:	4b6c      	ldr	r3, [pc, #432]	; (8000eb8 <HAL_UART_RxCpltCallback+0x340>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000d14:	4b69      	ldr	r3, [pc, #420]	; (8000ebc <HAL_UART_RxCpltCallback+0x344>)
 8000d16:	635a      	str	r2, [r3, #52]	; 0x34
				test = 4000 * percentageNumber/100 + 500;
 8000d18:	4b67      	ldr	r3, [pc, #412]	; (8000eb8 <HAL_UART_RxCpltCallback+0x340>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d28:	4a65      	ldr	r2, [pc, #404]	; (8000ec0 <HAL_UART_RxCpltCallback+0x348>)
 8000d2a:	6013      	str	r3, [r2, #0]

				at_found = 0;
 8000d2c:	4b65      	ldr	r3, [pc, #404]	; (8000ec4 <HAL_UART_RxCpltCallback+0x34c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
			}

			if (rx_data[2] == 'N' && rx_data[3] == 'O' && rx_data[4] == 'N') {
 8000d32:	4b5d      	ldr	r3, [pc, #372]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	2b4e      	cmp	r3, #78	; 0x4e
 8000d38:	d12e      	bne.n	8000d98 <HAL_UART_RxCpltCallback+0x220>
 8000d3a:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000d3c:	78db      	ldrb	r3, [r3, #3]
 8000d3e:	2b4f      	cmp	r3, #79	; 0x4f
 8000d40:	d12a      	bne.n	8000d98 <HAL_UART_RxCpltCallback+0x220>
 8000d42:	4b59      	ldr	r3, [pc, #356]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000d44:	791b      	ldrb	r3, [r3, #4]
 8000d46:	2b4e      	cmp	r3, #78	; 0x4e
 8000d48:	d126      	bne.n	8000d98 <HAL_UART_RxCpltCallback+0x220>
				communication_type = NONE;
 8000d4a:	4b5f      	ldr	r3, [pc, #380]	; (8000ec8 <HAL_UART_RxCpltCallback+0x350>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]

				tx_type[9] = rx_data[2];
 8000d50:	4b55      	ldr	r3, [pc, #340]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000d52:	789a      	ldrb	r2, [r3, #2]
 8000d54:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000d56:	725a      	strb	r2, [r3, #9]
				tx_type[10] = rx_data[3];
 8000d58:	4b53      	ldr	r3, [pc, #332]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000d5a:	78da      	ldrb	r2, [r3, #3]
 8000d5c:	4b5b      	ldr	r3, [pc, #364]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000d5e:	729a      	strb	r2, [r3, #10]
				tx_type[11] = rx_data[4];
 8000d60:	4b51      	ldr	r3, [pc, #324]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000d62:	791a      	ldrb	r2, [r3, #4]
 8000d64:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000d66:	72da      	strb	r2, [r3, #11]
				tx_type[12] = 'E';
 8000d68:	4b58      	ldr	r3, [pc, #352]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000d6a:	2245      	movs	r2, #69	; 0x45
 8000d6c:	731a      	strb	r2, [r3, #12]

				tx_ask[10] = rx_data[2];
 8000d6e:	4b4e      	ldr	r3, [pc, #312]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000d70:	789a      	ldrb	r2, [r3, #2]
 8000d72:	4b57      	ldr	r3, [pc, #348]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000d74:	729a      	strb	r2, [r3, #10]
				tx_ask[11] = rx_data[3];
 8000d76:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000d78:	78da      	ldrb	r2, [r3, #3]
 8000d7a:	4b55      	ldr	r3, [pc, #340]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000d7c:	72da      	strb	r2, [r3, #11]
				tx_ask[12] = rx_data[4];
 8000d7e:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000d80:	791a      	ldrb	r2, [r3, #4]
 8000d82:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000d84:	731a      	strb	r2, [r3, #12]
				tx_ask[13] = 'E';
 8000d86:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000d88:	2245      	movs	r2, #69	; 0x45
 8000d8a:	735a      	strb	r2, [r3, #13]

				HAL_UART_Transmit(&huart4, tx_type, TX_TYPE, UART_TIMEOUT);
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	2211      	movs	r2, #17
 8000d90:	494e      	ldr	r1, [pc, #312]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000d92:	4848      	ldr	r0, [pc, #288]	; (8000eb4 <HAL_UART_RxCpltCallback+0x33c>)
 8000d94:	f004 fcc8 	bl	8005728 <HAL_UART_Transmit>
			}
			if (rx_data[2] == 'P' && rx_data[3] == 'W' && rx_data[4] == 'M') {
 8000d98:	4b43      	ldr	r3, [pc, #268]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000d9a:	789b      	ldrb	r3, [r3, #2]
 8000d9c:	2b50      	cmp	r3, #80	; 0x50
 8000d9e:	d12e      	bne.n	8000dfe <HAL_UART_RxCpltCallback+0x286>
 8000da0:	4b41      	ldr	r3, [pc, #260]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000da2:	78db      	ldrb	r3, [r3, #3]
 8000da4:	2b57      	cmp	r3, #87	; 0x57
 8000da6:	d12a      	bne.n	8000dfe <HAL_UART_RxCpltCallback+0x286>
 8000da8:	4b3f      	ldr	r3, [pc, #252]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000daa:	791b      	ldrb	r3, [r3, #4]
 8000dac:	2b4d      	cmp	r3, #77	; 0x4d
 8000dae:	d126      	bne.n	8000dfe <HAL_UART_RxCpltCallback+0x286>
				communication_type = PWM;
 8000db0:	4b45      	ldr	r3, [pc, #276]	; (8000ec8 <HAL_UART_RxCpltCallback+0x350>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]

				tx_type[9] = rx_data[2];
 8000db6:	4b3c      	ldr	r3, [pc, #240]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000db8:	789a      	ldrb	r2, [r3, #2]
 8000dba:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000dbc:	725a      	strb	r2, [r3, #9]
				tx_type[10] = rx_data[3];
 8000dbe:	4b3a      	ldr	r3, [pc, #232]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000dc0:	78da      	ldrb	r2, [r3, #3]
 8000dc2:	4b42      	ldr	r3, [pc, #264]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000dc4:	729a      	strb	r2, [r3, #10]
				tx_type[11] = rx_data[4];
 8000dc6:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000dc8:	791a      	ldrb	r2, [r3, #4]
 8000dca:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000dcc:	72da      	strb	r2, [r3, #11]
				tx_type[12] = ' ';
 8000dce:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	731a      	strb	r2, [r3, #12]

				tx_ask[10] = rx_data[2];
 8000dd4:	4b34      	ldr	r3, [pc, #208]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000dd6:	789a      	ldrb	r2, [r3, #2]
 8000dd8:	4b3d      	ldr	r3, [pc, #244]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000dda:	729a      	strb	r2, [r3, #10]
				tx_ask[11] = rx_data[3];
 8000ddc:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000dde:	78da      	ldrb	r2, [r3, #3]
 8000de0:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000de2:	72da      	strb	r2, [r3, #11]
				tx_ask[12] = rx_data[4];
 8000de4:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000de6:	791a      	ldrb	r2, [r3, #4]
 8000de8:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000dea:	731a      	strb	r2, [r3, #12]
				tx_ask[13] = ' ';
 8000dec:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000dee:	2220      	movs	r2, #32
 8000df0:	735a      	strb	r2, [r3, #13]

				HAL_UART_Transmit(&huart4, tx_type, TX_TYPE, UART_TIMEOUT);
 8000df2:	230f      	movs	r3, #15
 8000df4:	2211      	movs	r2, #17
 8000df6:	4935      	ldr	r1, [pc, #212]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000df8:	482e      	ldr	r0, [pc, #184]	; (8000eb4 <HAL_UART_RxCpltCallback+0x33c>)
 8000dfa:	f004 fc95 	bl	8005728 <HAL_UART_Transmit>
			}
			if (rx_data[2] == 'C' && rx_data[3] == 'A' && rx_data[4] == 'N') {
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e00:	789b      	ldrb	r3, [r3, #2]
 8000e02:	2b43      	cmp	r3, #67	; 0x43
 8000e04:	d12e      	bne.n	8000e64 <HAL_UART_RxCpltCallback+0x2ec>
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e08:	78db      	ldrb	r3, [r3, #3]
 8000e0a:	2b41      	cmp	r3, #65	; 0x41
 8000e0c:	d12a      	bne.n	8000e64 <HAL_UART_RxCpltCallback+0x2ec>
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e10:	791b      	ldrb	r3, [r3, #4]
 8000e12:	2b4e      	cmp	r3, #78	; 0x4e
 8000e14:	d126      	bne.n	8000e64 <HAL_UART_RxCpltCallback+0x2ec>
				communication_type = CAN;
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <HAL_UART_RxCpltCallback+0x350>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	701a      	strb	r2, [r3, #0]
				tx_type[9] = rx_data[2];
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e1e:	789a      	ldrb	r2, [r3, #2]
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000e22:	725a      	strb	r2, [r3, #9]
				tx_type[10] = rx_data[3];
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e26:	78da      	ldrb	r2, [r3, #3]
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000e2a:	729a      	strb	r2, [r3, #10]
				tx_type[11] = rx_data[4];
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e2e:	791a      	ldrb	r2, [r3, #4]
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000e32:	72da      	strb	r2, [r3, #11]
				tx_type[12] = ' ';
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000e36:	2220      	movs	r2, #32
 8000e38:	731a      	strb	r2, [r3, #12]

				tx_ask[10] = rx_data[2];
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e3c:	789a      	ldrb	r2, [r3, #2]
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000e40:	729a      	strb	r2, [r3, #10]
				tx_ask[11] = rx_data[3];
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e44:	78da      	ldrb	r2, [r3, #3]
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000e48:	72da      	strb	r2, [r3, #11]
				tx_ask[12] = rx_data[4];
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e4c:	791a      	ldrb	r2, [r3, #4]
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000e50:	731a      	strb	r2, [r3, #12]
				tx_ask[13] = ' ';
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000e54:	2220      	movs	r2, #32
 8000e56:	735a      	strb	r2, [r3, #13]

				HAL_UART_Transmit(&huart4, tx_type, TX_TYPE, UART_TIMEOUT);
 8000e58:	230f      	movs	r3, #15
 8000e5a:	2211      	movs	r2, #17
 8000e5c:	491b      	ldr	r1, [pc, #108]	; (8000ecc <HAL_UART_RxCpltCallback+0x354>)
 8000e5e:	4815      	ldr	r0, [pc, #84]	; (8000eb4 <HAL_UART_RxCpltCallback+0x33c>)
 8000e60:	f004 fc62 	bl	8005728 <HAL_UART_Transmit>
			}

			if (rx_data[2] == 'W' && rx_data[3] == 'H' && rx_data[4] == 'T') {
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e66:	789b      	ldrb	r3, [r3, #2]
 8000e68:	2b57      	cmp	r3, #87	; 0x57
 8000e6a:	d113      	bne.n	8000e94 <HAL_UART_RxCpltCallback+0x31c>
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e6e:	78db      	ldrb	r3, [r3, #3]
 8000e70:	2b48      	cmp	r3, #72	; 0x48
 8000e72:	d10f      	bne.n	8000e94 <HAL_UART_RxCpltCallback+0x31c>
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e76:	791b      	ldrb	r3, [r3, #4]
 8000e78:	2b54      	cmp	r3, #84	; 0x54
 8000e7a:	d10b      	bne.n	8000e94 <HAL_UART_RxCpltCallback+0x31c>
				HAL_UART_Transmit(&huart4, tx_ask, TX_ASK, UART_TIMEOUT);
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	2210      	movs	r2, #16
 8000e80:	4913      	ldr	r1, [pc, #76]	; (8000ed0 <HAL_UART_RxCpltCallback+0x358>)
 8000e82:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <HAL_UART_RxCpltCallback+0x33c>)
 8000e84:	f004 fc50 	bl	8005728 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart4, tx_ask_speed, TX_SPEED, UART_TIMEOUT);
 8000e88:	230f      	movs	r3, #15
 8000e8a:	2211      	movs	r2, #17
 8000e8c:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <HAL_UART_RxCpltCallback+0x338>)
 8000e8e:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <HAL_UART_RxCpltCallback+0x33c>)
 8000e90:	f004 fc4a 	bl	8005728 <HAL_UART_Transmit>
			}
		}
		HAL_UART_Receive_IT(&huart4, rx_data, RX_DATA);
 8000e94:	2205      	movs	r2, #5
 8000e96:	4904      	ldr	r1, [pc, #16]	; (8000ea8 <HAL_UART_RxCpltCallback+0x330>)
 8000e98:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <HAL_UART_RxCpltCallback+0x33c>)
 8000e9a:	f004 fcce 	bl	800583a <HAL_UART_Receive_IT>
	}


}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000960 	.word	0x20000960
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000038 	.word	0x20000038
 8000eb4:	20000370 	.word	0x20000370
 8000eb8:	2000096c 	.word	0x2000096c
 8000ebc:	40000800 	.word	0x40000800
 8000ec0:	20000974 	.word	0x20000974
 8000ec4:	20000968 	.word	0x20000968
 8000ec8:	20000970 	.word	0x20000970
 8000ecc:	20000014 	.word	0x20000014
 8000ed0:	20000028 	.word	0x20000028

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x44>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_MspInit+0x44>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_MspInit+0x44>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_MspInit+0x44>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_MspInit+0x44>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_MspInit+0x44>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <HAL_CAN_MspInit+0x8c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d12f      	bne.n	8000faa <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f8a:	2309      	movs	r3, #9
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <HAL_CAN_MspInit+0x94>)
 8000f96:	f001 feb5 	bl	8002d04 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f000 ffaf 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fa4:	2014      	movs	r0, #20
 8000fa6:	f000 ffc8 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40006400 	.word	0x40006400
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020c00 	.word	0x40020c00

08000fc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08e      	sub	sp, #56	; 0x38
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a4e      	ldr	r2, [pc, #312]	; (8001118 <HAL_ETH_MspInit+0x158>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	f040 8096 	bne.w	8001110 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000fe4:	4b4d      	ldr	r3, [pc, #308]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8000fea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff8:	623b      	str	r3, [r7, #32]
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a46      	ldr	r2, [pc, #280]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	4b41      	ldr	r3, [pc, #260]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4a40      	ldr	r2, [pc, #256]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800101a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800101e:	6313      	str	r3, [r2, #48]	; 0x30
 8001020:	4b3e      	ldr	r3, [pc, #248]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	4b3b      	ldr	r3, [pc, #236]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a3a      	ldr	r2, [pc, #232]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b35      	ldr	r3, [pc, #212]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	4a34      	ldr	r2, [pc, #208]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
 8001050:	4b32      	ldr	r3, [pc, #200]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	4a2e      	ldr	r2, [pc, #184]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	6313      	str	r3, [r2, #48]	; 0x30
 8001068:	4b2c      	ldr	r3, [pc, #176]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a28      	ldr	r2, [pc, #160]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800107a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800108c:	2332      	movs	r3, #50	; 0x32
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800109c:	230b      	movs	r3, #11
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	481e      	ldr	r0, [pc, #120]	; (8001120 <HAL_ETH_MspInit+0x160>)
 80010a8:	f001 fe2c 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010ac:	2386      	movs	r3, #134	; 0x86
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010bc:	230b      	movs	r3, #11
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	4817      	ldr	r0, [pc, #92]	; (8001124 <HAL_ETH_MspInit+0x164>)
 80010c8:	f001 fe1c 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010de:	230b      	movs	r3, #11
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	480f      	ldr	r0, [pc, #60]	; (8001128 <HAL_ETH_MspInit+0x168>)
 80010ea:	f001 fe0b 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001100:	230b      	movs	r3, #11
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	4619      	mov	r1, r3
 800110a:	4808      	ldr	r0, [pc, #32]	; (800112c <HAL_ETH_MspInit+0x16c>)
 800110c:	f001 fdfa 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	3738      	adds	r7, #56	; 0x38
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40028000 	.word	0x40028000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020800 	.word	0x40020800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40021800 	.word	0x40021800

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <HAL_TIM_Base_MspInit+0x94>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d13b      	bne.n	80011ba <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <HAL_TIM_Base_MspInit+0x98>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a20      	ldr	r2, [pc, #128]	; (80011c8 <HAL_TIM_Base_MspInit+0x98>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_TIM_Base_MspInit+0x98>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 800115c:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <HAL_TIM_Base_MspInit+0xa0>)
 800115e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 8001162:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001166:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 800116a:	2240      	movs	r2, #64	; 0x40
 800116c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 8001176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 800117e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001182:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 8001186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800119e:	480b      	ldr	r0, [pc, #44]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 80011a0:	f000 fee6 	bl	8001f70 <HAL_DMA_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 80011aa:	f7ff fe93 	bl	8000ed4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40000800 	.word	0x40000800
 80011c8:	40023800 	.word	0x40023800
 80011cc:	20000310 	.word	0x20000310
 80011d0:	40026010 	.word	0x40026010

080011d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_TIM_MspPostInit+0x64>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d11c      	bne.n	8001230 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_TIM_MspPostInit+0x68>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_TIM_MspPostInit+0x68>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_TIM_MspPostInit+0x68>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800120e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001212:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_TIM_MspPostInit+0x6c>)
 800122c:	f001 fd6a 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40000800 	.word	0x40000800
 800123c:	40023800 	.word	0x40023800
 8001240:	40020c00 	.word	0x40020c00

08001244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b0      	sub	sp, #192	; 0xc0
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	2290      	movs	r2, #144	; 0x90
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f006 f85c 	bl	8007322 <memset>
  if(huart->Instance==UART4)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a58      	ldr	r2, [pc, #352]	; (80013d0 <HAL_UART_MspInit+0x18c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d166      	bne.n	8001342 <HAL_UART_MspInit+0xfe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001278:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800127a:	2300      	movs	r3, #0
 800127c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fd72 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800128e:	f7ff fe21 	bl	8000ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001292:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a4f      	ldr	r2, [pc, #316]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a49      	ldr	r2, [pc, #292]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a43      	ldr	r2, [pc, #268]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012da:	2301      	movs	r3, #1
 80012dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012f2:	2308      	movs	r3, #8
 80012f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012fc:	4619      	mov	r1, r3
 80012fe:	4836      	ldr	r0, [pc, #216]	; (80013d8 <HAL_UART_MspInit+0x194>)
 8001300:	f001 fd00 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800131e:	2308      	movs	r3, #8
 8001320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001324:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001328:	4619      	mov	r1, r3
 800132a:	482c      	ldr	r0, [pc, #176]	; (80013dc <HAL_UART_MspInit+0x198>)
 800132c:	f001 fcea 	bl	8002d04 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2034      	movs	r0, #52	; 0x34
 8001336:	f000 fde4 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800133a:	2034      	movs	r0, #52	; 0x34
 800133c:	f000 fdfd 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001340:	e041      	b.n	80013c6 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a26      	ldr	r2, [pc, #152]	; (80013e0 <HAL_UART_MspInit+0x19c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d13c      	bne.n	80013c6 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800134c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001350:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001352:	2300      	movs	r3, #0
 8001354:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fd06 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_UART_MspInit+0x126>
      Error_Handler();
 8001366:	f7ff fdb5 	bl	8000ed4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_UART_MspInit+0x190>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800139a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800139e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013b4:	2307      	movs	r3, #7
 80013b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013be:	4619      	mov	r1, r3
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <HAL_UART_MspInit+0x1a0>)
 80013c2:	f001 fc9f 	bl	8002d04 <HAL_GPIO_Init>
}
 80013c6:	bf00      	nop
 80013c8:	37c0      	adds	r7, #192	; 0xc0
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40004c00 	.word	0x40004c00
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40004800 	.word	0x40004800
 80013e4:	40020c00 	.word	0x40020c00

080013e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ae      	sub	sp, #184	; 0xb8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2290      	movs	r2, #144	; 0x90
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f005 ff8a 	bl	8007322 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001416:	d159      	bne.n	80014cc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001418:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800141c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fc9f 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001434:	f7ff fd4e 	bl	8000ed4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6313      	str	r3, [r2, #48]	; 0x30
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001450:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800146a:	230a      	movs	r3, #10
 800146c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001474:	4619      	mov	r1, r3
 8001476:	4818      	ldr	r0, [pc, #96]	; (80014d8 <HAL_PCD_MspInit+0xf0>)
 8001478:	f001 fc44 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800147c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001494:	4619      	mov	r1, r3
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <HAL_PCD_MspInit+0xf0>)
 8001498:	f001 fc34 	bl	8002d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 800149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a6:	6353      	str	r3, [r2, #52]	; 0x34
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014be:	6453      	str	r3, [r2, #68]	; 0x44
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	37b8      	adds	r7, #184	; 0xb8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e0:	e7fe      	b.n	80014e0 <NMI_Handler+0x4>

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001528:	f000 f898 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <DMA1_Stream0_IRQHandler+0x10>)
 8001536:	f000 fe5b 	bl	80021f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000310 	.word	0x20000310

08001544 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <CAN1_RX0_IRQHandler+0x10>)
 800154a:	f000 f9c6 	bl	80018da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200001ec 	.word	0x200001ec

08001558 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <UART4_IRQHandler+0x10>)
 800155e:	f004 f9b1 	bl	80058c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000370 	.word	0x20000370

0800156c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001594:	f7ff ffea 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	; (80015dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015be:	f005 feb9 	bl	8007334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c2:	f7fe ffb7 	bl	8000534 <main>
  bx  lr    
 80015c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80015d4:	080073e4 	.word	0x080073e4
  ldr r2, =_sbss
 80015d8:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 80015dc:	2000098c 	.word	0x2000098c

080015e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC_IRQHandler>

080015e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e6:	2003      	movs	r0, #3
 80015e8:	f000 fc80 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 f805 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f2:	f7ff fc75 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fc9b 	bl	8001f56 <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001638:	f000 fc63 	bl	8001f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	2000004c 	.word	0x2000004c
 8001654:	20000054 	.word	0x20000054
 8001658:	20000050 	.word	0x20000050

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000054 	.word	0x20000054
 8001680:	20000988 	.word	0x20000988

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000988 	.word	0x20000988

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000054 	.word	0x20000054

080016e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0ed      	b.n	80018d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d102      	bne.n	8001708 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fc10 	bl	8000f28 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001718:	f7ff ffb4 	bl	8001684 <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800171e:	e012      	b.n	8001746 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001720:	f7ff ffb0 	bl	8001684 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b0a      	cmp	r3, #10
 800172c:	d90b      	bls.n	8001746 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2205      	movs	r2, #5
 800173e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0c5      	b.n	80018d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0e5      	beq.n	8001720 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0202 	bic.w	r2, r2, #2
 8001762:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001764:	f7ff ff8e 	bl	8001684 <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800176a:	e012      	b.n	8001792 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800176c:	f7ff ff8a 	bl	8001684 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b0a      	cmp	r3, #10
 8001778:	d90b      	bls.n	8001792 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2205      	movs	r2, #5
 800178a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e09f      	b.n	80018d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1e5      	bne.n	800176c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7e1b      	ldrb	r3, [r3, #24]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d108      	bne.n	80017ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e007      	b.n	80017ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7e5b      	ldrb	r3, [r3, #25]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d108      	bne.n	80017e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e007      	b.n	80017f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7e9b      	ldrb	r3, [r3, #26]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d108      	bne.n	800180e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0220 	orr.w	r2, r2, #32
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	e007      	b.n	800181e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0220 	bic.w	r2, r2, #32
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7edb      	ldrb	r3, [r3, #27]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d108      	bne.n	8001838 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0210 	bic.w	r2, r2, #16
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e007      	b.n	8001848 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0210 	orr.w	r2, r2, #16
 8001846:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7f1b      	ldrb	r3, [r3, #28]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d108      	bne.n	8001862 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0208 	orr.w	r2, r2, #8
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e007      	b.n	8001872 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0208 	bic.w	r2, r2, #8
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7f5b      	ldrb	r3, [r3, #29]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0204 	orr.w	r2, r2, #4
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e007      	b.n	800189c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0204 	bic.w	r2, r2, #4
 800189a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	ea42 0103 	orr.w	r1, r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	1e5a      	subs	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b08a      	sub	sp, #40	; 0x28
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d07c      	beq.n	8001a1a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d023      	beq.n	8001972 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f983 	bl	8001c48 <HAL_CAN_TxMailbox0CompleteCallback>
 8001942:	e016      	b.n	8001972 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
 8001956:	e00c      	b.n	8001972 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
 800196a:	e002      	b.n	8001972 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f989 	bl	8001c84 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d024      	beq.n	80019c6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001984:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f963 	bl	8001c5c <HAL_CAN_TxMailbox1CompleteCallback>
 8001996:	e016      	b.n	80019c6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d004      	beq.n	80019ac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
 80019aa:	e00c      	b.n	80019c6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d004      	beq.n	80019c0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	e002      	b.n	80019c6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f969 	bl	8001c98 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d024      	beq.n	8001a1a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f943 	bl	8001c70 <HAL_CAN_TxMailbox2CompleteCallback>
 80019ea:	e016      	b.n	8001a1a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	e00c      	b.n	8001a1a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d004      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	e002      	b.n	8001a1a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f949 	bl	8001cac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00c      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2210      	movs	r2, #16
 8001a3c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00b      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2208      	movs	r2, #8
 8001a58:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f93a 	bl	8001cd4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d009      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f921 	bl	8001cc0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00c      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00b      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d006      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2208      	movs	r2, #8
 8001abc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f91c 	bl	8001cfc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d009      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f903 	bl	8001ce8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00b      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2210      	movs	r2, #16
 8001afc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f906 	bl	8001d10 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f8ff 	bl	8001d24 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d07b      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d072      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d043      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d03e      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ba8:	2b60      	cmp	r3, #96	; 0x60
 8001baa:	d02b      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x32a>
 8001bac:	2b60      	cmp	r3, #96	; 0x60
 8001bae:	d82e      	bhi.n	8001c0e <HAL_CAN_IRQHandler+0x334>
 8001bb0:	2b50      	cmp	r3, #80	; 0x50
 8001bb2:	d022      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x320>
 8001bb4:	2b50      	cmp	r3, #80	; 0x50
 8001bb6:	d82a      	bhi.n	8001c0e <HAL_CAN_IRQHandler+0x334>
 8001bb8:	2b40      	cmp	r3, #64	; 0x40
 8001bba:	d019      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x316>
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d826      	bhi.n	8001c0e <HAL_CAN_IRQHandler+0x334>
 8001bc0:	2b30      	cmp	r3, #48	; 0x30
 8001bc2:	d010      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x30c>
 8001bc4:	2b30      	cmp	r3, #48	; 0x30
 8001bc6:	d822      	bhi.n	8001c0e <HAL_CAN_IRQHandler+0x334>
 8001bc8:	2b10      	cmp	r3, #16
 8001bca:	d002      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x2f8>
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d005      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bd0:	e01d      	b.n	8001c0e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bda:	e019      	b.n	8001c10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	f043 0310 	orr.w	r3, r3, #16
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001be4:	e014      	b.n	8001c10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	f043 0320 	orr.w	r3, r3, #32
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bee:	e00f      	b.n	8001c10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf8:	e00a      	b.n	8001c10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c02:	e005      	b.n	8001c10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c0c:	e000      	b.n	8001c10 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c0e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c1e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2204      	movs	r2, #4
 8001c26:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f87c 	bl	8001d38 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <__NVIC_SetPriorityGrouping+0x40>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__NVIC_SetPriorityGrouping+0x40>)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60d3      	str	r3, [r2, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00
 8001d90:	05fa0000 	.word	0x05fa0000

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ecc:	f7ff ff8e 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff29 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff3e 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff8e 	bl	8001e40 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5d 	bl	8001dec <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff31 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa2 	bl	8001ea8 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff fb82 	bl	8001684 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e099      	b.n	80020c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fac:	e00f      	b.n	8001fce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fae:	f7ff fb69 	bl	8001684 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d908      	bls.n	8001fce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e078      	b.n	80020c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e8      	bne.n	8001fae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <HAL_DMA_Init+0x158>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	2b04      	cmp	r3, #4
 8002026:	d107      	bne.n	8002038 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	4313      	orrs	r3, r2
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f023 0307 	bic.w	r3, r3, #7
 800204e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	2b04      	cmp	r3, #4
 8002060:	d117      	bne.n	8002092 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00e      	beq.n	8002092 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fa7b 	bl	8002570 <DMA_CheckFifoParam>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2240      	movs	r2, #64	; 0x40
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800208e:	2301      	movs	r3, #1
 8002090:	e016      	b.n	80020c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa32 	bl	8002504 <DMA_CalcBaseAndBitshift>
 80020a0:	4603      	mov	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a8:	223f      	movs	r2, #63	; 0x3f
 80020aa:	409a      	lsls	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	e010803f 	.word	0xe010803f

080020cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020da:	f7ff fad3 	bl	8001684 <HAL_GetTick>
 80020de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d008      	beq.n	80020fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e052      	b.n	80021a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0216 	bic.w	r2, r2, #22
 800210c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800211c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <HAL_DMA_Abort+0x62>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0208 	bic.w	r2, r2, #8
 800213c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800214e:	e013      	b.n	8002178 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002150:	f7ff fa98 	bl	8001684 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b05      	cmp	r3, #5
 800215c:	d90c      	bls.n	8002178 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2203      	movs	r2, #3
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e015      	b.n	80021a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1e4      	bne.n	8002150 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	223f      	movs	r2, #63	; 0x3f
 800218c:	409a      	lsls	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d004      	beq.n	80021ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00c      	b.n	80021e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2205      	movs	r2, #5
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80021fc:	4b8e      	ldr	r3, [pc, #568]	; (8002438 <HAL_DMA_IRQHandler+0x248>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a8e      	ldr	r2, [pc, #568]	; (800243c <HAL_DMA_IRQHandler+0x24c>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0a9b      	lsrs	r3, r3, #10
 8002208:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221a:	2208      	movs	r2, #8
 800221c:	409a      	lsls	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01a      	beq.n	800225c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0204 	bic.w	r2, r2, #4
 8002242:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	2208      	movs	r2, #8
 800224a:	409a      	lsls	r2, r3
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	2201      	movs	r2, #1
 8002262:	409a      	lsls	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d012      	beq.n	8002292 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227e:	2201      	movs	r2, #1
 8002280:	409a      	lsls	r2, r3
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	f043 0202 	orr.w	r2, r3, #2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	2204      	movs	r2, #4
 8002298:	409a      	lsls	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d012      	beq.n	80022c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00b      	beq.n	80022c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	2204      	movs	r2, #4
 80022b6:	409a      	lsls	r2, r3
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	f043 0204 	orr.w	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	2210      	movs	r2, #16
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d043      	beq.n	8002360 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d03c      	beq.n	8002360 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	2210      	movs	r2, #16
 80022ec:	409a      	lsls	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d018      	beq.n	8002332 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d108      	bne.n	8002320 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d024      	beq.n	8002360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	4798      	blx	r3
 800231e:	e01f      	b.n	8002360 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01b      	beq.n	8002360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
 8002330:	e016      	b.n	8002360 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0208 	bic.w	r2, r2, #8
 800234e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	2220      	movs	r2, #32
 8002366:	409a      	lsls	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 808f 	beq.w	8002490 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8087 	beq.w	8002490 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002386:	2220      	movs	r2, #32
 8002388:	409a      	lsls	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b05      	cmp	r3, #5
 8002398:	d136      	bne.n	8002408 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0216 	bic.w	r2, r2, #22
 80023a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d103      	bne.n	80023ca <HAL_DMA_IRQHandler+0x1da>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0208 	bic.w	r2, r2, #8
 80023d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	223f      	movs	r2, #63	; 0x3f
 80023e0:	409a      	lsls	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d07e      	beq.n	80024fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	4798      	blx	r3
        }
        return;
 8002406:	e079      	b.n	80024fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d01d      	beq.n	8002452 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10d      	bne.n	8002440 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	2b00      	cmp	r3, #0
 800242a:	d031      	beq.n	8002490 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
 8002434:	e02c      	b.n	8002490 <HAL_DMA_IRQHandler+0x2a0>
 8002436:	bf00      	nop
 8002438:	2000004c 	.word	0x2000004c
 800243c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d023      	beq.n	8002490 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
 8002450:	e01e      	b.n	8002490 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10f      	bne.n	8002480 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0210 	bic.w	r2, r2, #16
 800246e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002494:	2b00      	cmp	r3, #0
 8002496:	d032      	beq.n	80024fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d022      	beq.n	80024ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2205      	movs	r2, #5
 80024a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	3301      	adds	r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d307      	bcc.n	80024d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f2      	bne.n	80024bc <HAL_DMA_IRQHandler+0x2cc>
 80024d6:	e000      	b.n	80024da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	4798      	blx	r3
 80024fa:	e000      	b.n	80024fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80024fc:	bf00      	nop
    }
  }
}
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	3b10      	subs	r3, #16
 8002514:	4a13      	ldr	r2, [pc, #76]	; (8002564 <DMA_CalcBaseAndBitshift+0x60>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800251e:	4a12      	ldr	r2, [pc, #72]	; (8002568 <DMA_CalcBaseAndBitshift+0x64>)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d908      	bls.n	8002544 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <DMA_CalcBaseAndBitshift+0x68>)
 800253a:	4013      	ands	r3, r2
 800253c:	1d1a      	adds	r2, r3, #4
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	659a      	str	r2, [r3, #88]	; 0x58
 8002542:	e006      	b.n	8002552 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <DMA_CalcBaseAndBitshift+0x68>)
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	aaaaaaab 	.word	0xaaaaaaab
 8002568:	080073cc 	.word	0x080073cc
 800256c:	fffffc00 	.word	0xfffffc00

08002570 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d11f      	bne.n	80025ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d856      	bhi.n	800263e <DMA_CheckFifoParam+0xce>
 8002590:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <DMA_CheckFifoParam+0x28>)
 8002592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002596:	bf00      	nop
 8002598:	080025a9 	.word	0x080025a9
 800259c:	080025bb 	.word	0x080025bb
 80025a0:	080025a9 	.word	0x080025a9
 80025a4:	0800263f 	.word	0x0800263f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d046      	beq.n	8002642 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b8:	e043      	b.n	8002642 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c2:	d140      	bne.n	8002646 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c8:	e03d      	b.n	8002646 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d2:	d121      	bne.n	8002618 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d837      	bhi.n	800264a <DMA_CheckFifoParam+0xda>
 80025da:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <DMA_CheckFifoParam+0x70>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	080025f1 	.word	0x080025f1
 80025e4:	080025f7 	.word	0x080025f7
 80025e8:	080025f1 	.word	0x080025f1
 80025ec:	08002609 	.word	0x08002609
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      break;
 80025f4:	e030      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d025      	beq.n	800264e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002606:	e022      	b.n	800264e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002610:	d11f      	bne.n	8002652 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002616:	e01c      	b.n	8002652 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d903      	bls.n	8002626 <DMA_CheckFifoParam+0xb6>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d003      	beq.n	800262c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002624:	e018      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
      break;
 800262a:	e015      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
      break;
 800263c:	e00b      	b.n	8002656 <DMA_CheckFifoParam+0xe6>
      break;
 800263e:	bf00      	nop
 8002640:	e00a      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 8002642:	bf00      	nop
 8002644:	e008      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e006      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 800264a:	bf00      	nop
 800264c:	e004      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 800264e:	bf00      	nop
 8002650:	e002      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;   
 8002652:	bf00      	nop
 8002654:	e000      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 8002656:	bf00      	nop
    }
  } 
  
  return status; 
 8002658:	7bfb      	ldrb	r3, [r7, #15]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop

08002668 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e086      	b.n	8002788 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002680:	2b00      	cmp	r3, #0
 8002682:	d106      	bne.n	8002692 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2223      	movs	r2, #35	; 0x23
 8002688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7fe fc97 	bl	8000fc0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002692:	4b3f      	ldr	r3, [pc, #252]	; (8002790 <HAL_ETH_Init+0x128>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a3e      	ldr	r2, [pc, #248]	; (8002790 <HAL_ETH_Init+0x128>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b3c      	ldr	r3, [pc, #240]	; (8002790 <HAL_ETH_Init+0x128>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026aa:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <HAL_ETH_Init+0x12c>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4a39      	ldr	r2, [pc, #228]	; (8002794 <HAL_ETH_Init+0x12c>)
 80026b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026b4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026b6:	4b37      	ldr	r3, [pc, #220]	; (8002794 <HAL_ETH_Init+0x12c>)
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4935      	ldr	r1, [pc, #212]	; (8002794 <HAL_ETH_Init+0x12c>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80026c4:	4b33      	ldr	r3, [pc, #204]	; (8002794 <HAL_ETH_Init+0x12c>)
 80026c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e0:	f7fe ffd0 	bl	8001684 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026e6:	e011      	b.n	800270c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80026e8:	f7fe ffcc 	bl	8001684 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026f6:	d909      	bls.n	800270c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2204      	movs	r2, #4
 80026fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	22e0      	movs	r2, #224	; 0xe0
 8002704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e03d      	b.n	8002788 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e4      	bne.n	80026e8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f97a 	bl	8002a18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fa25 	bl	8002b74 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fa7b 	bl	8002c26 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	461a      	mov	r2, r3
 8002736:	2100      	movs	r1, #0
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f9e3 	bl	8002b04 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800274c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_ETH_Init+0x130>)
 800275c:	430b      	orrs	r3, r1
 800275e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002772:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2210      	movs	r2, #16
 8002782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	40013800 	.word	0x40013800
 8002798:	00020060 	.word	0x00020060

0800279c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4b53      	ldr	r3, [pc, #332]	; (8002900 <ETH_SetMACConfig+0x164>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	7b9b      	ldrb	r3, [r3, #14]
 80027ba:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	7c12      	ldrb	r2, [r2, #16]
 80027c0:	2a00      	cmp	r2, #0
 80027c2:	d102      	bne.n	80027ca <ETH_SetMACConfig+0x2e>
 80027c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027c8:	e000      	b.n	80027cc <ETH_SetMACConfig+0x30>
 80027ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80027cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	7c52      	ldrb	r2, [r2, #17]
 80027d2:	2a00      	cmp	r2, #0
 80027d4:	d102      	bne.n	80027dc <ETH_SetMACConfig+0x40>
 80027d6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80027da:	e000      	b.n	80027de <ETH_SetMACConfig+0x42>
 80027dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	7fdb      	ldrb	r3, [r3, #31]
 80027ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80027ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	7f92      	ldrb	r2, [r2, #30]
 80027f8:	2a00      	cmp	r2, #0
 80027fa:	d102      	bne.n	8002802 <ETH_SetMACConfig+0x66>
 80027fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002800:	e000      	b.n	8002804 <ETH_SetMACConfig+0x68>
 8002802:	2200      	movs	r2, #0
                        macconf->Speed |
 8002804:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	7f1b      	ldrb	r3, [r3, #28]
 800280a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800280c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002812:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800281a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002822:	2a00      	cmp	r2, #0
 8002824:	d102      	bne.n	800282c <ETH_SetMACConfig+0x90>
 8002826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282a:	e000      	b.n	800282e <ETH_SetMACConfig+0x92>
 800282c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800282e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	7bdb      	ldrb	r3, [r3, #15]
 8002834:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002836:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800283c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002844:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002846:	4313      	orrs	r3, r2
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800285e:	2001      	movs	r0, #1
 8002860:	f7fe ff1c 	bl	800169c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	f64f 7341 	movw	r3, #65345	; 0xff41
 800287a:	4013      	ands	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002882:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800288a:	2a00      	cmp	r2, #0
 800288c:	d101      	bne.n	8002892 <ETH_SetMACConfig+0xf6>
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	e000      	b.n	8002894 <ETH_SetMACConfig+0xf8>
 8002892:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002894:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800289a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80028a2:	2a01      	cmp	r2, #1
 80028a4:	d101      	bne.n	80028aa <ETH_SetMACConfig+0x10e>
 80028a6:	2208      	movs	r2, #8
 80028a8:	e000      	b.n	80028ac <ETH_SetMACConfig+0x110>
 80028aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80028b4:	2a01      	cmp	r2, #1
 80028b6:	d101      	bne.n	80028bc <ETH_SetMACConfig+0x120>
 80028b8:	2204      	movs	r2, #4
 80028ba:	e000      	b.n	80028be <ETH_SetMACConfig+0x122>
 80028bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80028c6:	2a01      	cmp	r2, #1
 80028c8:	d101      	bne.n	80028ce <ETH_SetMACConfig+0x132>
 80028ca:	2202      	movs	r2, #2
 80028cc:	e000      	b.n	80028d0 <ETH_SetMACConfig+0x134>
 80028ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028d0:	4313      	orrs	r3, r2
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f7fe fed7 	bl	800169c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	619a      	str	r2, [r3, #24]
}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	fd20810f 	.word	0xfd20810f

08002904 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <ETH_SetDMAConfig+0x110>)
 800291e:	4013      	ands	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	7b1b      	ldrb	r3, [r3, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d102      	bne.n	8002930 <ETH_SetDMAConfig+0x2c>
 800292a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800292e:	e000      	b.n	8002932 <ETH_SetDMAConfig+0x2e>
 8002930:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	7b5b      	ldrb	r3, [r3, #13]
 8002936:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002938:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	7f52      	ldrb	r2, [r2, #29]
 800293e:	2a00      	cmp	r2, #0
 8002940:	d102      	bne.n	8002948 <ETH_SetDMAConfig+0x44>
 8002942:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002946:	e000      	b.n	800294a <ETH_SetDMAConfig+0x46>
 8002948:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800294a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	7b9b      	ldrb	r3, [r3, #14]
 8002950:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002952:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002958:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	7f1b      	ldrb	r3, [r3, #28]
 800295e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002960:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	7f9b      	ldrb	r3, [r3, #30]
 8002966:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002968:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800296e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002976:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002978:	4313      	orrs	r3, r2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002988:	461a      	mov	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800299a:	2001      	movs	r0, #1
 800299c:	f7fe fe7e 	bl	800169c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a8:	461a      	mov	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	791b      	ldrb	r3, [r3, #4]
 80029b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029f8:	2001      	movs	r0, #1
 80029fa:	f7fe fe4f 	bl	800169c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	f8de3f23 	.word	0xf8de3f23

08002a18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b0a6      	sub	sp, #152	; 0x98
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a84:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff fe7f 	bl	800279c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002aac:	2301      	movs	r3, #1
 8002aae:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002aca:	2301      	movs	r3, #1
 8002acc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ad2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ad4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ad8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ade:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	4619      	mov	r1, r3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ff05 	bl	8002904 <ETH_SetDMAConfig>
}
 8002afa:	bf00      	nop
 8002afc:	3798      	adds	r7, #152	; 0x98
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3305      	adds	r3, #5
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	3204      	adds	r2, #4
 8002b1c:	7812      	ldrb	r2, [r2, #0]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <ETH_MACAddressConfig+0x68>)
 8002b26:	4413      	add	r3, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3303      	adds	r3, #3
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	061a      	lsls	r2, r3, #24
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3302      	adds	r3, #2
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3301      	adds	r3, #1
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <ETH_MACAddressConfig+0x6c>)
 8002b56:	4413      	add	r3, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	6013      	str	r3, [r2, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40028040 	.word	0x40028040
 8002b70:	40028044 	.word	0x40028044

08002b74 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e03e      	b.n	8002c00 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68d9      	ldr	r1, [r3, #12]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	3206      	adds	r2, #6
 8002bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d80c      	bhi.n	8002be4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68d9      	ldr	r1, [r3, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	e004      	b.n	8002bee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	461a      	mov	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d9bd      	bls.n	8002b82 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c18:	611a      	str	r2, [r3, #16]
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e048      	b.n	8002cc6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6919      	ldr	r1, [r3, #16]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2200      	movs	r2, #0
 8002c62:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2200      	movs	r2, #0
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c70:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	3212      	adds	r2, #18
 8002c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d80c      	bhi.n	8002cb6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6919      	ldr	r1, [r3, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	e004      	b.n	8002cc0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d9b3      	bls.n	8002c34 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf6:	60da      	str	r2, [r3, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	e175      	b.n	8003010 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d24:	2201      	movs	r2, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	f040 8164 	bne.w	800300a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d005      	beq.n	8002d5a <HAL_GPIO_Init+0x56>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d130      	bne.n	8002dbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0201 	and.w	r2, r3, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d017      	beq.n	8002df8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d123      	bne.n	8002e4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	08da      	lsrs	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3208      	adds	r2, #8
 8002e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	08da      	lsrs	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3208      	adds	r2, #8
 8002e46:	69b9      	ldr	r1, [r7, #24]
 8002e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0203 	and.w	r2, r3, #3
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80be 	beq.w	800300a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8e:	4b66      	ldr	r3, [pc, #408]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	4a65      	ldr	r2, [pc, #404]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e98:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9a:	4b63      	ldr	r3, [pc, #396]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ea6:	4a61      	ldr	r2, [pc, #388]	; (800302c <HAL_GPIO_Init+0x328>)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a58      	ldr	r2, [pc, #352]	; (8003030 <HAL_GPIO_Init+0x32c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d037      	beq.n	8002f42 <HAL_GPIO_Init+0x23e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a57      	ldr	r2, [pc, #348]	; (8003034 <HAL_GPIO_Init+0x330>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d031      	beq.n	8002f3e <HAL_GPIO_Init+0x23a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a56      	ldr	r2, [pc, #344]	; (8003038 <HAL_GPIO_Init+0x334>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d02b      	beq.n	8002f3a <HAL_GPIO_Init+0x236>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a55      	ldr	r2, [pc, #340]	; (800303c <HAL_GPIO_Init+0x338>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d025      	beq.n	8002f36 <HAL_GPIO_Init+0x232>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a54      	ldr	r2, [pc, #336]	; (8003040 <HAL_GPIO_Init+0x33c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01f      	beq.n	8002f32 <HAL_GPIO_Init+0x22e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a53      	ldr	r2, [pc, #332]	; (8003044 <HAL_GPIO_Init+0x340>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d019      	beq.n	8002f2e <HAL_GPIO_Init+0x22a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a52      	ldr	r2, [pc, #328]	; (8003048 <HAL_GPIO_Init+0x344>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0x226>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a51      	ldr	r2, [pc, #324]	; (800304c <HAL_GPIO_Init+0x348>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_Init+0x222>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a50      	ldr	r2, [pc, #320]	; (8003050 <HAL_GPIO_Init+0x34c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_Init+0x21e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4f      	ldr	r2, [pc, #316]	; (8003054 <HAL_GPIO_Init+0x350>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_Init+0x21a>
 8002f1a:	2309      	movs	r3, #9
 8002f1c:	e012      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f1e:	230a      	movs	r3, #10
 8002f20:	e010      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f22:	2308      	movs	r3, #8
 8002f24:	e00e      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f26:	2307      	movs	r3, #7
 8002f28:	e00c      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	e00a      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f2e:	2305      	movs	r3, #5
 8002f30:	e008      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e006      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e004      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e002      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f42:	2300      	movs	r3, #0
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	f002 0203 	and.w	r2, r2, #3
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	4093      	lsls	r3, r2
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f54:	4935      	ldr	r1, [pc, #212]	; (800302c <HAL_GPIO_Init+0x328>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f86:	4a34      	ldr	r2, [pc, #208]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f8c:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb0:	4a29      	ldr	r2, [pc, #164]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fb6:	4b28      	ldr	r3, [pc, #160]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fda:	4a1f      	ldr	r2, [pc, #124]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <HAL_GPIO_Init+0x354>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3301      	adds	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b0f      	cmp	r3, #15
 8003014:	f67f ae86 	bls.w	8002d24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3724      	adds	r7, #36	; 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	40013800 	.word	0x40013800
 8003030:	40020000 	.word	0x40020000
 8003034:	40020400 	.word	0x40020400
 8003038:	40020800 	.word	0x40020800
 800303c:	40020c00 	.word	0x40020c00
 8003040:	40021000 	.word	0x40021000
 8003044:	40021400 	.word	0x40021400
 8003048:	40021800 	.word	0x40021800
 800304c:	40021c00 	.word	0x40021c00
 8003050:	40022000 	.word	0x40022000
 8003054:	40022400 	.word	0x40022400
 8003058:	40013c00 	.word	0x40013c00

0800305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003078:	e003      	b.n	8003082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	041a      	lsls	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af02      	add	r7, sp, #8
 8003094:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e108      	b.n	80032b2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe f994 	bl	80013e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2203      	movs	r2, #3
 80030c4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ce:	d102      	bne.n	80030d6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 fe8c 	bl	8006df8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	7c1a      	ldrb	r2, [r3, #16]
 80030e8:	f88d 2000 	strb.w	r2, [sp]
 80030ec:	3304      	adds	r3, #4
 80030ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f0:	f003 fe28 	bl	8006d44 <USB_CoreInit>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0d5      	b.n	80032b2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2100      	movs	r1, #0
 800310c:	4618      	mov	r0, r3
 800310e:	f003 fe84 	bl	8006e1a <USB_SetCurrentMode>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0c6      	b.n	80032b2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	e04a      	b.n	80031c0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3315      	adds	r3, #21
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	3314      	adds	r3, #20
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	b298      	uxth	r0, r3
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	332e      	adds	r3, #46	; 0x2e
 8003166:	4602      	mov	r2, r0
 8003168:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800316a:	7bfa      	ldrb	r2, [r7, #15]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3318      	adds	r3, #24
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	331c      	adds	r3, #28
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	3320      	adds	r3, #32
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3324      	adds	r3, #36	; 0x24
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	3301      	adds	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	791b      	ldrb	r3, [r3, #4]
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d3af      	bcc.n	800312a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	e044      	b.n	800325a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	f203 2355 	addw	r3, r3, #597	; 0x255
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	3301      	adds	r3, #1
 8003258:	73fb      	strb	r3, [r7, #15]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	791b      	ldrb	r3, [r3, #4]
 800325e:	7bfa      	ldrb	r2, [r7, #15]
 8003260:	429a      	cmp	r2, r3
 8003262:	d3b5      	bcc.n	80031d0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	7c1a      	ldrb	r2, [r3, #16]
 800326c:	f88d 2000 	strb.w	r2, [sp]
 8003270:	3304      	adds	r3, #4
 8003272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003274:	f003 fe1e 	bl	8006eb4 <USB_DevInit>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e013      	b.n	80032b2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7b1b      	ldrb	r3, [r3, #12]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d102      	bne.n	80032a6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f80b 	bl	80032bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f003 ffd9 	bl	8007262 <USB_DevDisconnect>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_PCDEx_ActivateLPM+0x44>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	10000003 	.word	0x10000003

08003304 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a04      	ldr	r2, [pc, #16]	; (8003320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800330e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40007000 	.word	0x40007000

08003324 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	4b23      	ldr	r3, [pc, #140]	; (80033bc <HAL_PWREx_EnableOverDrive+0x98>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a22      	ldr	r2, [pc, #136]	; (80033bc <HAL_PWREx_EnableOverDrive+0x98>)
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_PWREx_EnableOverDrive+0x98>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003346:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003352:	f7fe f997 	bl	8001684 <HAL_GetTick>
 8003356:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003358:	e009      	b.n	800336e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800335a:	f7fe f993 	bl	8001684 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003368:	d901      	bls.n	800336e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e022      	b.n	80033b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337a:	d1ee      	bne.n	800335a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a0f      	ldr	r2, [pc, #60]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003386:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003388:	f7fe f97c 	bl	8001684 <HAL_GetTick>
 800338c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800338e:	e009      	b.n	80033a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003390:	f7fe f978 	bl	8001684 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800339e:	d901      	bls.n	80033a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e007      	b.n	80033b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033b0:	d1ee      	bne.n	8003390 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40007000 	.word	0x40007000

080033c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033cc:	2300      	movs	r3, #0
 80033ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e29b      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8087 	beq.w	80034f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033e8:	4b96      	ldr	r3, [pc, #600]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d00c      	beq.n	800340e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f4:	4b93      	ldr	r3, [pc, #588]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d112      	bne.n	8003426 <HAL_RCC_OscConfig+0x62>
 8003400:	4b90      	ldr	r3, [pc, #576]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340c:	d10b      	bne.n	8003426 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340e:	4b8d      	ldr	r3, [pc, #564]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d06c      	beq.n	80034f4 <HAL_RCC_OscConfig+0x130>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d168      	bne.n	80034f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e275      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x7a>
 8003430:	4b84      	ldr	r3, [pc, #528]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a83      	ldr	r2, [pc, #524]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	e02e      	b.n	800349c <HAL_RCC_OscConfig+0xd8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0x9c>
 8003446:	4b7f      	ldr	r3, [pc, #508]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a7e      	ldr	r2, [pc, #504]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800344c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	4b7c      	ldr	r3, [pc, #496]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7b      	ldr	r2, [pc, #492]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e01d      	b.n	800349c <HAL_RCC_OscConfig+0xd8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0xc0>
 800346a:	4b76      	ldr	r3, [pc, #472]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a75      	ldr	r2, [pc, #468]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b73      	ldr	r3, [pc, #460]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a72      	ldr	r2, [pc, #456]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0xd8>
 8003484:	4b6f      	ldr	r3, [pc, #444]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a6e      	ldr	r2, [pc, #440]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800348a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	4b6c      	ldr	r3, [pc, #432]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6b      	ldr	r2, [pc, #428]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d013      	beq.n	80034cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe f8ee 	bl	8001684 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fe f8ea 	bl	8001684 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e229      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	4b61      	ldr	r3, [pc, #388]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0xe8>
 80034ca:	e014      	b.n	80034f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fe f8da 	bl	8001684 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fe f8d6 	bl	8001684 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e215      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	4b57      	ldr	r3, [pc, #348]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x110>
 80034f2:	e000      	b.n	80034f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d069      	beq.n	80035d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003502:	4b50      	ldr	r3, [pc, #320]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350e:	4b4d      	ldr	r3, [pc, #308]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b08      	cmp	r3, #8
 8003518:	d11c      	bne.n	8003554 <HAL_RCC_OscConfig+0x190>
 800351a:	4b4a      	ldr	r3, [pc, #296]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d116      	bne.n	8003554 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003526:	4b47      	ldr	r3, [pc, #284]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_RCC_OscConfig+0x17a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e1e9      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353e:	4b41      	ldr	r3, [pc, #260]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	493d      	ldr	r1, [pc, #244]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003552:	e040      	b.n	80035d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800355c:	4b39      	ldr	r3, [pc, #228]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a38      	ldr	r2, [pc, #224]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fe f88c 	bl	8001684 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003570:	f7fe f888 	bl	8001684 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1c7      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003582:	4b30      	ldr	r3, [pc, #192]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358e:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4929      	ldr	r1, [pc, #164]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
 80035a2:	e018      	b.n	80035d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a4:	4b27      	ldr	r3, [pc, #156]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a26      	ldr	r2, [pc, #152]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fe f868 	bl	8001684 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b8:	f7fe f864 	bl	8001684 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1a3      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d038      	beq.n	8003654 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d019      	beq.n	800361e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	4b16      	ldr	r3, [pc, #88]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80035ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ee:	4a15      	ldr	r2, [pc, #84]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7fe f845 	bl	8001684 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fe:	f7fe f841 	bl	8001684 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e180      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x23a>
 800361c:	e01a      	b.n	8003654 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <HAL_RCC_OscConfig+0x280>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362a:	f7fe f82b 	bl	8001684 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	e00a      	b.n	8003648 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003632:	f7fe f827 	bl	8001684 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d903      	bls.n	8003648 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e166      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
 8003644:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003648:	4b92      	ldr	r3, [pc, #584]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800364a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ee      	bne.n	8003632 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80a4 	beq.w	80037aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003662:	4b8c      	ldr	r3, [pc, #560]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10d      	bne.n	800368a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800366e:	4b89      	ldr	r3, [pc, #548]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a88      	ldr	r2, [pc, #544]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b86      	ldr	r3, [pc, #536]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800368a:	4b83      	ldr	r3, [pc, #524]	; (8003898 <HAL_RCC_OscConfig+0x4d4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003696:	4b80      	ldr	r3, [pc, #512]	; (8003898 <HAL_RCC_OscConfig+0x4d4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7f      	ldr	r2, [pc, #508]	; (8003898 <HAL_RCC_OscConfig+0x4d4>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fd ffef 	bl	8001684 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fd ffeb 	bl	8001684 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b64      	cmp	r3, #100	; 0x64
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e12a      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036bc:	4b76      	ldr	r3, [pc, #472]	; (8003898 <HAL_RCC_OscConfig+0x4d4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x31a>
 80036d0:	4b70      	ldr	r3, [pc, #448]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a6f      	ldr	r2, [pc, #444]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	e02d      	b.n	800373a <HAL_RCC_OscConfig+0x376>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x33c>
 80036e6:	4b6b      	ldr	r3, [pc, #428]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4a6a      	ldr	r2, [pc, #424]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70
 80036f2:	4b68      	ldr	r3, [pc, #416]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	4a67      	ldr	r2, [pc, #412]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80036f8:	f023 0304 	bic.w	r3, r3, #4
 80036fc:	6713      	str	r3, [r2, #112]	; 0x70
 80036fe:	e01c      	b.n	800373a <HAL_RCC_OscConfig+0x376>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b05      	cmp	r3, #5
 8003706:	d10c      	bne.n	8003722 <HAL_RCC_OscConfig+0x35e>
 8003708:	4b62      	ldr	r3, [pc, #392]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	4a61      	ldr	r2, [pc, #388]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	6713      	str	r3, [r2, #112]	; 0x70
 8003714:	4b5f      	ldr	r3, [pc, #380]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003718:	4a5e      	ldr	r2, [pc, #376]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6713      	str	r3, [r2, #112]	; 0x70
 8003720:	e00b      	b.n	800373a <HAL_RCC_OscConfig+0x376>
 8003722:	4b5c      	ldr	r3, [pc, #368]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4a5b      	ldr	r2, [pc, #364]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
 800372e:	4b59      	ldr	r3, [pc, #356]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	4a58      	ldr	r2, [pc, #352]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003734:	f023 0304 	bic.w	r3, r3, #4
 8003738:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d015      	beq.n	800376e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fd ff9f 	bl	8001684 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fd ff9b 	bl	8001684 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	; 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e0d8      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003760:	4b4c      	ldr	r3, [pc, #304]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ee      	beq.n	800374a <HAL_RCC_OscConfig+0x386>
 800376c:	e014      	b.n	8003798 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376e:	f7fd ff89 	bl	8001684 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003774:	e00a      	b.n	800378c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003776:	f7fd ff85 	bl	8001684 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f241 3288 	movw	r2, #5000	; 0x1388
 8003784:	4293      	cmp	r3, r2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e0c2      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378c:	4b41      	ldr	r3, [pc, #260]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ee      	bne.n	8003776 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d105      	bne.n	80037aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379e:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a3c      	ldr	r2, [pc, #240]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80037a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80ae 	beq.w	8003910 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b4:	4b37      	ldr	r3, [pc, #220]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d06d      	beq.n	800389c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d14b      	bne.n	8003860 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c8:	4b32      	ldr	r3, [pc, #200]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a31      	ldr	r2, [pc, #196]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80037ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fd ff56 	bl	8001684 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fd ff52 	bl	8001684 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e091      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	3b01      	subs	r3, #1
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	071b      	lsls	r3, r3, #28
 8003826:	491b      	ldr	r1, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800382c:	4b19      	ldr	r3, [pc, #100]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a18      	ldr	r2, [pc, #96]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fd ff24 	bl	8001684 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003840:	f7fd ff20 	bl	8001684 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e05f      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x47c>
 800385e:	e057      	b.n	8003910 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a0b      	ldr	r2, [pc, #44]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fd ff0a 	bl	8001684 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003874:	f7fd ff06 	bl	8001684 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e045      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCC_OscConfig+0x4d0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x4b0>
 8003892:	e03d      	b.n	8003910 <HAL_RCC_OscConfig+0x54c>
 8003894:	40023800 	.word	0x40023800
 8003898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800389c:	4b1f      	ldr	r3, [pc, #124]	; (800391c <HAL_RCC_OscConfig+0x558>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d030      	beq.n	800390c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d129      	bne.n	800390c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d122      	bne.n	800390c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038cc:	4013      	ands	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d119      	bne.n	800390c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	3b01      	subs	r3, #1
 80038e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d10f      	bne.n	800390c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d107      	bne.n	800390c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800

08003920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0d0      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003938:	4b6a      	ldr	r3, [pc, #424]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d910      	bls.n	8003968 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b67      	ldr	r3, [pc, #412]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 020f 	bic.w	r2, r3, #15
 800394e:	4965      	ldr	r1, [pc, #404]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b63      	ldr	r3, [pc, #396]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0b8      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d020      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003980:	4b59      	ldr	r3, [pc, #356]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a58      	ldr	r2, [pc, #352]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003986:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800398a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003998:	4b53      	ldr	r3, [pc, #332]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4a52      	ldr	r2, [pc, #328]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 800399e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a4:	4b50      	ldr	r3, [pc, #320]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	494d      	ldr	r1, [pc, #308]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d040      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d115      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e07f      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e2:	4b41      	ldr	r3, [pc, #260]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e073      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f2:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e06b      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a02:	4b39      	ldr	r3, [pc, #228]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 0203 	bic.w	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4936      	ldr	r1, [pc, #216]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a14:	f7fd fe36 	bl	8001684 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1c:	f7fd fe32 	bl	8001684 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e053      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	4b2d      	ldr	r3, [pc, #180]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 020c 	and.w	r2, r3, #12
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d1eb      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a44:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d210      	bcs.n	8003a74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 020f 	bic.w	r2, r3, #15
 8003a5a:	4922      	ldr	r1, [pc, #136]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e032      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a80:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4916      	ldr	r1, [pc, #88]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a9e:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	490e      	ldr	r1, [pc, #56]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ab2:	f000 f821 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	490a      	ldr	r1, [pc, #40]	; (8003aec <HAL_RCC_ClockConfig+0x1cc>)
 8003ac4:	5ccb      	ldrb	r3, [r1, r3]
 8003ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aca:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <HAL_RCC_ClockConfig+0x1d0>)
 8003acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_RCC_ClockConfig+0x1d4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd fd92 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023c00 	.word	0x40023c00
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	080073b4 	.word	0x080073b4
 8003af0:	2000004c 	.word	0x2000004c
 8003af4:	20000050 	.word	0x20000050

08003af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003afc:	b094      	sub	sp, #80	; 0x50
 8003afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	647b      	str	r3, [r7, #68]	; 0x44
 8003b04:	2300      	movs	r3, #0
 8003b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b08:	2300      	movs	r3, #0
 8003b0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b10:	4b79      	ldr	r3, [pc, #484]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d00d      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x40>
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	f200 80e1 	bhi.w	8003ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x34>
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d003      	beq.n	8003b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b2a:	e0db      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b2c:	4b73      	ldr	r3, [pc, #460]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8003b2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b30:	e0db      	b.n	8003cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b32:	4b73      	ldr	r3, [pc, #460]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b36:	e0d8      	b.n	8003cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b38:	4b6f      	ldr	r3, [pc, #444]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b40:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b42:	4b6d      	ldr	r3, [pc, #436]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d063      	beq.n	8003c16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4e:	4b6a      	ldr	r3, [pc, #424]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	099b      	lsrs	r3, r3, #6
 8003b54:	2200      	movs	r2, #0
 8003b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
 8003b62:	2300      	movs	r3, #0
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
 8003b66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	462b      	mov	r3, r5
 8003b6e:	f04f 0000 	mov.w	r0, #0
 8003b72:	f04f 0100 	mov.w	r1, #0
 8003b76:	0159      	lsls	r1, r3, #5
 8003b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7c:	0150      	lsls	r0, r2, #5
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4621      	mov	r1, r4
 8003b84:	1a51      	subs	r1, r2, r1
 8003b86:	6139      	str	r1, [r7, #16]
 8003b88:	4629      	mov	r1, r5
 8003b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b9c:	4659      	mov	r1, fp
 8003b9e:	018b      	lsls	r3, r1, #6
 8003ba0:	4651      	mov	r1, sl
 8003ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ba6:	4651      	mov	r1, sl
 8003ba8:	018a      	lsls	r2, r1, #6
 8003baa:	4651      	mov	r1, sl
 8003bac:	ebb2 0801 	subs.w	r8, r2, r1
 8003bb0:	4659      	mov	r1, fp
 8003bb2:	eb63 0901 	sbc.w	r9, r3, r1
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bca:	4690      	mov	r8, r2
 8003bcc:	4699      	mov	r9, r3
 8003bce:	4623      	mov	r3, r4
 8003bd0:	eb18 0303 	adds.w	r3, r8, r3
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	462b      	mov	r3, r5
 8003bd8:	eb49 0303 	adc.w	r3, r9, r3
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bea:	4629      	mov	r1, r5
 8003bec:	024b      	lsls	r3, r1, #9
 8003bee:	4621      	mov	r1, r4
 8003bf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	024a      	lsls	r2, r1, #9
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfe:	2200      	movs	r2, #0
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c08:	f7fc fb16 	bl	8000238 <__aeabi_uldivmod>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4613      	mov	r3, r2
 8003c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c14:	e058      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c16:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	099b      	lsrs	r3, r3, #6
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	4611      	mov	r1, r2
 8003c22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c26:	623b      	str	r3, [r7, #32]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c30:	4642      	mov	r2, r8
 8003c32:	464b      	mov	r3, r9
 8003c34:	f04f 0000 	mov.w	r0, #0
 8003c38:	f04f 0100 	mov.w	r1, #0
 8003c3c:	0159      	lsls	r1, r3, #5
 8003c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c42:	0150      	lsls	r0, r2, #5
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4641      	mov	r1, r8
 8003c4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c4e:	4649      	mov	r1, r9
 8003c50:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c68:	ebb2 040a 	subs.w	r4, r2, sl
 8003c6c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	00eb      	lsls	r3, r5, #3
 8003c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c7e:	00e2      	lsls	r2, r4, #3
 8003c80:	4614      	mov	r4, r2
 8003c82:	461d      	mov	r5, r3
 8003c84:	4643      	mov	r3, r8
 8003c86:	18e3      	adds	r3, r4, r3
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	eb45 0303 	adc.w	r3, r5, r3
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	028b      	lsls	r3, r1, #10
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca8:	4621      	mov	r1, r4
 8003caa:	028a      	lsls	r2, r1, #10
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	61fa      	str	r2, [r7, #28]
 8003cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cbc:	f7fc fabc 	bl	8000238 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003cd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ce2:	e002      	b.n	8003cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ce6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3750      	adds	r7, #80	; 0x50
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	00f42400 	.word	0x00f42400
 8003d00:	007a1200 	.word	0x007a1200

08003d04 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	2000004c 	.word	0x2000004c

08003d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d20:	f7ff fff0 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	0a9b      	lsrs	r3, r3, #10
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4903      	ldr	r1, [pc, #12]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	080073c4 	.word	0x080073c4

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d48:	f7ff ffdc 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	0b5b      	lsrs	r3, r3, #13
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4903      	ldr	r1, [pc, #12]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40023800 	.word	0x40023800
 8003d68:	080073c4 	.word	0x080073c4

08003d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d012      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d94:	4b69      	ldr	r3, [pc, #420]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4a68      	ldr	r2, [pc, #416]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d9e:	6093      	str	r3, [r2, #8]
 8003da0:	4b66      	ldr	r3, [pc, #408]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	4964      	ldr	r1, [pc, #400]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003db6:	2301      	movs	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d017      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc6:	4b5d      	ldr	r3, [pc, #372]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	4959      	ldr	r1, [pc, #356]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de4:	d101      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003de6:	2301      	movs	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003df2:	2301      	movs	r3, #1
 8003df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d017      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e02:	4b4e      	ldr	r3, [pc, #312]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	494a      	ldr	r1, [pc, #296]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e20:	d101      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 808b 	beq.w	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e50:	4b3a      	ldr	r3, [pc, #232]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	4a39      	ldr	r2, [pc, #228]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5c:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e68:	4b35      	ldr	r3, [pc, #212]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a34      	ldr	r2, [pc, #208]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e74:	f7fd fc06 	bl	8001684 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7c:	f7fd fc02 	bl	8001684 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e38f      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e9a:	4b28      	ldr	r3, [pc, #160]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d035      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d02e      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb8:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ec2:	4b1e      	ldr	r3, [pc, #120]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ece:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003eda:	4a18      	ldr	r2, [pc, #96]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ee0:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d114      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fd fbca 	bl	8001684 <HAL_GetTick>
 8003ef0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f7fd fbc6 	bl	8001684 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e351      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0a:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0ee      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f22:	d111      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f32:	400b      	ands	r3, r1
 8003f34:	4901      	ldr	r1, [pc, #4]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40007000 	.word	0x40007000
 8003f44:	0ffffcff 	.word	0x0ffffcff
 8003f48:	4bac      	ldr	r3, [pc, #688]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4aab      	ldr	r2, [pc, #684]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f52:	6093      	str	r3, [r2, #8]
 8003f54:	4ba9      	ldr	r3, [pc, #676]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f60:	49a6      	ldr	r1, [pc, #664]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d010      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f72:	4ba2      	ldr	r3, [pc, #648]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f78:	4aa0      	ldr	r2, [pc, #640]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f82:	4b9e      	ldr	r3, [pc, #632]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	499b      	ldr	r1, [pc, #620]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fa0:	4b96      	ldr	r3, [pc, #600]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fae:	4993      	ldr	r1, [pc, #588]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fc2:	4b8e      	ldr	r3, [pc, #568]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd0:	498a      	ldr	r1, [pc, #552]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fe4:	4b85      	ldr	r3, [pc, #532]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff2:	4982      	ldr	r1, [pc, #520]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004006:	4b7d      	ldr	r3, [pc, #500]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4979      	ldr	r1, [pc, #484]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004028:	4b74      	ldr	r3, [pc, #464]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f023 0203 	bic.w	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	4971      	ldr	r1, [pc, #452]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800404a:	4b6c      	ldr	r3, [pc, #432]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f023 020c 	bic.w	r2, r3, #12
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004058:	4968      	ldr	r1, [pc, #416]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800406c:	4b63      	ldr	r3, [pc, #396]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	4960      	ldr	r1, [pc, #384]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800408e:	4b5b      	ldr	r3, [pc, #364]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409c:	4957      	ldr	r1, [pc, #348]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040b0:	4b52      	ldr	r3, [pc, #328]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	494f      	ldr	r1, [pc, #316]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040d2:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e0:	4946      	ldr	r1, [pc, #280]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040f4:	4b41      	ldr	r3, [pc, #260]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004102:	493e      	ldr	r1, [pc, #248]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004116:	4b39      	ldr	r3, [pc, #228]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004124:	4935      	ldr	r1, [pc, #212]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004146:	492d      	ldr	r1, [pc, #180]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d011      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800415a:	4b28      	ldr	r3, [pc, #160]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004168:	4924      	ldr	r1, [pc, #144]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004178:	d101      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800417a:	2301      	movs	r3, #1
 800417c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800419a:	4b18      	ldr	r3, [pc, #96]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a8:	4914      	ldr	r1, [pc, #80]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00b      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041cc:	490b      	ldr	r1, [pc, #44]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00f      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f0:	4902      	ldr	r1, [pc, #8]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041f8:	e002      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00b      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800420c:	4b8a      	ldr	r3, [pc, #552]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004212:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	4986      	ldr	r1, [pc, #536]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00b      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004230:	4b81      	ldr	r3, [pc, #516]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004236:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004240:	497d      	ldr	r1, [pc, #500]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d006      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 80d6 	beq.w	8004408 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800425c:	4b76      	ldr	r3, [pc, #472]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a75      	ldr	r2, [pc, #468]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004262:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004268:	f7fd fa0c 	bl	8001684 <HAL_GetTick>
 800426c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004270:	f7fd fa08 	bl	8001684 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e195      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004282:	4b6d      	ldr	r3, [pc, #436]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d021      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x572>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d11d      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042a2:	4b65      	ldr	r3, [pc, #404]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042b0:	4b61      	ldr	r3, [pc, #388]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b6:	0e1b      	lsrs	r3, r3, #24
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	019a      	lsls	r2, r3, #6
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	061b      	lsls	r3, r3, #24
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	071b      	lsls	r3, r3, #28
 80042d6:	4958      	ldr	r1, [pc, #352]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042f2:	d00a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d02e      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004308:	d129      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800430a:	4b4b      	ldr	r3, [pc, #300]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004318:	4b47      	ldr	r3, [pc, #284]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800431e:	0f1b      	lsrs	r3, r3, #28
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	019a      	lsls	r2, r3, #6
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	041b      	lsls	r3, r3, #16
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	061b      	lsls	r3, r3, #24
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	071b      	lsls	r3, r3, #28
 800433e:	493e      	ldr	r1, [pc, #248]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004346:	4b3c      	ldr	r3, [pc, #240]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434c:	f023 021f 	bic.w	r2, r3, #31
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	3b01      	subs	r3, #1
 8004356:	4938      	ldr	r1, [pc, #224]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01d      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800436a:	4b33      	ldr	r3, [pc, #204]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004370:	0e1b      	lsrs	r3, r3, #24
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004378:	4b2f      	ldr	r3, [pc, #188]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800437a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437e:	0f1b      	lsrs	r3, r3, #28
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	019a      	lsls	r2, r3, #6
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	431a      	orrs	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	061b      	lsls	r3, r3, #24
 8004398:	431a      	orrs	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	071b      	lsls	r3, r3, #28
 800439e:	4926      	ldr	r1, [pc, #152]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d011      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	019a      	lsls	r2, r3, #6
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	061b      	lsls	r3, r3, #24
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	071b      	lsls	r3, r3, #28
 80043ce:	491a      	ldr	r1, [pc, #104]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043d6:	4b18      	ldr	r3, [pc, #96]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a17      	ldr	r2, [pc, #92]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e2:	f7fd f94f 	bl	8001684 <HAL_GetTick>
 80043e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043e8:	e008      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043ea:	f7fd f94b 	bl	8001684 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b64      	cmp	r3, #100	; 0x64
 80043f6:	d901      	bls.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0d8      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043fc:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b01      	cmp	r3, #1
 800440c:	f040 80ce 	bne.w	80045ac <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a08      	ldr	r2, [pc, #32]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800441c:	f7fd f932 	bl	8001684 <HAL_GetTick>
 8004420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004422:	e00b      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004424:	f7fd f92e 	bl	8001684 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	d904      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0bb      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800443c:	4b5e      	ldr	r3, [pc, #376]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004448:	d0ec      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004466:	2b00      	cmp	r3, #0
 8004468:	d02e      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d12a      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004472:	4b51      	ldr	r3, [pc, #324]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004480:	4b4d      	ldr	r3, [pc, #308]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	0f1b      	lsrs	r3, r3, #28
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	019a      	lsls	r2, r3, #6
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	061b      	lsls	r3, r3, #24
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	071b      	lsls	r3, r3, #28
 80044a6:	4944      	ldr	r1, [pc, #272]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044ae:	4b42      	ldr	r3, [pc, #264]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	3b01      	subs	r3, #1
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	493d      	ldr	r1, [pc, #244]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d022      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044dc:	d11d      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044de:	4b36      	ldr	r3, [pc, #216]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e4:	0e1b      	lsrs	r3, r3, #24
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044ec:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	0f1b      	lsrs	r3, r3, #28
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	019a      	lsls	r2, r3, #6
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	041b      	lsls	r3, r3, #16
 8004506:	431a      	orrs	r2, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	061b      	lsls	r3, r3, #24
 800450c:	431a      	orrs	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	071b      	lsls	r3, r3, #28
 8004512:	4929      	ldr	r1, [pc, #164]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d028      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004526:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452c:	0e1b      	lsrs	r3, r3, #24
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004534:	4b20      	ldr	r3, [pc, #128]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	0c1b      	lsrs	r3, r3, #16
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	019a      	lsls	r2, r3, #6
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	431a      	orrs	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	071b      	lsls	r3, r3, #28
 800455a:	4917      	ldr	r1, [pc, #92]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	4911      	ldr	r1, [pc, #68]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004584:	f7fd f87e 	bl	8001684 <HAL_GetTick>
 8004588:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800458a:	e008      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800458c:	f7fd f87a 	bl	8001684 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e007      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045aa:	d1ef      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800

080045bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e049      	b.n	8004662 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fc fda4 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f000 fbee 	bl	8004ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e049      	b.n	8004710 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f841 	bl	8004718 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2202      	movs	r2, #2
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3304      	adds	r3, #4
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f000 fb97 	bl	8004ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d109      	bne.n	8004750 <HAL_TIM_PWM_Start+0x24>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e03c      	b.n	80047ca <HAL_TIM_PWM_Start+0x9e>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b04      	cmp	r3, #4
 8004754:	d109      	bne.n	800476a <HAL_TIM_PWM_Start+0x3e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	bf14      	ite	ne
 8004762:	2301      	movne	r3, #1
 8004764:	2300      	moveq	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	e02f      	b.n	80047ca <HAL_TIM_PWM_Start+0x9e>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b08      	cmp	r3, #8
 800476e:	d109      	bne.n	8004784 <HAL_TIM_PWM_Start+0x58>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	bf14      	ite	ne
 800477c:	2301      	movne	r3, #1
 800477e:	2300      	moveq	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	e022      	b.n	80047ca <HAL_TIM_PWM_Start+0x9e>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d109      	bne.n	800479e <HAL_TIM_PWM_Start+0x72>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	bf14      	ite	ne
 8004796:	2301      	movne	r3, #1
 8004798:	2300      	moveq	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	e015      	b.n	80047ca <HAL_TIM_PWM_Start+0x9e>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d109      	bne.n	80047b8 <HAL_TIM_PWM_Start+0x8c>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e008      	b.n	80047ca <HAL_TIM_PWM_Start+0x9e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e092      	b.n	80048f8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_PWM_Start+0xb6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e0:	e023      	b.n	800482a <HAL_TIM_PWM_Start+0xfe>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_PWM_Start+0xc6>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f0:	e01b      	b.n	800482a <HAL_TIM_PWM_Start+0xfe>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_PWM_Start+0xd6>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004800:	e013      	b.n	800482a <HAL_TIM_PWM_Start+0xfe>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b0c      	cmp	r3, #12
 8004806:	d104      	bne.n	8004812 <HAL_TIM_PWM_Start+0xe6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004810:	e00b      	b.n	800482a <HAL_TIM_PWM_Start+0xfe>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b10      	cmp	r3, #16
 8004816:	d104      	bne.n	8004822 <HAL_TIM_PWM_Start+0xf6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004820:	e003      	b.n	800482a <HAL_TIM_PWM_Start+0xfe>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2201      	movs	r2, #1
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fe76 	bl	8005524 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a30      	ldr	r2, [pc, #192]	; (8004900 <HAL_TIM_PWM_Start+0x1d4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_TIM_PWM_Start+0x120>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2f      	ldr	r2, [pc, #188]	; (8004904 <HAL_TIM_PWM_Start+0x1d8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d101      	bne.n	8004850 <HAL_TIM_PWM_Start+0x124>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_TIM_PWM_Start+0x126>
 8004850:	2300      	movs	r3, #0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004864:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a25      	ldr	r2, [pc, #148]	; (8004900 <HAL_TIM_PWM_Start+0x1d4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d022      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x18a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d01d      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x18a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a22      	ldr	r2, [pc, #136]	; (8004908 <HAL_TIM_PWM_Start+0x1dc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d018      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x18a>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a20      	ldr	r2, [pc, #128]	; (800490c <HAL_TIM_PWM_Start+0x1e0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x18a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <HAL_TIM_PWM_Start+0x1e4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00e      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x18a>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a19      	ldr	r2, [pc, #100]	; (8004904 <HAL_TIM_PWM_Start+0x1d8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d009      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x18a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1b      	ldr	r2, [pc, #108]	; (8004914 <HAL_TIM_PWM_Start+0x1e8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x18a>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a19      	ldr	r2, [pc, #100]	; (8004918 <HAL_TIM_PWM_Start+0x1ec>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d115      	bne.n	80048e2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	4b17      	ldr	r3, [pc, #92]	; (800491c <HAL_TIM_PWM_Start+0x1f0>)
 80048be:	4013      	ands	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b06      	cmp	r3, #6
 80048c6:	d015      	beq.n	80048f4 <HAL_TIM_PWM_Start+0x1c8>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ce:	d011      	beq.n	80048f4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e0:	e008      	b.n	80048f4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e000      	b.n	80048f6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40010000 	.word	0x40010000
 8004904:	40010400 	.word	0x40010400
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40014000 	.word	0x40014000
 8004918:	40001800 	.word	0x40001800
 800491c:	00010007 	.word	0x00010007

08004920 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2200      	movs	r2, #0
 8004930:	6839      	ldr	r1, [r7, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fdf6 	bl	8005524 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a36      	ldr	r2, [pc, #216]	; (8004a18 <HAL_TIM_PWM_Stop+0xf8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <HAL_TIM_PWM_Stop+0x2c>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a35      	ldr	r2, [pc, #212]	; (8004a1c <HAL_TIM_PWM_Stop+0xfc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d101      	bne.n	8004950 <HAL_TIM_PWM_Stop+0x30>
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <HAL_TIM_PWM_Stop+0x32>
 8004950:	2300      	movs	r3, #0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d017      	beq.n	8004986 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6a1a      	ldr	r2, [r3, #32]
 800495c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004960:	4013      	ands	r3, r2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10f      	bne.n	8004986 <HAL_TIM_PWM_Stop+0x66>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6a1a      	ldr	r2, [r3, #32]
 800496c:	f240 4344 	movw	r3, #1092	; 0x444
 8004970:	4013      	ands	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d107      	bne.n	8004986 <HAL_TIM_PWM_Stop+0x66>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004984:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6a1a      	ldr	r2, [r3, #32]
 800498c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004990:	4013      	ands	r3, r2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10f      	bne.n	80049b6 <HAL_TIM_PWM_Stop+0x96>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6a1a      	ldr	r2, [r3, #32]
 800499c:	f240 4344 	movw	r3, #1092	; 0x444
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d107      	bne.n	80049b6 <HAL_TIM_PWM_Stop+0x96>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0201 	bic.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_PWM_Stop+0xa6>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c4:	e023      	b.n	8004a0e <HAL_TIM_PWM_Stop+0xee>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Stop+0xb6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d4:	e01b      	b.n	8004a0e <HAL_TIM_PWM_Stop+0xee>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_PWM_Stop+0xc6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e4:	e013      	b.n	8004a0e <HAL_TIM_PWM_Stop+0xee>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_PWM_Stop+0xd6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049f4:	e00b      	b.n	8004a0e <HAL_TIM_PWM_Stop+0xee>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_PWM_Stop+0xe6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a04:	e003      	b.n	8004a0e <HAL_TIM_PWM_Stop+0xee>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40010400 	.word	0x40010400

08004a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e0ff      	b.n	8004c3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b14      	cmp	r3, #20
 8004a4a:	f200 80f0 	bhi.w	8004c2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004aa9 	.word	0x08004aa9
 8004a58:	08004c2f 	.word	0x08004c2f
 8004a5c:	08004c2f 	.word	0x08004c2f
 8004a60:	08004c2f 	.word	0x08004c2f
 8004a64:	08004ae9 	.word	0x08004ae9
 8004a68:	08004c2f 	.word	0x08004c2f
 8004a6c:	08004c2f 	.word	0x08004c2f
 8004a70:	08004c2f 	.word	0x08004c2f
 8004a74:	08004b2b 	.word	0x08004b2b
 8004a78:	08004c2f 	.word	0x08004c2f
 8004a7c:	08004c2f 	.word	0x08004c2f
 8004a80:	08004c2f 	.word	0x08004c2f
 8004a84:	08004b6b 	.word	0x08004b6b
 8004a88:	08004c2f 	.word	0x08004c2f
 8004a8c:	08004c2f 	.word	0x08004c2f
 8004a90:	08004c2f 	.word	0x08004c2f
 8004a94:	08004bad 	.word	0x08004bad
 8004a98:	08004c2f 	.word	0x08004c2f
 8004a9c:	08004c2f 	.word	0x08004c2f
 8004aa0:	08004c2f 	.word	0x08004c2f
 8004aa4:	08004bed 	.word	0x08004bed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fa40 	bl	8004f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0208 	orr.w	r2, r2, #8
 8004ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0204 	bic.w	r2, r2, #4
 8004ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6999      	ldr	r1, [r3, #24]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	619a      	str	r2, [r3, #24]
      break;
 8004ae6:	e0a5      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fa92 	bl	8005018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6999      	ldr	r1, [r3, #24]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	021a      	lsls	r2, r3, #8
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	619a      	str	r2, [r3, #24]
      break;
 8004b28:	e084      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fae9 	bl	8005108 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0208 	orr.w	r2, r2, #8
 8004b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0204 	bic.w	r2, r2, #4
 8004b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69d9      	ldr	r1, [r3, #28]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	61da      	str	r2, [r3, #28]
      break;
 8004b68:	e064      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fb3f 	bl	80051f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69d9      	ldr	r1, [r3, #28]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	021a      	lsls	r2, r3, #8
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	61da      	str	r2, [r3, #28]
      break;
 8004baa:	e043      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fb76 	bl	80052a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0208 	orr.w	r2, r2, #8
 8004bc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0204 	bic.w	r2, r2, #4
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bea:	e023      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fba8 	bl	8005348 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	021a      	lsls	r2, r3, #8
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c2c:	e002      	b.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	75fb      	strb	r3, [r7, #23]
      break;
 8004c32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop

08004c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_TIM_ConfigClockSource+0x1c>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e0b4      	b.n	8004dce <HAL_TIM_ConfigClockSource+0x186>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	4b56      	ldr	r3, [pc, #344]	; (8004dd8 <HAL_TIM_ConfigClockSource+0x190>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9c:	d03e      	beq.n	8004d1c <HAL_TIM_ConfigClockSource+0xd4>
 8004c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca2:	f200 8087 	bhi.w	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004caa:	f000 8086 	beq.w	8004dba <HAL_TIM_ConfigClockSource+0x172>
 8004cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb2:	d87f      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b70      	cmp	r3, #112	; 0x70
 8004cb6:	d01a      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0xa6>
 8004cb8:	2b70      	cmp	r3, #112	; 0x70
 8004cba:	d87b      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b60      	cmp	r3, #96	; 0x60
 8004cbe:	d050      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x11a>
 8004cc0:	2b60      	cmp	r3, #96	; 0x60
 8004cc2:	d877      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b50      	cmp	r3, #80	; 0x50
 8004cc6:	d03c      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0xfa>
 8004cc8:	2b50      	cmp	r3, #80	; 0x50
 8004cca:	d873      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b40      	cmp	r3, #64	; 0x40
 8004cce:	d058      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x13a>
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	d86f      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b30      	cmp	r3, #48	; 0x30
 8004cd6:	d064      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd8:	2b30      	cmp	r3, #48	; 0x30
 8004cda:	d86b      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d060      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d867      	bhi.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d05c      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d05a      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x15a>
 8004cec:	e062      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cfe:	f000 fbf1 	bl	80054e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	609a      	str	r2, [r3, #8]
      break;
 8004d1a:	e04f      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d2c:	f000 fbda 	bl	80054e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d3e:	609a      	str	r2, [r3, #8]
      break;
 8004d40:	e03c      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f000 fb4e 	bl	80053f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2150      	movs	r1, #80	; 0x50
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fba7 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 8004d60:	e02c      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f000 fb6d 	bl	800544e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2160      	movs	r1, #96	; 0x60
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fb97 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 8004d80:	e01c      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f000 fb2e 	bl	80053f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2140      	movs	r1, #64	; 0x40
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fb87 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 8004da0:	e00c      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4619      	mov	r1, r3
 8004dac:	4610      	mov	r0, r2
 8004dae:	f000 fb7e 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 8004db2:	e003      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
      break;
 8004db8:	e000      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	fffeff88 	.word	0xfffeff88

08004ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a46      	ldr	r2, [pc, #280]	; (8004f08 <TIM_Base_SetConfig+0x12c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfa:	d00f      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a43      	ldr	r2, [pc, #268]	; (8004f0c <TIM_Base_SetConfig+0x130>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a42      	ldr	r2, [pc, #264]	; (8004f10 <TIM_Base_SetConfig+0x134>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a41      	ldr	r2, [pc, #260]	; (8004f14 <TIM_Base_SetConfig+0x138>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a40      	ldr	r2, [pc, #256]	; (8004f18 <TIM_Base_SetConfig+0x13c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d108      	bne.n	8004e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a35      	ldr	r2, [pc, #212]	; (8004f08 <TIM_Base_SetConfig+0x12c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d02b      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3c:	d027      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a32      	ldr	r2, [pc, #200]	; (8004f0c <TIM_Base_SetConfig+0x130>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d023      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a31      	ldr	r2, [pc, #196]	; (8004f10 <TIM_Base_SetConfig+0x134>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01f      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a30      	ldr	r2, [pc, #192]	; (8004f14 <TIM_Base_SetConfig+0x138>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d01b      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2f      	ldr	r2, [pc, #188]	; (8004f18 <TIM_Base_SetConfig+0x13c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d017      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2e      	ldr	r2, [pc, #184]	; (8004f1c <TIM_Base_SetConfig+0x140>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2d      	ldr	r2, [pc, #180]	; (8004f20 <TIM_Base_SetConfig+0x144>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00f      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2c      	ldr	r2, [pc, #176]	; (8004f24 <TIM_Base_SetConfig+0x148>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00b      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2b      	ldr	r2, [pc, #172]	; (8004f28 <TIM_Base_SetConfig+0x14c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d007      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2a      	ldr	r2, [pc, #168]	; (8004f2c <TIM_Base_SetConfig+0x150>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d003      	beq.n	8004e8e <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a29      	ldr	r2, [pc, #164]	; (8004f30 <TIM_Base_SetConfig+0x154>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d108      	bne.n	8004ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a10      	ldr	r2, [pc, #64]	; (8004f08 <TIM_Base_SetConfig+0x12c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_Base_SetConfig+0xf8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a12      	ldr	r2, [pc, #72]	; (8004f18 <TIM_Base_SetConfig+0x13c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d103      	bne.n	8004edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d105      	bne.n	8004efa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	611a      	str	r2, [r3, #16]
  }
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800
 8004f14:	40000c00 	.word	0x40000c00
 8004f18:	40010400 	.word	0x40010400
 8004f1c:	40014000 	.word	0x40014000
 8004f20:	40014400 	.word	0x40014400
 8004f24:	40014800 	.word	0x40014800
 8004f28:	40001800 	.word	0x40001800
 8004f2c:	40001c00 	.word	0x40001c00
 8004f30:	40002000 	.word	0x40002000

08004f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f023 0201 	bic.w	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4b2b      	ldr	r3, [pc, #172]	; (800500c <TIM_OC1_SetConfig+0xd8>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 0302 	bic.w	r3, r3, #2
 8004f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a21      	ldr	r2, [pc, #132]	; (8005010 <TIM_OC1_SetConfig+0xdc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_OC1_SetConfig+0x64>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a20      	ldr	r2, [pc, #128]	; (8005014 <TIM_OC1_SetConfig+0xe0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d10c      	bne.n	8004fb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f023 0308 	bic.w	r3, r3, #8
 8004f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a16      	ldr	r2, [pc, #88]	; (8005010 <TIM_OC1_SetConfig+0xdc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d003      	beq.n	8004fc2 <TIM_OC1_SetConfig+0x8e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a15      	ldr	r2, [pc, #84]	; (8005014 <TIM_OC1_SetConfig+0xe0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d111      	bne.n	8004fe6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	621a      	str	r2, [r3, #32]
}
 8005000:	bf00      	nop
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	fffeff8f 	.word	0xfffeff8f
 8005010:	40010000 	.word	0x40010000
 8005014:	40010400 	.word	0x40010400

08005018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f023 0210 	bic.w	r2, r3, #16
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4b2e      	ldr	r3, [pc, #184]	; (80050fc <TIM_OC2_SetConfig+0xe4>)
 8005044:	4013      	ands	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0320 	bic.w	r3, r3, #32
 8005062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a23      	ldr	r2, [pc, #140]	; (8005100 <TIM_OC2_SetConfig+0xe8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_OC2_SetConfig+0x68>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a22      	ldr	r2, [pc, #136]	; (8005104 <TIM_OC2_SetConfig+0xec>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10d      	bne.n	800509c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a18      	ldr	r2, [pc, #96]	; (8005100 <TIM_OC2_SetConfig+0xe8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC2_SetConfig+0x94>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a17      	ldr	r2, [pc, #92]	; (8005104 <TIM_OC2_SetConfig+0xec>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d113      	bne.n	80050d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	feff8fff 	.word	0xfeff8fff
 8005100:	40010000 	.word	0x40010000
 8005104:	40010400 	.word	0x40010400

08005108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4b2d      	ldr	r3, [pc, #180]	; (80051e8 <TIM_OC3_SetConfig+0xe0>)
 8005134:	4013      	ands	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a22      	ldr	r2, [pc, #136]	; (80051ec <TIM_OC3_SetConfig+0xe4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_OC3_SetConfig+0x66>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <TIM_OC3_SetConfig+0xe8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d10d      	bne.n	800518a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a17      	ldr	r2, [pc, #92]	; (80051ec <TIM_OC3_SetConfig+0xe4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_OC3_SetConfig+0x92>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a16      	ldr	r2, [pc, #88]	; (80051f0 <TIM_OC3_SetConfig+0xe8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d113      	bne.n	80051c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	fffeff8f 	.word	0xfffeff8f
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40010400 	.word	0x40010400

080051f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4b1e      	ldr	r3, [pc, #120]	; (8005298 <TIM_OC4_SetConfig+0xa4>)
 8005220:	4013      	ands	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	021b      	lsls	r3, r3, #8
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800523e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	031b      	lsls	r3, r3, #12
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a13      	ldr	r2, [pc, #76]	; (800529c <TIM_OC4_SetConfig+0xa8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_OC4_SetConfig+0x68>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <TIM_OC4_SetConfig+0xac>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d109      	bne.n	8005270 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005262:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	019b      	lsls	r3, r3, #6
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	feff8fff 	.word	0xfeff8fff
 800529c:	40010000 	.word	0x40010000
 80052a0:	40010400 	.word	0x40010400

080052a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4b1b      	ldr	r3, [pc, #108]	; (800533c <TIM_OC5_SetConfig+0x98>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a12      	ldr	r2, [pc, #72]	; (8005340 <TIM_OC5_SetConfig+0x9c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d003      	beq.n	8005302 <TIM_OC5_SetConfig+0x5e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a11      	ldr	r2, [pc, #68]	; (8005344 <TIM_OC5_SetConfig+0xa0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d109      	bne.n	8005316 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005308:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	621a      	str	r2, [r3, #32]
}
 8005330:	bf00      	nop
 8005332:	371c      	adds	r7, #28
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	fffeff8f 	.word	0xfffeff8f
 8005340:	40010000 	.word	0x40010000
 8005344:	40010400 	.word	0x40010400

08005348 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4b1c      	ldr	r3, [pc, #112]	; (80053e4 <TIM_OC6_SetConfig+0x9c>)
 8005374:	4013      	ands	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800538a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	051b      	lsls	r3, r3, #20
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a13      	ldr	r2, [pc, #76]	; (80053e8 <TIM_OC6_SetConfig+0xa0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_OC6_SetConfig+0x60>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a12      	ldr	r2, [pc, #72]	; (80053ec <TIM_OC6_SetConfig+0xa4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d109      	bne.n	80053bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	029b      	lsls	r3, r3, #10
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	621a      	str	r2, [r3, #32]
}
 80053d6:	bf00      	nop
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	feff8fff 	.word	0xfeff8fff
 80053e8:	40010000 	.word	0x40010000
 80053ec:	40010400 	.word	0x40010400

080053f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f023 0201 	bic.w	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800541a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f023 030a 	bic.w	r3, r3, #10
 800542c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	621a      	str	r2, [r3, #32]
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800544e:	b480      	push	{r7}
 8005450:	b087      	sub	sp, #28
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f023 0210 	bic.w	r2, r3, #16
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	031b      	lsls	r3, r3, #12
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800548a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f043 0307 	orr.w	r3, r3, #7
 80054d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	609a      	str	r2, [r3, #8]
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	021a      	lsls	r2, r3, #8
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	431a      	orrs	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4313      	orrs	r3, r2
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 031f 	and.w	r3, r3, #31
 8005536:	2201      	movs	r2, #1
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	43db      	mvns	r3, r3
 8005546:	401a      	ands	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a1a      	ldr	r2, [r3, #32]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	431a      	orrs	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005584:	2302      	movs	r3, #2
 8005586:	e06d      	b.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a30      	ldr	r2, [pc, #192]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2f      	ldr	r2, [pc, #188]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d108      	bne.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a20      	ldr	r2, [pc, #128]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d022      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fa:	d01d      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d018      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1c      	ldr	r2, [pc, #112]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d013      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1a      	ldr	r2, [pc, #104]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00e      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a15      	ldr	r2, [pc, #84]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d009      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a16      	ldr	r2, [pc, #88]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d004      	beq.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a15      	ldr	r2, [pc, #84]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d10c      	bne.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800563e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	4313      	orrs	r3, r2
 8005648:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	40010000 	.word	0x40010000
 8005674:	40010400 	.word	0x40010400
 8005678:	40000400 	.word	0x40000400
 800567c:	40000800 	.word	0x40000800
 8005680:	40000c00 	.word	0x40000c00
 8005684:	40014000 	.word	0x40014000
 8005688:	40001800 	.word	0x40001800

0800568c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e040      	b.n	8005720 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fb fdc8 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2224      	movs	r2, #36	; 0x24
 80056b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fe6c 	bl	80063b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fc05 	bl	8005ee8 <UART_SetConfig>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e01b      	b.n	8005720 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 feeb 	bl	80064f4 <UART_CheckIdleState>
 800571e:	4603      	mov	r3, r0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	4613      	mov	r3, r2
 8005736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573c:	2b20      	cmp	r3, #32
 800573e:	d177      	bne.n	8005830 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <HAL_UART_Transmit+0x24>
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e070      	b.n	8005832 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2221      	movs	r2, #33	; 0x21
 800575c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800575e:	f7fb ff91 	bl	8001684 <HAL_GetTick>
 8005762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	88fa      	ldrh	r2, [r7, #6]
 8005768:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	88fa      	ldrh	r2, [r7, #6]
 8005770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577c:	d108      	bne.n	8005790 <HAL_UART_Transmit+0x68>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d104      	bne.n	8005790 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	e003      	b.n	8005798 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005798:	e02f      	b.n	80057fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2200      	movs	r2, #0
 80057a2:	2180      	movs	r1, #128	; 0x80
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 ff4d 	bl	8006644 <UART_WaitOnFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2220      	movs	r2, #32
 80057b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e03b      	b.n	8005832 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	3302      	adds	r3, #2
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	e007      	b.n	80057e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	781a      	ldrb	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3301      	adds	r3, #1
 80057e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1c9      	bne.n	800579a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2200      	movs	r2, #0
 800580e:	2140      	movs	r1, #64	; 0x40
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 ff17 	bl	8006644 <UART_WaitOnFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d004      	beq.n	8005826 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e005      	b.n	8005832 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	e000      	b.n	8005832 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005830:	2302      	movs	r3, #2
  }
}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b08a      	sub	sp, #40	; 0x28
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	4613      	mov	r3, r2
 8005846:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800584e:	2b20      	cmp	r3, #32
 8005850:	d132      	bne.n	80058b8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_UART_Receive_IT+0x24>
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e02b      	b.n	80058ba <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d018      	beq.n	80058a8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	613b      	str	r3, [r7, #16]
   return(result);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	623b      	str	r3, [r7, #32]
 8005896:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	69f9      	ldr	r1, [r7, #28]
 800589a:	6a3a      	ldr	r2, [r7, #32]
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e6      	bne.n	8005876 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 ff36 	bl	8006720 <UART_Start_Receive_IT>
 80058b4:	4603      	mov	r3, r0
 80058b6:	e000      	b.n	80058ba <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80058b8:	2302      	movs	r3, #2
  }
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3728      	adds	r7, #40	; 0x28
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b0ba      	sub	sp, #232	; 0xe8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80058f2:	4013      	ands	r3, r2
 80058f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d115      	bne.n	800592c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00f      	beq.n	800592c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800590c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 82ac 	beq.w	8005e7a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
      }
      return;
 800592a:	e2a6      	b.n	8005e7a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800592c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8117 	beq.w	8005b64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005942:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005946:	4b85      	ldr	r3, [pc, #532]	; (8005b5c <HAL_UART_IRQHandler+0x298>)
 8005948:	4013      	ands	r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 810a 	beq.w	8005b64 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d011      	beq.n	8005980 <HAL_UART_IRQHandler+0xbc>
 800595c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00b      	beq.n	8005980 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2201      	movs	r2, #1
 800596e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005976:	f043 0201 	orr.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d011      	beq.n	80059b0 <HAL_UART_IRQHandler+0xec>
 800598c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2202      	movs	r2, #2
 800599e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a6:	f043 0204 	orr.w	r2, r3, #4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d011      	beq.n	80059e0 <HAL_UART_IRQHandler+0x11c>
 80059bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00b      	beq.n	80059e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2204      	movs	r2, #4
 80059ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d6:	f043 0202 	orr.w	r2, r3, #2
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d017      	beq.n	8005a1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d105      	bne.n	8005a04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a12:	f043 0208 	orr.w	r2, r3, #8
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d012      	beq.n	8005a4e <HAL_UART_IRQHandler+0x18a>
 8005a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00c      	beq.n	8005a4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a44:	f043 0220 	orr.w	r2, r3, #32
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8212 	beq.w	8005e7e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00d      	beq.n	8005a82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a96:	2b40      	cmp	r3, #64	; 0x40
 8005a98:	d005      	beq.n	8005aa6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d04f      	beq.n	8005b46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 ff00 	bl	80068ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b40      	cmp	r3, #64	; 0x40
 8005ab8:	d141      	bne.n	8005b3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ae6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005af2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1d9      	bne.n	8005aba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d013      	beq.n	8005b36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b12:	4a13      	ldr	r2, [pc, #76]	; (8005b60 <HAL_UART_IRQHandler+0x29c>)
 8005b14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fc fb46 	bl	80021ac <HAL_DMA_Abort_IT>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d017      	beq.n	8005b56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b30:	4610      	mov	r0, r2
 8005b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b34:	e00f      	b.n	8005b56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f9b6 	bl	8005ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3c:	e00b      	b.n	8005b56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f9b2 	bl	8005ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b44:	e007      	b.n	8005b56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f9ae 	bl	8005ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b54:	e193      	b.n	8005e7e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b56:	bf00      	nop
    return;
 8005b58:	e191      	b.n	8005e7e <HAL_UART_IRQHandler+0x5ba>
 8005b5a:	bf00      	nop
 8005b5c:	04000120 	.word	0x04000120
 8005b60:	08006975 	.word	0x08006975

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	f040 814c 	bne.w	8005e06 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8145 	beq.w	8005e06 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 813e 	beq.w	8005e06 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2210      	movs	r2, #16
 8005b90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	f040 80b6 	bne.w	8005d0e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 8165 	beq.w	8005e82 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	f080 815d 	bcs.w	8005e82 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bdc:	f000 8086 	beq.w	8005cec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
 8005c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1da      	bne.n	8005be0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3308      	adds	r3, #8
 8005c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e1      	bne.n	8005c2a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3308      	adds	r3, #8
 8005c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e3      	bne.n	8005c66 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cbc:	f023 0310 	bic.w	r3, r3, #16
 8005cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cce:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cd0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e4      	bne.n	8005cac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fc f9f0 	bl	80020cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8d8 	bl	8005ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d0c:	e0b9      	b.n	8005e82 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 80ab 	beq.w	8005e86 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80a6 	beq.w	8005e86 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e4      	bne.n	8005d3a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3308      	adds	r3, #8
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	f023 0301 	bic.w	r3, r3, #1
 8005d86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3308      	adds	r3, #8
 8005d90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d94:	633a      	str	r2, [r7, #48]	; 0x30
 8005d96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e3      	bne.n	8005d70 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f023 0310 	bic.w	r3, r3, #16
 8005dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	69b9      	ldr	r1, [r7, #24]
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	617b      	str	r3, [r7, #20]
   return(result);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e4      	bne.n	8005dbc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f85c 	bl	8005ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e04:	e03f      	b.n	8005e86 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00e      	beq.n	8005e30 <HAL_UART_IRQHandler+0x56c>
 8005e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d008      	beq.n	8005e30 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f853 	bl	8005ed4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e2e:	e02d      	b.n	8005e8c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00e      	beq.n	8005e5a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01c      	beq.n	8005e8a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
    }
    return;
 8005e58:	e017      	b.n	8005e8a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d012      	beq.n	8005e8c <HAL_UART_IRQHandler+0x5c8>
 8005e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00c      	beq.n	8005e8c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fd94 	bl	80069a0 <UART_EndTransmit_IT>
    return;
 8005e78:	e008      	b.n	8005e8c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e7a:	bf00      	nop
 8005e7c:	e006      	b.n	8005e8c <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e7e:	bf00      	nop
 8005e80:	e004      	b.n	8005e8c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e82:	bf00      	nop
 8005e84:	e002      	b.n	8005e8c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e86:	bf00      	nop
 8005e88:	e000      	b.n	8005e8c <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e8a:	bf00      	nop
  }

}
 8005e8c:	37e8      	adds	r7, #232	; 0xe8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop

08005e94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	4ba6      	ldr	r3, [pc, #664]	; (80061ac <UART_SetConfig+0x2c4>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6812      	ldr	r2, [r2, #0]
 8005f1a:	6979      	ldr	r1, [r7, #20]
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a94      	ldr	r2, [pc, #592]	; (80061b0 <UART_SetConfig+0x2c8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d120      	bne.n	8005fa6 <UART_SetConfig+0xbe>
 8005f64:	4b93      	ldr	r3, [pc, #588]	; (80061b4 <UART_SetConfig+0x2cc>)
 8005f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d816      	bhi.n	8005fa0 <UART_SetConfig+0xb8>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <UART_SetConfig+0x90>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f89 	.word	0x08005f89
 8005f7c:	08005f95 	.word	0x08005f95
 8005f80:	08005f8f 	.word	0x08005f8f
 8005f84:	08005f9b 	.word	0x08005f9b
 8005f88:	2301      	movs	r3, #1
 8005f8a:	77fb      	strb	r3, [r7, #31]
 8005f8c:	e150      	b.n	8006230 <UART_SetConfig+0x348>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	77fb      	strb	r3, [r7, #31]
 8005f92:	e14d      	b.n	8006230 <UART_SetConfig+0x348>
 8005f94:	2304      	movs	r3, #4
 8005f96:	77fb      	strb	r3, [r7, #31]
 8005f98:	e14a      	b.n	8006230 <UART_SetConfig+0x348>
 8005f9a:	2308      	movs	r3, #8
 8005f9c:	77fb      	strb	r3, [r7, #31]
 8005f9e:	e147      	b.n	8006230 <UART_SetConfig+0x348>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	77fb      	strb	r3, [r7, #31]
 8005fa4:	e144      	b.n	8006230 <UART_SetConfig+0x348>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a83      	ldr	r2, [pc, #524]	; (80061b8 <UART_SetConfig+0x2d0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d132      	bne.n	8006016 <UART_SetConfig+0x12e>
 8005fb0:	4b80      	ldr	r3, [pc, #512]	; (80061b4 <UART_SetConfig+0x2cc>)
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb6:	f003 030c 	and.w	r3, r3, #12
 8005fba:	2b0c      	cmp	r3, #12
 8005fbc:	d828      	bhi.n	8006010 <UART_SetConfig+0x128>
 8005fbe:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0xdc>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08005ff9 	.word	0x08005ff9
 8005fc8:	08006011 	.word	0x08006011
 8005fcc:	08006011 	.word	0x08006011
 8005fd0:	08006011 	.word	0x08006011
 8005fd4:	08006005 	.word	0x08006005
 8005fd8:	08006011 	.word	0x08006011
 8005fdc:	08006011 	.word	0x08006011
 8005fe0:	08006011 	.word	0x08006011
 8005fe4:	08005fff 	.word	0x08005fff
 8005fe8:	08006011 	.word	0x08006011
 8005fec:	08006011 	.word	0x08006011
 8005ff0:	08006011 	.word	0x08006011
 8005ff4:	0800600b 	.word	0x0800600b
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	77fb      	strb	r3, [r7, #31]
 8005ffc:	e118      	b.n	8006230 <UART_SetConfig+0x348>
 8005ffe:	2302      	movs	r3, #2
 8006000:	77fb      	strb	r3, [r7, #31]
 8006002:	e115      	b.n	8006230 <UART_SetConfig+0x348>
 8006004:	2304      	movs	r3, #4
 8006006:	77fb      	strb	r3, [r7, #31]
 8006008:	e112      	b.n	8006230 <UART_SetConfig+0x348>
 800600a:	2308      	movs	r3, #8
 800600c:	77fb      	strb	r3, [r7, #31]
 800600e:	e10f      	b.n	8006230 <UART_SetConfig+0x348>
 8006010:	2310      	movs	r3, #16
 8006012:	77fb      	strb	r3, [r7, #31]
 8006014:	e10c      	b.n	8006230 <UART_SetConfig+0x348>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a68      	ldr	r2, [pc, #416]	; (80061bc <UART_SetConfig+0x2d4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d120      	bne.n	8006062 <UART_SetConfig+0x17a>
 8006020:	4b64      	ldr	r3, [pc, #400]	; (80061b4 <UART_SetConfig+0x2cc>)
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006026:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800602a:	2b30      	cmp	r3, #48	; 0x30
 800602c:	d013      	beq.n	8006056 <UART_SetConfig+0x16e>
 800602e:	2b30      	cmp	r3, #48	; 0x30
 8006030:	d814      	bhi.n	800605c <UART_SetConfig+0x174>
 8006032:	2b20      	cmp	r3, #32
 8006034:	d009      	beq.n	800604a <UART_SetConfig+0x162>
 8006036:	2b20      	cmp	r3, #32
 8006038:	d810      	bhi.n	800605c <UART_SetConfig+0x174>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <UART_SetConfig+0x15c>
 800603e:	2b10      	cmp	r3, #16
 8006040:	d006      	beq.n	8006050 <UART_SetConfig+0x168>
 8006042:	e00b      	b.n	800605c <UART_SetConfig+0x174>
 8006044:	2300      	movs	r3, #0
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e0f2      	b.n	8006230 <UART_SetConfig+0x348>
 800604a:	2302      	movs	r3, #2
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e0ef      	b.n	8006230 <UART_SetConfig+0x348>
 8006050:	2304      	movs	r3, #4
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e0ec      	b.n	8006230 <UART_SetConfig+0x348>
 8006056:	2308      	movs	r3, #8
 8006058:	77fb      	strb	r3, [r7, #31]
 800605a:	e0e9      	b.n	8006230 <UART_SetConfig+0x348>
 800605c:	2310      	movs	r3, #16
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e0e6      	b.n	8006230 <UART_SetConfig+0x348>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a56      	ldr	r2, [pc, #344]	; (80061c0 <UART_SetConfig+0x2d8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d120      	bne.n	80060ae <UART_SetConfig+0x1c6>
 800606c:	4b51      	ldr	r3, [pc, #324]	; (80061b4 <UART_SetConfig+0x2cc>)
 800606e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006072:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006076:	2bc0      	cmp	r3, #192	; 0xc0
 8006078:	d013      	beq.n	80060a2 <UART_SetConfig+0x1ba>
 800607a:	2bc0      	cmp	r3, #192	; 0xc0
 800607c:	d814      	bhi.n	80060a8 <UART_SetConfig+0x1c0>
 800607e:	2b80      	cmp	r3, #128	; 0x80
 8006080:	d009      	beq.n	8006096 <UART_SetConfig+0x1ae>
 8006082:	2b80      	cmp	r3, #128	; 0x80
 8006084:	d810      	bhi.n	80060a8 <UART_SetConfig+0x1c0>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <UART_SetConfig+0x1a8>
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d006      	beq.n	800609c <UART_SetConfig+0x1b4>
 800608e:	e00b      	b.n	80060a8 <UART_SetConfig+0x1c0>
 8006090:	2300      	movs	r3, #0
 8006092:	77fb      	strb	r3, [r7, #31]
 8006094:	e0cc      	b.n	8006230 <UART_SetConfig+0x348>
 8006096:	2302      	movs	r3, #2
 8006098:	77fb      	strb	r3, [r7, #31]
 800609a:	e0c9      	b.n	8006230 <UART_SetConfig+0x348>
 800609c:	2304      	movs	r3, #4
 800609e:	77fb      	strb	r3, [r7, #31]
 80060a0:	e0c6      	b.n	8006230 <UART_SetConfig+0x348>
 80060a2:	2308      	movs	r3, #8
 80060a4:	77fb      	strb	r3, [r7, #31]
 80060a6:	e0c3      	b.n	8006230 <UART_SetConfig+0x348>
 80060a8:	2310      	movs	r3, #16
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e0c0      	b.n	8006230 <UART_SetConfig+0x348>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a44      	ldr	r2, [pc, #272]	; (80061c4 <UART_SetConfig+0x2dc>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d125      	bne.n	8006104 <UART_SetConfig+0x21c>
 80060b8:	4b3e      	ldr	r3, [pc, #248]	; (80061b4 <UART_SetConfig+0x2cc>)
 80060ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060c6:	d017      	beq.n	80060f8 <UART_SetConfig+0x210>
 80060c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060cc:	d817      	bhi.n	80060fe <UART_SetConfig+0x216>
 80060ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d2:	d00b      	beq.n	80060ec <UART_SetConfig+0x204>
 80060d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d8:	d811      	bhi.n	80060fe <UART_SetConfig+0x216>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <UART_SetConfig+0x1fe>
 80060de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e2:	d006      	beq.n	80060f2 <UART_SetConfig+0x20a>
 80060e4:	e00b      	b.n	80060fe <UART_SetConfig+0x216>
 80060e6:	2300      	movs	r3, #0
 80060e8:	77fb      	strb	r3, [r7, #31]
 80060ea:	e0a1      	b.n	8006230 <UART_SetConfig+0x348>
 80060ec:	2302      	movs	r3, #2
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	e09e      	b.n	8006230 <UART_SetConfig+0x348>
 80060f2:	2304      	movs	r3, #4
 80060f4:	77fb      	strb	r3, [r7, #31]
 80060f6:	e09b      	b.n	8006230 <UART_SetConfig+0x348>
 80060f8:	2308      	movs	r3, #8
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e098      	b.n	8006230 <UART_SetConfig+0x348>
 80060fe:	2310      	movs	r3, #16
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e095      	b.n	8006230 <UART_SetConfig+0x348>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2f      	ldr	r2, [pc, #188]	; (80061c8 <UART_SetConfig+0x2e0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d125      	bne.n	800615a <UART_SetConfig+0x272>
 800610e:	4b29      	ldr	r3, [pc, #164]	; (80061b4 <UART_SetConfig+0x2cc>)
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006114:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006118:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800611c:	d017      	beq.n	800614e <UART_SetConfig+0x266>
 800611e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006122:	d817      	bhi.n	8006154 <UART_SetConfig+0x26c>
 8006124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006128:	d00b      	beq.n	8006142 <UART_SetConfig+0x25a>
 800612a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800612e:	d811      	bhi.n	8006154 <UART_SetConfig+0x26c>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <UART_SetConfig+0x254>
 8006134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006138:	d006      	beq.n	8006148 <UART_SetConfig+0x260>
 800613a:	e00b      	b.n	8006154 <UART_SetConfig+0x26c>
 800613c:	2301      	movs	r3, #1
 800613e:	77fb      	strb	r3, [r7, #31]
 8006140:	e076      	b.n	8006230 <UART_SetConfig+0x348>
 8006142:	2302      	movs	r3, #2
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e073      	b.n	8006230 <UART_SetConfig+0x348>
 8006148:	2304      	movs	r3, #4
 800614a:	77fb      	strb	r3, [r7, #31]
 800614c:	e070      	b.n	8006230 <UART_SetConfig+0x348>
 800614e:	2308      	movs	r3, #8
 8006150:	77fb      	strb	r3, [r7, #31]
 8006152:	e06d      	b.n	8006230 <UART_SetConfig+0x348>
 8006154:	2310      	movs	r3, #16
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e06a      	b.n	8006230 <UART_SetConfig+0x348>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1b      	ldr	r2, [pc, #108]	; (80061cc <UART_SetConfig+0x2e4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d138      	bne.n	80061d6 <UART_SetConfig+0x2ee>
 8006164:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <UART_SetConfig+0x2cc>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800616e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006172:	d017      	beq.n	80061a4 <UART_SetConfig+0x2bc>
 8006174:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006178:	d82a      	bhi.n	80061d0 <UART_SetConfig+0x2e8>
 800617a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800617e:	d00b      	beq.n	8006198 <UART_SetConfig+0x2b0>
 8006180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006184:	d824      	bhi.n	80061d0 <UART_SetConfig+0x2e8>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <UART_SetConfig+0x2aa>
 800618a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618e:	d006      	beq.n	800619e <UART_SetConfig+0x2b6>
 8006190:	e01e      	b.n	80061d0 <UART_SetConfig+0x2e8>
 8006192:	2300      	movs	r3, #0
 8006194:	77fb      	strb	r3, [r7, #31]
 8006196:	e04b      	b.n	8006230 <UART_SetConfig+0x348>
 8006198:	2302      	movs	r3, #2
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e048      	b.n	8006230 <UART_SetConfig+0x348>
 800619e:	2304      	movs	r3, #4
 80061a0:	77fb      	strb	r3, [r7, #31]
 80061a2:	e045      	b.n	8006230 <UART_SetConfig+0x348>
 80061a4:	2308      	movs	r3, #8
 80061a6:	77fb      	strb	r3, [r7, #31]
 80061a8:	e042      	b.n	8006230 <UART_SetConfig+0x348>
 80061aa:	bf00      	nop
 80061ac:	efff69f3 	.word	0xefff69f3
 80061b0:	40011000 	.word	0x40011000
 80061b4:	40023800 	.word	0x40023800
 80061b8:	40004400 	.word	0x40004400
 80061bc:	40004800 	.word	0x40004800
 80061c0:	40004c00 	.word	0x40004c00
 80061c4:	40005000 	.word	0x40005000
 80061c8:	40011400 	.word	0x40011400
 80061cc:	40007800 	.word	0x40007800
 80061d0:	2310      	movs	r3, #16
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e02c      	b.n	8006230 <UART_SetConfig+0x348>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a72      	ldr	r2, [pc, #456]	; (80063a4 <UART_SetConfig+0x4bc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d125      	bne.n	800622c <UART_SetConfig+0x344>
 80061e0:	4b71      	ldr	r3, [pc, #452]	; (80063a8 <UART_SetConfig+0x4c0>)
 80061e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061ee:	d017      	beq.n	8006220 <UART_SetConfig+0x338>
 80061f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061f4:	d817      	bhi.n	8006226 <UART_SetConfig+0x33e>
 80061f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061fa:	d00b      	beq.n	8006214 <UART_SetConfig+0x32c>
 80061fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006200:	d811      	bhi.n	8006226 <UART_SetConfig+0x33e>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <UART_SetConfig+0x326>
 8006206:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800620a:	d006      	beq.n	800621a <UART_SetConfig+0x332>
 800620c:	e00b      	b.n	8006226 <UART_SetConfig+0x33e>
 800620e:	2300      	movs	r3, #0
 8006210:	77fb      	strb	r3, [r7, #31]
 8006212:	e00d      	b.n	8006230 <UART_SetConfig+0x348>
 8006214:	2302      	movs	r3, #2
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e00a      	b.n	8006230 <UART_SetConfig+0x348>
 800621a:	2304      	movs	r3, #4
 800621c:	77fb      	strb	r3, [r7, #31]
 800621e:	e007      	b.n	8006230 <UART_SetConfig+0x348>
 8006220:	2308      	movs	r3, #8
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e004      	b.n	8006230 <UART_SetConfig+0x348>
 8006226:	2310      	movs	r3, #16
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e001      	b.n	8006230 <UART_SetConfig+0x348>
 800622c:	2310      	movs	r3, #16
 800622e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006238:	d15b      	bne.n	80062f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800623a:	7ffb      	ldrb	r3, [r7, #31]
 800623c:	2b08      	cmp	r3, #8
 800623e:	d828      	bhi.n	8006292 <UART_SetConfig+0x3aa>
 8006240:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <UART_SetConfig+0x360>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	0800626d 	.word	0x0800626d
 800624c:	08006275 	.word	0x08006275
 8006250:	0800627d 	.word	0x0800627d
 8006254:	08006293 	.word	0x08006293
 8006258:	08006283 	.word	0x08006283
 800625c:	08006293 	.word	0x08006293
 8006260:	08006293 	.word	0x08006293
 8006264:	08006293 	.word	0x08006293
 8006268:	0800628b 	.word	0x0800628b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800626c:	f7fd fd56 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8006270:	61b8      	str	r0, [r7, #24]
        break;
 8006272:	e013      	b.n	800629c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006274:	f7fd fd66 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8006278:	61b8      	str	r0, [r7, #24]
        break;
 800627a:	e00f      	b.n	800629c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800627c:	4b4b      	ldr	r3, [pc, #300]	; (80063ac <UART_SetConfig+0x4c4>)
 800627e:	61bb      	str	r3, [r7, #24]
        break;
 8006280:	e00c      	b.n	800629c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006282:	f7fd fc39 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8006286:	61b8      	str	r0, [r7, #24]
        break;
 8006288:	e008      	b.n	800629c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800628a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800628e:	61bb      	str	r3, [r7, #24]
        break;
 8006290:	e004      	b.n	800629c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	77bb      	strb	r3, [r7, #30]
        break;
 800629a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d074      	beq.n	800638c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	005a      	lsls	r2, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	441a      	add	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b0f      	cmp	r3, #15
 80062bc:	d916      	bls.n	80062ec <UART_SetConfig+0x404>
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c4:	d212      	bcs.n	80062ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f023 030f 	bic.w	r3, r3, #15
 80062ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	085b      	lsrs	r3, r3, #1
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	b29a      	uxth	r2, r3
 80062dc:	89fb      	ldrh	r3, [r7, #14]
 80062de:	4313      	orrs	r3, r2
 80062e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	89fa      	ldrh	r2, [r7, #14]
 80062e8:	60da      	str	r2, [r3, #12]
 80062ea:	e04f      	b.n	800638c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	77bb      	strb	r3, [r7, #30]
 80062f0:	e04c      	b.n	800638c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062f2:	7ffb      	ldrb	r3, [r7, #31]
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d828      	bhi.n	800634a <UART_SetConfig+0x462>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <UART_SetConfig+0x418>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006325 	.word	0x08006325
 8006304:	0800632d 	.word	0x0800632d
 8006308:	08006335 	.word	0x08006335
 800630c:	0800634b 	.word	0x0800634b
 8006310:	0800633b 	.word	0x0800633b
 8006314:	0800634b 	.word	0x0800634b
 8006318:	0800634b 	.word	0x0800634b
 800631c:	0800634b 	.word	0x0800634b
 8006320:	08006343 	.word	0x08006343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006324:	f7fd fcfa 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8006328:	61b8      	str	r0, [r7, #24]
        break;
 800632a:	e013      	b.n	8006354 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800632c:	f7fd fd0a 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8006330:	61b8      	str	r0, [r7, #24]
        break;
 8006332:	e00f      	b.n	8006354 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006334:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <UART_SetConfig+0x4c4>)
 8006336:	61bb      	str	r3, [r7, #24]
        break;
 8006338:	e00c      	b.n	8006354 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800633a:	f7fd fbdd 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 800633e:	61b8      	str	r0, [r7, #24]
        break;
 8006340:	e008      	b.n	8006354 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006346:	61bb      	str	r3, [r7, #24]
        break;
 8006348:	e004      	b.n	8006354 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	77bb      	strb	r3, [r7, #30]
        break;
 8006352:	bf00      	nop
    }

    if (pclk != 0U)
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d018      	beq.n	800638c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	085a      	lsrs	r2, r3, #1
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	441a      	add	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	fbb2 f3f3 	udiv	r3, r2, r3
 800636c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	2b0f      	cmp	r3, #15
 8006372:	d909      	bls.n	8006388 <UART_SetConfig+0x4a0>
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637a:	d205      	bcs.n	8006388 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	b29a      	uxth	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60da      	str	r2, [r3, #12]
 8006386:	e001      	b.n	800638c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006398:	7fbb      	ldrb	r3, [r7, #30]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3720      	adds	r7, #32
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40007c00 	.word	0x40007c00
 80063a8:	40023800 	.word	0x40023800
 80063ac:	00f42400 	.word	0x00f42400

080063b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01a      	beq.n	80064c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ae:	d10a      	bne.n	80064c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
  }
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b098      	sub	sp, #96	; 0x60
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006504:	f7fb f8be 	bl	8001684 <HAL_GetTick>
 8006508:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b08      	cmp	r3, #8
 8006516:	d12e      	bne.n	8006576 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006520:	2200      	movs	r2, #0
 8006522:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f88c 	bl	8006644 <UART_WaitOnFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d021      	beq.n	8006576 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006546:	653b      	str	r3, [r7, #80]	; 0x50
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006550:	647b      	str	r3, [r7, #68]	; 0x44
 8006552:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006558:	e841 2300 	strex	r3, r2, [r1]
 800655c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800655e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1e6      	bne.n	8006532 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e062      	b.n	800663c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b04      	cmp	r3, #4
 8006582:	d149      	bne.n	8006618 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800658c:	2200      	movs	r2, #0
 800658e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f856 	bl	8006644 <UART_WaitOnFlagUntilTimeout>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d03c      	beq.n	8006618 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	623b      	str	r3, [r7, #32]
   return(result);
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065bc:	633b      	str	r3, [r7, #48]	; 0x30
 80065be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e6      	bne.n	800659e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3308      	adds	r3, #8
 80065d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	60fb      	str	r3, [r7, #12]
   return(result);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3308      	adds	r3, #8
 80065ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f0:	61fa      	str	r2, [r7, #28]
 80065f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	69b9      	ldr	r1, [r7, #24]
 80065f6:	69fa      	ldr	r2, [r7, #28]
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	617b      	str	r3, [r7, #20]
   return(result);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e5      	bne.n	80065d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e011      	b.n	800663c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3758      	adds	r7, #88	; 0x58
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	4613      	mov	r3, r2
 8006652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006654:	e04f      	b.n	80066f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800665c:	d04b      	beq.n	80066f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665e:	f7fb f811 	bl	8001684 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	429a      	cmp	r2, r3
 800666c:	d302      	bcc.n	8006674 <UART_WaitOnFlagUntilTimeout+0x30>
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e04e      	b.n	8006716 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	2b00      	cmp	r3, #0
 8006684:	d037      	beq.n	80066f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b80      	cmp	r3, #128	; 0x80
 800668a:	d034      	beq.n	80066f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d031      	beq.n	80066f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b08      	cmp	r3, #8
 800669e:	d110      	bne.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2208      	movs	r2, #8
 80066a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f8ff 	bl	80068ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2208      	movs	r2, #8
 80066b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e029      	b.n	8006716 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066d0:	d111      	bne.n	80066f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 f8e5 	bl	80068ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e00f      	b.n	8006716 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4013      	ands	r3, r2
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	429a      	cmp	r2, r3
 8006704:	bf0c      	ite	eq
 8006706:	2301      	moveq	r3, #1
 8006708:	2300      	movne	r3, #0
 800670a:	b2db      	uxtb	r3, r3
 800670c:	461a      	mov	r2, r3
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	429a      	cmp	r2, r3
 8006712:	d0a0      	beq.n	8006656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
	...

08006720 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006720:	b480      	push	{r7}
 8006722:	b097      	sub	sp, #92	; 0x5c
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	4613      	mov	r3, r2
 800672c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	88fa      	ldrh	r2, [r7, #6]
 8006738:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	88fa      	ldrh	r2, [r7, #6]
 8006740:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006752:	d10e      	bne.n	8006772 <UART_Start_Receive_IT+0x52>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <UART_Start_Receive_IT+0x48>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006762:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006766:	e02d      	b.n	80067c4 <UART_Start_Receive_IT+0xa4>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	22ff      	movs	r2, #255	; 0xff
 800676c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006770:	e028      	b.n	80067c4 <UART_Start_Receive_IT+0xa4>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10d      	bne.n	8006796 <UART_Start_Receive_IT+0x76>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d104      	bne.n	800678c <UART_Start_Receive_IT+0x6c>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	22ff      	movs	r2, #255	; 0xff
 8006786:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800678a:	e01b      	b.n	80067c4 <UART_Start_Receive_IT+0xa4>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	227f      	movs	r2, #127	; 0x7f
 8006790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006794:	e016      	b.n	80067c4 <UART_Start_Receive_IT+0xa4>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800679e:	d10d      	bne.n	80067bc <UART_Start_Receive_IT+0x9c>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d104      	bne.n	80067b2 <UART_Start_Receive_IT+0x92>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	227f      	movs	r2, #127	; 0x7f
 80067ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067b0:	e008      	b.n	80067c4 <UART_Start_Receive_IT+0xa4>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	223f      	movs	r2, #63	; 0x3f
 80067b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067ba:	e003      	b.n	80067c4 <UART_Start_Receive_IT+0xa4>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2222      	movs	r2, #34	; 0x22
 80067d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3308      	adds	r3, #8
 80067da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	f043 0301 	orr.w	r3, r3, #1
 80067ea:	657b      	str	r3, [r7, #84]	; 0x54
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80067f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e5      	bne.n	80067d4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006810:	d107      	bne.n	8006822 <UART_Start_Receive_IT+0x102>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d103      	bne.n	8006822 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4a21      	ldr	r2, [pc, #132]	; (80068a4 <UART_Start_Receive_IT+0x184>)
 800681e:	669a      	str	r2, [r3, #104]	; 0x68
 8006820:	e002      	b.n	8006828 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4a20      	ldr	r2, [pc, #128]	; (80068a8 <UART_Start_Receive_IT+0x188>)
 8006826:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d019      	beq.n	8006864 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684e:	637b      	str	r3, [r7, #52]	; 0x34
 8006850:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e6      	bne.n	8006830 <UART_Start_Receive_IT+0x110>
 8006862:	e018      	b.n	8006896 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	613b      	str	r3, [r7, #16]
   return(result);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f043 0320 	orr.w	r3, r3, #32
 8006878:	653b      	str	r3, [r7, #80]	; 0x50
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006882:	623b      	str	r3, [r7, #32]
 8006884:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	69f9      	ldr	r1, [r7, #28]
 8006888:	6a3a      	ldr	r2, [r7, #32]
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e6      	bne.n	8006864 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	375c      	adds	r7, #92	; 0x5c
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	08006b9d 	.word	0x08006b9d
 80068a8:	080069f5 	.word	0x080069f5

080068ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b095      	sub	sp, #84	; 0x54
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d2:	643b      	str	r3, [r7, #64]	; 0x40
 80068d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e6      	bne.n	80068b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3308      	adds	r3, #8
 80068ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	f023 0301 	bic.w	r3, r3, #1
 80068fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800690c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e5      	bne.n	80068e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691e:	2b01      	cmp	r3, #1
 8006920:	d118      	bne.n	8006954 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f023 0310 	bic.w	r3, r3, #16
 8006936:	647b      	str	r3, [r7, #68]	; 0x44
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6979      	ldr	r1, [r7, #20]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	613b      	str	r3, [r7, #16]
   return(result);
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e6      	bne.n	8006922 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006968:	bf00      	nop
 800696a:	3754      	adds	r7, #84	; 0x54
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f7ff fa88 	bl	8005ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006998:	bf00      	nop
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069bc:	61fb      	str	r3, [r7, #28]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6979      	ldr	r1, [r7, #20]
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	613b      	str	r3, [r7, #16]
   return(result);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e6      	bne.n	80069a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2220      	movs	r2, #32
 80069de:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7ff fa54 	bl	8005e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ec:	bf00      	nop
 80069ee:	3720      	adds	r7, #32
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b09c      	sub	sp, #112	; 0x70
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a02:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a0c:	2b22      	cmp	r3, #34	; 0x22
 8006a0e:	f040 80b9 	bne.w	8006b84 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a20:	b2d9      	uxtb	r1, r3
 8006a22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2c:	400a      	ands	r2, r1
 8006a2e:	b2d2      	uxtb	r2, r2
 8006a30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f040 809c 	bne.w	8006b94 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e6      	bne.n	8006a5c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3308      	adds	r3, #8
 8006a94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	667b      	str	r3, [r7, #100]	; 0x64
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006aae:	647a      	str	r2, [r7, #68]	; 0x44
 8006ab0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e5      	bne.n	8006a8e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d018      	beq.n	8006b16 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	623b      	str	r3, [r7, #32]
   return(result);
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006af8:	663b      	str	r3, [r7, #96]	; 0x60
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b02:	633b      	str	r3, [r7, #48]	; 0x30
 8006b04:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e6      	bne.n	8006ae4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d12e      	bne.n	8006b7c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f023 0310 	bic.w	r3, r3, #16
 8006b38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b42:	61fb      	str	r3, [r7, #28]
 8006b44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	69b9      	ldr	r1, [r7, #24]
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e6      	bne.n	8006b24 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	f003 0310 	and.w	r3, r3, #16
 8006b60:	2b10      	cmp	r3, #16
 8006b62:	d103      	bne.n	8006b6c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2210      	movs	r2, #16
 8006b6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff f9a1 	bl	8005ebc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b7a:	e00b      	b.n	8006b94 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7f9 fffb 	bl	8000b78 <HAL_UART_RxCpltCallback>
}
 8006b82:	e007      	b.n	8006b94 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0208 	orr.w	r2, r2, #8
 8006b92:	619a      	str	r2, [r3, #24]
}
 8006b94:	bf00      	nop
 8006b96:	3770      	adds	r7, #112	; 0x70
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b09c      	sub	sp, #112	; 0x70
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006baa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bb4:	2b22      	cmp	r3, #34	; 0x22
 8006bb6:	f040 80b9 	bne.w	8006d2c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006bce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bde:	1c9a      	adds	r2, r3, #2
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f040 809c 	bne.w	8006d3c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c18:	667b      	str	r3, [r7, #100]	; 0x64
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c22:	657b      	str	r3, [r7, #84]	; 0x54
 8006c24:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e6      	bne.n	8006c04 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3308      	adds	r3, #8
 8006c54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c56:	643a      	str	r2, [r7, #64]	; 0x40
 8006c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e5      	bne.n	8006c36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d018      	beq.n	8006cbe <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e6      	bne.n	8006c8c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d12e      	bne.n	8006d24 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6979      	ldr	r1, [r7, #20]
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e6      	bne.n	8006ccc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d103      	bne.n	8006d14 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2210      	movs	r2, #16
 8006d12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff f8cd 	bl	8005ebc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d22:	e00b      	b.n	8006d3c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7f9 ff27 	bl	8000b78 <HAL_UART_RxCpltCallback>
}
 8006d2a:	e007      	b.n	8006d3c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699a      	ldr	r2, [r3, #24]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0208 	orr.w	r2, r2, #8
 8006d3a:	619a      	str	r2, [r3, #24]
}
 8006d3c:	bf00      	nop
 8006d3e:	3770      	adds	r7, #112	; 0x70
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d44:	b084      	sub	sp, #16
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	f107 001c 	add.w	r0, r7, #28
 8006d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d121      	bne.n	8006da2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	4b21      	ldr	r3, [pc, #132]	; (8006df4 <USB_CoreInit+0xb0>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d105      	bne.n	8006d96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa92 	bl	80072c0 <USB_CoreReset>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
 8006da0:	e010      	b.n	8006dc4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa86 	bl	80072c0 <USB_CoreReset>
 8006db4:	4603      	mov	r3, r0
 8006db6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006dc4:	7fbb      	ldrb	r3, [r7, #30]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d10b      	bne.n	8006de2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f043 0206 	orr.w	r2, r3, #6
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f043 0220 	orr.w	r2, r3, #32
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dee:	b004      	add	sp, #16
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	ffbdffbf 	.word	0xffbdffbf

08006df8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f023 0201 	bic.w	r2, r3, #1
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d115      	bne.n	8006e68 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e48:	200a      	movs	r0, #10
 8006e4a:	f7fa fc27 	bl	800169c <HAL_Delay>
      ms += 10U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	330a      	adds	r3, #10
 8006e52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fa25 	bl	80072a4 <USB_GetMode>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d01e      	beq.n	8006e9e <USB_SetCurrentMode+0x84>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2bc7      	cmp	r3, #199	; 0xc7
 8006e64:	d9f0      	bls.n	8006e48 <USB_SetCurrentMode+0x2e>
 8006e66:	e01a      	b.n	8006e9e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d115      	bne.n	8006e9a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e7a:	200a      	movs	r0, #10
 8006e7c:	f7fa fc0e 	bl	800169c <HAL_Delay>
      ms += 10U;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	330a      	adds	r3, #10
 8006e84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fa0c 	bl	80072a4 <USB_GetMode>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d005      	beq.n	8006e9e <USB_SetCurrentMode+0x84>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2bc7      	cmp	r3, #199	; 0xc7
 8006e96:	d9f0      	bls.n	8006e7a <USB_SetCurrentMode+0x60>
 8006e98:	e001      	b.n	8006e9e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e005      	b.n	8006eaa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2bc8      	cmp	r3, #200	; 0xc8
 8006ea2:	d101      	bne.n	8006ea8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e000      	b.n	8006eaa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b086      	sub	sp, #24
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ece:	2300      	movs	r3, #0
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	e009      	b.n	8006ee8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	3340      	adds	r3, #64	; 0x40
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	2200      	movs	r2, #0
 8006ee0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2b0e      	cmp	r3, #14
 8006eec:	d9f2      	bls.n	8006ed4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006eee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d11c      	bne.n	8006f30 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f04:	f043 0302 	orr.w	r3, r3, #2
 8006f08:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e005      	b.n	8006f3c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f42:	461a      	mov	r2, r3
 8006f44:	2300      	movs	r3, #0
 8006f46:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f48:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d10d      	bne.n	8006f6c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f58:	2100      	movs	r1, #0
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f968 	bl	8007230 <USB_SetDevSpeed>
 8006f60:	e008      	b.n	8006f74 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f62:	2101      	movs	r1, #1
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f963 	bl	8007230 <USB_SetDevSpeed>
 8006f6a:	e003      	b.n	8006f74 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f6c:	2103      	movs	r1, #3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f95e 	bl	8007230 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f74:	2110      	movs	r1, #16
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f8fa 	bl	8007170 <USB_FlushTxFifo>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f924 	bl	80071d4 <USB_FlushRxFifo>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa8:	461a      	mov	r2, r3
 8006faa:	2300      	movs	r3, #0
 8006fac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fba:	2300      	movs	r3, #0
 8006fbc:	613b      	str	r3, [r7, #16]
 8006fbe:	e043      	b.n	8007048 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fd6:	d118      	bne.n	800700a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10a      	bne.n	8006ff4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fea:	461a      	mov	r2, r3
 8006fec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	e013      	b.n	800701c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007000:	461a      	mov	r2, r3
 8007002:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	e008      	b.n	800701c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	461a      	mov	r2, r3
 8007018:	2300      	movs	r3, #0
 800701a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007028:	461a      	mov	r2, r3
 800702a:	2300      	movs	r3, #0
 800702c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703a:	461a      	mov	r2, r3
 800703c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007040:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	3301      	adds	r3, #1
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800704c:	461a      	mov	r2, r3
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	4293      	cmp	r3, r2
 8007052:	d3b5      	bcc.n	8006fc0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007054:	2300      	movs	r3, #0
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	e043      	b.n	80070e2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800706c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007070:	d118      	bne.n	80070a4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	461a      	mov	r2, r3
 8007086:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	e013      	b.n	80070b6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709a:	461a      	mov	r2, r3
 800709c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	e008      	b.n	80070b6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b0:	461a      	mov	r2, r3
 80070b2:	2300      	movs	r3, #0
 80070b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	461a      	mov	r2, r3
 80070c4:	2300      	movs	r3, #0
 80070c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d4:	461a      	mov	r2, r3
 80070d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	3301      	adds	r3, #1
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80070e6:	461a      	mov	r2, r3
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d3b5      	bcc.n	800705a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007100:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800710e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007110:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	f043 0210 	orr.w	r2, r3, #16
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	4b0f      	ldr	r3, [pc, #60]	; (8007168 <USB_DevInit+0x2b4>)
 800712a:	4313      	orrs	r3, r2
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007130:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	f043 0208 	orr.w	r2, r3, #8
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007144:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007148:	2b01      	cmp	r3, #1
 800714a:	d105      	bne.n	8007158 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	699a      	ldr	r2, [r3, #24]
 8007150:	4b06      	ldr	r3, [pc, #24]	; (800716c <USB_DevInit+0x2b8>)
 8007152:	4313      	orrs	r3, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007164:	b004      	add	sp, #16
 8007166:	4770      	bx	lr
 8007168:	803c3800 	.word	0x803c3800
 800716c:	40000004 	.word	0x40000004

08007170 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3301      	adds	r3, #1
 8007182:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800718a:	d901      	bls.n	8007190 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e01b      	b.n	80071c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	daf2      	bge.n	800717e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	019b      	lsls	r3, r3, #6
 80071a0:	f043 0220 	orr.w	r2, r3, #32
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3301      	adds	r3, #1
 80071ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80071b4:	d901      	bls.n	80071ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e006      	b.n	80071c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d0f0      	beq.n	80071a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3301      	adds	r3, #1
 80071e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80071ec:	d901      	bls.n	80071f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e018      	b.n	8007224 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	daf2      	bge.n	80071e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2210      	movs	r2, #16
 8007202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3301      	adds	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007210:	d901      	bls.n	8007216 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e006      	b.n	8007224 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	2b10      	cmp	r3, #16
 8007220:	d0f0      	beq.n	8007204 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	68f9      	ldr	r1, [r7, #12]
 800724c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007250:	4313      	orrs	r3, r2
 8007252:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800727c:	f023 0303 	bic.w	r3, r3, #3
 8007280:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007290:	f043 0302 	orr.w	r3, r3, #2
 8007294:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	f003 0301 	and.w	r3, r3, #1
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3301      	adds	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80072d8:	d901      	bls.n	80072de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e01b      	b.n	8007316 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	daf2      	bge.n	80072cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f043 0201 	orr.w	r2, r3, #1
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007302:	d901      	bls.n	8007308 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e006      	b.n	8007316 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b01      	cmp	r3, #1
 8007312:	d0f0      	beq.n	80072f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <memset>:
 8007322:	4402      	add	r2, r0
 8007324:	4603      	mov	r3, r0
 8007326:	4293      	cmp	r3, r2
 8007328:	d100      	bne.n	800732c <memset+0xa>
 800732a:	4770      	bx	lr
 800732c:	f803 1b01 	strb.w	r1, [r3], #1
 8007330:	e7f9      	b.n	8007326 <memset+0x4>
	...

08007334 <__libc_init_array>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	4d0d      	ldr	r5, [pc, #52]	; (800736c <__libc_init_array+0x38>)
 8007338:	4c0d      	ldr	r4, [pc, #52]	; (8007370 <__libc_init_array+0x3c>)
 800733a:	1b64      	subs	r4, r4, r5
 800733c:	10a4      	asrs	r4, r4, #2
 800733e:	2600      	movs	r6, #0
 8007340:	42a6      	cmp	r6, r4
 8007342:	d109      	bne.n	8007358 <__libc_init_array+0x24>
 8007344:	4d0b      	ldr	r5, [pc, #44]	; (8007374 <__libc_init_array+0x40>)
 8007346:	4c0c      	ldr	r4, [pc, #48]	; (8007378 <__libc_init_array+0x44>)
 8007348:	f000 f818 	bl	800737c <_init>
 800734c:	1b64      	subs	r4, r4, r5
 800734e:	10a4      	asrs	r4, r4, #2
 8007350:	2600      	movs	r6, #0
 8007352:	42a6      	cmp	r6, r4
 8007354:	d105      	bne.n	8007362 <__libc_init_array+0x2e>
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	f855 3b04 	ldr.w	r3, [r5], #4
 800735c:	4798      	blx	r3
 800735e:	3601      	adds	r6, #1
 8007360:	e7ee      	b.n	8007340 <__libc_init_array+0xc>
 8007362:	f855 3b04 	ldr.w	r3, [r5], #4
 8007366:	4798      	blx	r3
 8007368:	3601      	adds	r6, #1
 800736a:	e7f2      	b.n	8007352 <__libc_init_array+0x1e>
 800736c:	080073dc 	.word	0x080073dc
 8007370:	080073dc 	.word	0x080073dc
 8007374:	080073dc 	.word	0x080073dc
 8007378:	080073e0 	.word	0x080073e0

0800737c <_init>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	bf00      	nop
 8007380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007382:	bc08      	pop	{r3}
 8007384:	469e      	mov	lr, r3
 8007386:	4770      	bx	lr

08007388 <_fini>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	bf00      	nop
 800738c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738e:	bc08      	pop	{r3}
 8007390:	469e      	mov	lr, r3
 8007392:	4770      	bx	lr
