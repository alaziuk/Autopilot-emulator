
Autopilot symulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007270  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007468  08007468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a8  080074a8  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074b0  080074b0  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080074b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000048  08007500  00020048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000e8  080075a0  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000080c  20000188  08007640  00020188  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000994  08007640  00020994  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201b6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00019782  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002fad  00000000  00000000  0003997b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000014a8  00000000  00000000  0003c928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001021  00000000  00000000  0003ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029e58  00000000  00000000  0003edf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00017960  00000000  00000000  00068c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00106017  00000000  00000000  000805a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000058e0  00000000  00000000  001865c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006e  00000000  00000000  0018bea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000188 	.word	0x20000188
 8000214:	00000000 	.word	0x00000000
 8000218:	08007450 	.word	0x08007450

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000018c 	.word	0x2000018c
 8000234:	08007450 	.word	0x08007450

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f001 f853 	bl	80015e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f878 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 fa90 	bl	8000a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000544:	f000 fa70 	bl	8000a28 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000548:	f000 fa10 	bl	800096c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800054c:	f000 fa3e 	bl	80009cc <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000550:	f000 f9dc 	bl	800090c <MX_UART4_Init>
  MX_TIM4_Init();
 8000554:	f000 f962 	bl	800081c <MX_TIM4_Init>
  MX_ETH_Init();
 8000558:	f000 f912 	bl	8000780 <MX_ETH_Init>
  MX_CAN1_Init();
 800055c:	f000 f8da 	bl	8000714 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // start timer
  HAL_UART_Receive_IT(&huart4, rx_data, RX_DATA);
 8000560:	2205      	movs	r2, #5
 8000562:	492b      	ldr	r1, [pc, #172]	; (8000610 <main+0xdc>)
 8000564:	482b      	ldr	r0, [pc, #172]	; (8000614 <main+0xe0>)
 8000566:	f005 f9d2 	bl	800590e <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart4, tx_boot, TX_BOOT, UART_TIMEOUT);
 800056a:	230f      	movs	r3, #15
 800056c:	2211      	movs	r2, #17
 800056e:	492a      	ldr	r1, [pc, #168]	; (8000618 <main+0xe4>)
 8000570:	4828      	ldr	r0, [pc, #160]	; (8000614 <main+0xe0>)
 8000572:	f005 f943 	bl	80057fc <HAL_UART_Transmit>

  HAL_CAN_Start(&hcan1);
 8000576:	4829      	ldr	r0, [pc, #164]	; (800061c <main+0xe8>)
 8000578:	f001 f9af 	bl	80018da <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800057c:	2102      	movs	r1, #2
 800057e:	4827      	ldr	r0, [pc, #156]	; (800061c <main+0xe8>)
 8000580:	f001 f9ef 	bl	8001962 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 1;
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <main+0xec>)
 8000586:	2201      	movs	r2, #1
 8000588:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800058a:	4b25      	ldr	r3, [pc, #148]	; (8000620 <main+0xec>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <main+0xec>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x466;
 8000596:	4b22      	ldr	r3, [pc, #136]	; (8000620 <main+0xec>)
 8000598:	f240 4266 	movw	r2, #1126	; 0x466
 800059c:	601a      	str	r2, [r3, #0]

  TIM4->CCR1 = 2500;
 800059e:	4b21      	ldr	r3, [pc, #132]	; (8000624 <main+0xf0>)
 80005a0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80005a4:	635a      	str	r2, [r3, #52]	; 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (communication_type) {
 80005a6:	4b20      	ldr	r3, [pc, #128]	; (8000628 <main+0xf4>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d01c      	beq.n	80005e8 <main+0xb4>
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	dc25      	bgt.n	80005fe <main+0xca>
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <main+0x88>
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d00b      	beq.n	80005d2 <main+0x9e>
	  		  if (TIM4->CR1 & TIM_CR1_CEN) {
	  			  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
	  		  }
	  		  break;
	  	  default:
	  		  break;
 80005ba:	e020      	b.n	80005fe <main+0xca>
	  		  if (TIM4->CR1 & TIM_CR1_CEN) {
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <main+0xf0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d01c      	beq.n	8000602 <main+0xce>
	  			  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80005c8:	2100      	movs	r1, #0
 80005ca:	4818      	ldr	r0, [pc, #96]	; (800062c <main+0xf8>)
 80005cc:	f004 fa12 	bl	80049f4 <HAL_TIM_PWM_Stop>
	  		  break;
 80005d0:	e017      	b.n	8000602 <main+0xce>
	  		  if (!(TIM4->CR1 & TIM_CR1_CEN)) {
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <main+0xf0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d113      	bne.n	8000606 <main+0xd2>
	  			  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005de:	2100      	movs	r1, #0
 80005e0:	4812      	ldr	r0, [pc, #72]	; (800062c <main+0xf8>)
 80005e2:	f004 f90d 	bl	8004800 <HAL_TIM_PWM_Start>
	  		  break;
 80005e6:	e00e      	b.n	8000606 <main+0xd2>
	  		  if (TIM4->CR1 & TIM_CR1_CEN) {
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <main+0xf0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00a      	beq.n	800060a <main+0xd6>
	  			  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80005f4:	2100      	movs	r1, #0
 80005f6:	480d      	ldr	r0, [pc, #52]	; (800062c <main+0xf8>)
 80005f8:	f004 f9fc 	bl	80049f4 <HAL_TIM_PWM_Stop>
	  		  break;
 80005fc:	e005      	b.n	800060a <main+0xd6>
	  		  break;
 80005fe:	bf00      	nop
 8000600:	e7d1      	b.n	80005a6 <main+0x72>
	  		  break;
 8000602:	bf00      	nop
 8000604:	e7cf      	b.n	80005a6 <main+0x72>
	  		  break;
 8000606:	bf00      	nop
 8000608:	e7cd      	b.n	80005a6 <main+0x72>
	  		  break;
 800060a:	bf00      	nop
	  switch (communication_type) {
 800060c:	e7cb      	b.n	80005a6 <main+0x72>
 800060e:	bf00      	nop
 8000610:	20000950 	.word	0x20000950
 8000614:	20000360 	.word	0x20000360
 8000618:	08007468 	.word	0x08007468
 800061c:	200001dc 	.word	0x200001dc
 8000620:	20000968 	.word	0x20000968
 8000624:	40000800 	.word	0x40000800
 8000628:	20000960 	.word	0x20000960
 800062c:	200002b4 	.word	0x200002b4

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fed9 	bl	80073f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000654:	f002 fec0 	bl	80033d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	4b2c      	ldr	r3, [pc, #176]	; (800070c <SystemClock_Config+0xdc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a2b      	ldr	r2, [pc, #172]	; (800070c <SystemClock_Config+0xdc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <SystemClock_Config+0xdc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <SystemClock_Config+0xe0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000678:	4a25      	ldr	r2, [pc, #148]	; (8000710 <SystemClock_Config+0xe0>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <SystemClock_Config+0xe0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006a4:	2360      	movs	r3, #96	; 0x60
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 feed 	bl	8003498 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c4:	f000 fc06 	bl	8000ed4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c8:	f002 fe96 	bl	80033f8 <HAL_PWREx_EnableOverDrive>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006d2:	f000 fbff 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2103      	movs	r1, #3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 f97e 	bl	80039f4 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006fe:	f000 fbe9 	bl	8000ed4 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_CAN1_Init+0x64>)
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <MX_CAN1_Init+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_CAN1_Init+0x64>)
 8000720:	2218      	movs	r2, #24
 8000722:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_CAN1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_CAN1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_CAN1_Init+0x64>)
 8000732:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000736:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_CAN1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_CAN1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_CAN1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_CAN1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_CAN1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_CAN1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_CAN1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_CAN1_Init+0x64>)
 8000764:	f000 ffbe 	bl	80016e4 <HAL_CAN_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800076e:	f000 fbb1 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200001dc 	.word	0x200001dc
 800077c:	40006400 	.word	0x40006400

08000780 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_ETH_Init+0x84>)
 8000786:	4a20      	ldr	r2, [pc, #128]	; (8000808 <MX_ETH_Init+0x88>)
 8000788:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_ETH_Init+0x8c>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_ETH_Init+0x8c>)
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_ETH_Init+0x8c>)
 8000798:	22e1      	movs	r2, #225	; 0xe1
 800079a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_ETH_Init+0x8c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_ETH_Init+0x8c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_ETH_Init+0x8c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_ETH_Init+0x84>)
 80007b0:	4a16      	ldr	r2, [pc, #88]	; (800080c <MX_ETH_Init+0x8c>)
 80007b2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ETH_Init+0x84>)
 80007b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007ba:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_ETH_Init+0x84>)
 80007be:	4a14      	ldr	r2, [pc, #80]	; (8000810 <MX_ETH_Init+0x90>)
 80007c0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_ETH_Init+0x84>)
 80007c4:	4a13      	ldr	r2, [pc, #76]	; (8000814 <MX_ETH_Init+0x94>)
 80007c6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_ETH_Init+0x84>)
 80007ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007ce:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_ETH_Init+0x84>)
 80007d2:	f001 ffb3 	bl	800273c <HAL_ETH_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007dc:	f000 fb7a 	bl	8000ed4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007e0:	2238      	movs	r2, #56	; 0x38
 80007e2:	2100      	movs	r1, #0
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <MX_ETH_Init+0x98>)
 80007e6:	f006 fe06 	bl	80073f6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_ETH_Init+0x98>)
 80007ec:	2221      	movs	r2, #33	; 0x21
 80007ee:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_ETH_Init+0x98>)
 80007f2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007f6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_ETH_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000204 	.word	0x20000204
 8000808:	40028000 	.word	0x40028000
 800080c:	20000988 	.word	0x20000988
 8000810:	200000e8 	.word	0x200000e8
 8000814:	20000048 	.word	0x20000048
 8000818:	200001a4 	.word	0x200001a4

0800081c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083c:	463b      	mov	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <MX_TIM4_Init+0xe8>)
 8000850:	4a2d      	ldr	r2, [pc, #180]	; (8000908 <MX_TIM4_Init+0xec>)
 8000852:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 8000854:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <MX_TIM4_Init+0xe8>)
 8000856:	225f      	movs	r2, #95	; 0x5f
 8000858:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085a:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <MX_TIM4_Init+0xe8>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <MX_TIM4_Init+0xe8>)
 8000862:	f241 3287 	movw	r2, #4999	; 0x1387
 8000866:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000868:	4b26      	ldr	r3, [pc, #152]	; (8000904 <MX_TIM4_Init+0xe8>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <MX_TIM4_Init+0xe8>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000874:	4823      	ldr	r0, [pc, #140]	; (8000904 <MX_TIM4_Init+0xe8>)
 8000876:	f003 ff0b 	bl	8004690 <HAL_TIM_Base_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000880:	f000 fb28 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800088a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088e:	4619      	mov	r1, r3
 8000890:	481c      	ldr	r0, [pc, #112]	; (8000904 <MX_TIM4_Init+0xe8>)
 8000892:	f004 fa43 	bl	8004d1c <HAL_TIM_ConfigClockSource>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800089c:	f000 fb1a 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008a0:	4818      	ldr	r0, [pc, #96]	; (8000904 <MX_TIM4_Init+0xe8>)
 80008a2:	f003 ff4c 	bl	800473e <HAL_TIM_PWM_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80008ac:	f000 fb12 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_TIM4_Init+0xe8>)
 80008c0:	f004 fec0 	bl	8005644 <HAL_TIMEx_MasterConfigSynchronization>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80008ca:	f000 fb03 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ce:	2360      	movs	r3, #96	; 0x60
 80008d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	4807      	ldr	r0, [pc, #28]	; (8000904 <MX_TIM4_Init+0xe8>)
 80008e6:	f004 f905 	bl	8004af4 <HAL_TIM_PWM_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80008f0:	f000 faf0 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008f4:	4803      	ldr	r0, [pc, #12]	; (8000904 <MX_TIM4_Init+0xe8>)
 80008f6:	f000 fc6d 	bl	80011d4 <HAL_TIM_MspPostInit>

}
 80008fa:	bf00      	nop
 80008fc:	3738      	adds	r7, #56	; 0x38
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200002b4 	.word	0x200002b4
 8000908:	40000800 	.word	0x40000800

0800090c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_UART4_Init+0x58>)
 8000912:	4a15      	ldr	r2, [pc, #84]	; (8000968 <MX_UART4_Init+0x5c>)
 8000914:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_UART4_Init+0x58>)
 8000918:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800091c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_UART4_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_UART4_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_UART4_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_UART4_Init+0x58>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_UART4_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_UART4_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_UART4_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_UART4_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_UART4_Init+0x58>)
 8000950:	f004 ff06 	bl	8005760 <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 fabb 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000360 	.word	0x20000360
 8000968:	40004c00 	.word	0x40004c00

0800096c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <MX_USART3_UART_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART3_UART_Init+0x58>)
 80009b0:	f004 fed6 	bl	8005760 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 fa8b 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200003e8 	.word	0x200003e8
 80009c8:	40004800 	.word	0x40004800

080009cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	2206      	movs	r2, #6
 80009dc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	f002 fba7 	bl	8003162 <HAL_PCD_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 fa5b 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000470 	.word	0x20000470

08000a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_DMA_Init+0x38>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <MX_DMA_Init+0x38>)
 8000a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_DMA_Init+0x38>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	200b      	movs	r0, #11
 8000a4c:	f001 fac3 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a50:	200b      	movs	r0, #11
 8000a52:	f001 fadc 	bl	800200e <HAL_NVIC_EnableIRQ>

}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	; 0x30
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b47      	ldr	r3, [pc, #284]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a46      	ldr	r2, [pc, #280]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	61bb      	str	r3, [r7, #24]
 8000a90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	4b41      	ldr	r3, [pc, #260]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a40      	ldr	r2, [pc, #256]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a3a      	ldr	r2, [pc, #232]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a34      	ldr	r2, [pc, #208]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a2e      	ldr	r2, [pc, #184]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000ae0:	f043 0308 	orr.w	r3, r3, #8
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000af2:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <MX_GPIO_Init+0x134>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|Blue_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b10:	4822      	ldr	r0, [pc, #136]	; (8000b9c <MX_GPIO_Init+0x138>)
 8000b12:	f002 fb0d 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	4821      	ldr	r0, [pc, #132]	; (8000ba0 <MX_GPIO_Init+0x13c>)
 8000b1c:	f002 fb08 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <MX_GPIO_Init+0x140>)
 8000b38:	f002 f94e 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|Blue_Pin;
 8000b3c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <MX_GPIO_Init+0x138>)
 8000b56:	f002 f93f 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b5a:	2340      	movs	r3, #64	; 0x40
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <MX_GPIO_Init+0x13c>)
 8000b72:	f002 f931 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_GPIO_Init+0x13c>)
 8000b8a:	f002 f925 	bl	8002dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8e:	bf00      	nop
 8000b90:	3730      	adds	r7, #48	; 0x30
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40021800 	.word	0x40021800
 8000ba4:	40020800 	.word	0x40020800

08000ba8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

//usart callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	if (huart == &huart4) { // Check if the callback is for huart4
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a48      	ldr	r2, [pc, #288]	; (8000cd4 <HAL_UART_RxCpltCallback+0x12c>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	f040 8174 	bne.w	8000ea2 <HAL_UART_RxCpltCallback+0x2fa>

		if (rx_data[0] == 'A' && rx_data[1] == 'T') {
 8000bba:	4b47      	ldr	r3, [pc, #284]	; (8000cd8 <HAL_UART_RxCpltCallback+0x130>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b41      	cmp	r3, #65	; 0x41
 8000bc0:	d106      	bne.n	8000bd0 <HAL_UART_RxCpltCallback+0x28>
 8000bc2:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <HAL_UART_RxCpltCallback+0x130>)
 8000bc4:	785b      	ldrb	r3, [r3, #1]
 8000bc6:	2b54      	cmp	r3, #84	; 0x54
 8000bc8:	d102      	bne.n	8000bd0 <HAL_UART_RxCpltCallback+0x28>
			at_found = 1;
 8000bca:	4b44      	ldr	r3, [pc, #272]	; (8000cdc <HAL_UART_RxCpltCallback+0x134>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
		}

		if (at_found) {
 8000bd0:	4b42      	ldr	r3, [pc, #264]	; (8000cdc <HAL_UART_RxCpltCallback+0x134>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	f000 815f 	beq.w	8000e98 <HAL_UART_RxCpltCallback+0x2f0>
			int rx_numbers_index = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]

			for (int i = 0; i <= NUMBERS; i++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	e00e      	b.n	8000c02 <HAL_UART_RxCpltCallback+0x5a>
				if (rx_data[2] == numbers[i]) {
 8000be4:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <HAL_UART_RxCpltCallback+0x130>)
 8000be6:	789a      	ldrb	r2, [r3, #2]
 8000be8:	493d      	ldr	r1, [pc, #244]	; (8000ce0 <HAL_UART_RxCpltCallback+0x138>)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	440b      	add	r3, r1
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d103      	bne.n	8000bfc <HAL_UART_RxCpltCallback+0x54>
					rx_numbers_index++;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
					break;
 8000bfa:	e005      	b.n	8000c08 <HAL_UART_RxCpltCallback+0x60>
			for (int i = 0; i <= NUMBERS; i++) {
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	2b0a      	cmp	r3, #10
 8000c06:	dded      	ble.n	8000be4 <HAL_UART_RxCpltCallback+0x3c>
				}
			}

			if (rx_numbers_index == 1) {
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d114      	bne.n	8000c38 <HAL_UART_RxCpltCallback+0x90>
				for (int i = 0; i <= NUMBERS; i++) {
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	e00e      	b.n	8000c32 <HAL_UART_RxCpltCallback+0x8a>
					if (rx_data[3] == numbers[i]) {
 8000c14:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_UART_RxCpltCallback+0x130>)
 8000c16:	78da      	ldrb	r2, [r3, #3]
 8000c18:	4931      	ldr	r1, [pc, #196]	; (8000ce0 <HAL_UART_RxCpltCallback+0x138>)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	440b      	add	r3, r1
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d103      	bne.n	8000c2c <HAL_UART_RxCpltCallback+0x84>
						rx_numbers_index++;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
						break;
 8000c2a:	e005      	b.n	8000c38 <HAL_UART_RxCpltCallback+0x90>
				for (int i = 0; i <= NUMBERS; i++) {
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2b0a      	cmp	r3, #10
 8000c36:	dded      	ble.n	8000c14 <HAL_UART_RxCpltCallback+0x6c>
					}
				}
			}

			if (rx_numbers_index == 2) {
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d114      	bne.n	8000c68 <HAL_UART_RxCpltCallback+0xc0>
				for (int i = 0; i <= NUMBERS; i++) {
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	e00e      	b.n	8000c62 <HAL_UART_RxCpltCallback+0xba>
					if (rx_data[4] == numbers[i]) {
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <HAL_UART_RxCpltCallback+0x130>)
 8000c46:	791a      	ldrb	r2, [r3, #4]
 8000c48:	4925      	ldr	r1, [pc, #148]	; (8000ce0 <HAL_UART_RxCpltCallback+0x138>)
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	440b      	add	r3, r1
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d103      	bne.n	8000c5c <HAL_UART_RxCpltCallback+0xb4>
						rx_numbers_index++;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
						break;
 8000c5a:	e005      	b.n	8000c68 <HAL_UART_RxCpltCallback+0xc0>
				for (int i = 0; i <= NUMBERS; i++) {
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	2b0a      	cmp	r3, #10
 8000c66:	dded      	ble.n	8000c44 <HAL_UART_RxCpltCallback+0x9c>
					}
				}
			}

			if (rx_numbers_index == 3) {
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d169      	bne.n	8000d42 <HAL_UART_RxCpltCallback+0x19a>

				// percentage of speed 0 - 100 %
				percentageNumber = 100 * ((int)rx_data[2] - 48) + 10 * ((int)rx_data[3] - 48) + ((int)rx_data[4] - 48);
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <HAL_UART_RxCpltCallback+0x130>)
 8000c70:	789b      	ldrb	r3, [r3, #2]
 8000c72:	3b30      	subs	r3, #48	; 0x30
 8000c74:	2264      	movs	r2, #100	; 0x64
 8000c76:	fb02 f103 	mul.w	r1, r2, r3
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_UART_RxCpltCallback+0x130>)
 8000c7c:	78db      	ldrb	r3, [r3, #3]
 8000c7e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	18ca      	adds	r2, r1, r3
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_UART_RxCpltCallback+0x130>)
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	3b30      	subs	r3, #48	; 0x30
 8000c92:	4413      	add	r3, r2
 8000c94:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <HAL_UART_RxCpltCallback+0x13c>)
 8000c96:	6013      	str	r3, [r2, #0]

				if (percentageNumber > 100) {
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_UART_RxCpltCallback+0x13c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b64      	cmp	r3, #100	; 0x64
 8000c9e:	dd0b      	ble.n	8000cb8 <HAL_UART_RxCpltCallback+0x110>
					percentageNumber = 100;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_UART_RxCpltCallback+0x13c>)
 8000ca2:	2264      	movs	r2, #100	; 0x64
 8000ca4:	601a      	str	r2, [r3, #0]
					rx_data[2] = (uint8_t) 49;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_UART_RxCpltCallback+0x130>)
 8000ca8:	2231      	movs	r2, #49	; 0x31
 8000caa:	709a      	strb	r2, [r3, #2]
					rx_data[3] = (uint8_t) 48;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_UART_RxCpltCallback+0x130>)
 8000cae:	2230      	movs	r2, #48	; 0x30
 8000cb0:	70da      	strb	r2, [r3, #3]
					rx_data[4] = (uint8_t) 48;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_UART_RxCpltCallback+0x130>)
 8000cb4:	2230      	movs	r2, #48	; 0x30
 8000cb6:	711a      	strb	r2, [r3, #4]
				}

				txData[0] = percentageNumber;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_UART_RxCpltCallback+0x13c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_UART_RxCpltCallback+0x140>)
 8000cc0:	701a      	strb	r2, [r3, #0]

				// Message for user
				if (rx_data[2] == '0') {
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_UART_RxCpltCallback+0x130>)
 8000cc4:	789b      	ldrb	r3, [r3, #2]
 8000cc6:	2b30      	cmp	r3, #48	; 0x30
 8000cc8:	d112      	bne.n	8000cf0 <HAL_UART_RxCpltCallback+0x148>
					tx_perc[9] = ' ';
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_UART_RxCpltCallback+0x144>)
 8000ccc:	2220      	movs	r2, #32
 8000cce:	725a      	strb	r2, [r3, #9]
 8000cd0:	e012      	b.n	8000cf8 <HAL_UART_RxCpltCallback+0x150>
 8000cd2:	bf00      	nop
 8000cd4:	20000360 	.word	0x20000360
 8000cd8:	20000950 	.word	0x20000950
 8000cdc:	20000958 	.word	0x20000958
 8000ce0:	0800747c 	.word	0x0800747c
 8000ce4:	2000095c 	.word	0x2000095c
 8000ce8:	20000980 	.word	0x20000980
 8000cec:	20000000 	.word	0x20000000
				} else {
					tx_perc[9] = rx_data[2];
 8000cf0:	4b6e      	ldr	r3, [pc, #440]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000cf2:	789a      	ldrb	r2, [r3, #2]
 8000cf4:	4b6e      	ldr	r3, [pc, #440]	; (8000eb0 <HAL_UART_RxCpltCallback+0x308>)
 8000cf6:	725a      	strb	r2, [r3, #9]
				}
				tx_perc[10] = rx_data[3];
 8000cf8:	4b6c      	ldr	r3, [pc, #432]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000cfa:	78da      	ldrb	r2, [r3, #3]
 8000cfc:	4b6c      	ldr	r3, [pc, #432]	; (8000eb0 <HAL_UART_RxCpltCallback+0x308>)
 8000cfe:	729a      	strb	r2, [r3, #10]
				tx_perc[11] = rx_data[4];
 8000d00:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000d02:	791a      	ldrb	r2, [r3, #4]
 8000d04:	4b6a      	ldr	r3, [pc, #424]	; (8000eb0 <HAL_UART_RxCpltCallback+0x308>)
 8000d06:	72da      	strb	r2, [r3, #11]

				HAL_UART_Transmit(&huart4, tx_perc, TX_PERC, UART_TIMEOUT);
 8000d08:	230f      	movs	r3, #15
 8000d0a:	2211      	movs	r2, #17
 8000d0c:	4968      	ldr	r1, [pc, #416]	; (8000eb0 <HAL_UART_RxCpltCallback+0x308>)
 8000d0e:	4869      	ldr	r0, [pc, #420]	; (8000eb4 <HAL_UART_RxCpltCallback+0x30c>)
 8000d10:	f004 fd74 	bl	80057fc <HAL_UART_Transmit>

				// Duty
				TIM4->CCR1 = 4000 * percentageNumber/100 + 500;
 8000d14:	4b68      	ldr	r3, [pc, #416]	; (8000eb8 <HAL_UART_RxCpltCallback+0x310>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000d24:	4b65      	ldr	r3, [pc, #404]	; (8000ebc <HAL_UART_RxCpltCallback+0x314>)
 8000d26:	635a      	str	r2, [r3, #52]	; 0x34
				test = 4000 * percentageNumber/100 + 500;
 8000d28:	4b63      	ldr	r3, [pc, #396]	; (8000eb8 <HAL_UART_RxCpltCallback+0x310>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d38:	4a61      	ldr	r2, [pc, #388]	; (8000ec0 <HAL_UART_RxCpltCallback+0x318>)
 8000d3a:	6013      	str	r3, [r2, #0]

				at_found = 0;
 8000d3c:	4b61      	ldr	r3, [pc, #388]	; (8000ec4 <HAL_UART_RxCpltCallback+0x31c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
			}

			if (rx_data[2] == 'N' && rx_data[3] == 'O' && rx_data[4] == 'N') {
 8000d42:	4b5a      	ldr	r3, [pc, #360]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000d44:	789b      	ldrb	r3, [r3, #2]
 8000d46:	2b4e      	cmp	r3, #78	; 0x4e
 8000d48:	d12e      	bne.n	8000da8 <HAL_UART_RxCpltCallback+0x200>
 8000d4a:	4b58      	ldr	r3, [pc, #352]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000d4c:	78db      	ldrb	r3, [r3, #3]
 8000d4e:	2b4f      	cmp	r3, #79	; 0x4f
 8000d50:	d12a      	bne.n	8000da8 <HAL_UART_RxCpltCallback+0x200>
 8000d52:	4b56      	ldr	r3, [pc, #344]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000d54:	791b      	ldrb	r3, [r3, #4]
 8000d56:	2b4e      	cmp	r3, #78	; 0x4e
 8000d58:	d126      	bne.n	8000da8 <HAL_UART_RxCpltCallback+0x200>
				communication_type = NONE;
 8000d5a:	4b5b      	ldr	r3, [pc, #364]	; (8000ec8 <HAL_UART_RxCpltCallback+0x320>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]

				tx_type[9] = rx_data[2];
 8000d60:	4b52      	ldr	r3, [pc, #328]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000d62:	789a      	ldrb	r2, [r3, #2]
 8000d64:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000d66:	725a      	strb	r2, [r3, #9]
				tx_type[10] = rx_data[3];
 8000d68:	4b50      	ldr	r3, [pc, #320]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000d6a:	78da      	ldrb	r2, [r3, #3]
 8000d6c:	4b57      	ldr	r3, [pc, #348]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000d6e:	729a      	strb	r2, [r3, #10]
				tx_type[11] = rx_data[4];
 8000d70:	4b4e      	ldr	r3, [pc, #312]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000d72:	791a      	ldrb	r2, [r3, #4]
 8000d74:	4b55      	ldr	r3, [pc, #340]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000d76:	72da      	strb	r2, [r3, #11]
				tx_type[12] = 'E';
 8000d78:	4b54      	ldr	r3, [pc, #336]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000d7a:	2245      	movs	r2, #69	; 0x45
 8000d7c:	731a      	strb	r2, [r3, #12]

				tx_ask[10] = rx_data[2];
 8000d7e:	4b4b      	ldr	r3, [pc, #300]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000d80:	789a      	ldrb	r2, [r3, #2]
 8000d82:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000d84:	729a      	strb	r2, [r3, #10]
				tx_ask[11] = rx_data[3];
 8000d86:	4b49      	ldr	r3, [pc, #292]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000d88:	78da      	ldrb	r2, [r3, #3]
 8000d8a:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000d8c:	72da      	strb	r2, [r3, #11]
				tx_ask[12] = rx_data[4];
 8000d8e:	4b47      	ldr	r3, [pc, #284]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000d90:	791a      	ldrb	r2, [r3, #4]
 8000d92:	4b4f      	ldr	r3, [pc, #316]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000d94:	731a      	strb	r2, [r3, #12]
				tx_ask[13] = 'E';
 8000d96:	4b4e      	ldr	r3, [pc, #312]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000d98:	2245      	movs	r2, #69	; 0x45
 8000d9a:	735a      	strb	r2, [r3, #13]

				HAL_UART_Transmit(&huart4, tx_type, TX_TYPE, UART_TIMEOUT);
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	2211      	movs	r2, #17
 8000da0:	494a      	ldr	r1, [pc, #296]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000da2:	4844      	ldr	r0, [pc, #272]	; (8000eb4 <HAL_UART_RxCpltCallback+0x30c>)
 8000da4:	f004 fd2a 	bl	80057fc <HAL_UART_Transmit>
			}
			if (rx_data[2] == 'P' && rx_data[3] == 'W' && rx_data[4] == 'M') {
 8000da8:	4b40      	ldr	r3, [pc, #256]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000daa:	789b      	ldrb	r3, [r3, #2]
 8000dac:	2b50      	cmp	r3, #80	; 0x50
 8000dae:	d12e      	bne.n	8000e0e <HAL_UART_RxCpltCallback+0x266>
 8000db0:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000db2:	78db      	ldrb	r3, [r3, #3]
 8000db4:	2b57      	cmp	r3, #87	; 0x57
 8000db6:	d12a      	bne.n	8000e0e <HAL_UART_RxCpltCallback+0x266>
 8000db8:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000dba:	791b      	ldrb	r3, [r3, #4]
 8000dbc:	2b4d      	cmp	r3, #77	; 0x4d
 8000dbe:	d126      	bne.n	8000e0e <HAL_UART_RxCpltCallback+0x266>
				communication_type = PWM;
 8000dc0:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <HAL_UART_RxCpltCallback+0x320>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]

				tx_type[9] = rx_data[2];
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000dc8:	789a      	ldrb	r2, [r3, #2]
 8000dca:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000dcc:	725a      	strb	r2, [r3, #9]
				tx_type[10] = rx_data[3];
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000dd0:	78da      	ldrb	r2, [r3, #3]
 8000dd2:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000dd4:	729a      	strb	r2, [r3, #10]
				tx_type[11] = rx_data[4];
 8000dd6:	4b35      	ldr	r3, [pc, #212]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000dd8:	791a      	ldrb	r2, [r3, #4]
 8000dda:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000ddc:	72da      	strb	r2, [r3, #11]
				tx_type[12] = ' ';
 8000dde:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000de0:	2220      	movs	r2, #32
 8000de2:	731a      	strb	r2, [r3, #12]

				tx_ask[10] = rx_data[2];
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000de6:	789a      	ldrb	r2, [r3, #2]
 8000de8:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000dea:	729a      	strb	r2, [r3, #10]
				tx_ask[11] = rx_data[3];
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000dee:	78da      	ldrb	r2, [r3, #3]
 8000df0:	4b37      	ldr	r3, [pc, #220]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000df2:	72da      	strb	r2, [r3, #11]
				tx_ask[12] = rx_data[4];
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000df6:	791a      	ldrb	r2, [r3, #4]
 8000df8:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000dfa:	731a      	strb	r2, [r3, #12]
				tx_ask[13] = ' ';
 8000dfc:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000dfe:	2220      	movs	r2, #32
 8000e00:	735a      	strb	r2, [r3, #13]

				HAL_UART_Transmit(&huart4, tx_type, TX_TYPE, UART_TIMEOUT);
 8000e02:	230f      	movs	r3, #15
 8000e04:	2211      	movs	r2, #17
 8000e06:	4931      	ldr	r1, [pc, #196]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000e08:	482a      	ldr	r0, [pc, #168]	; (8000eb4 <HAL_UART_RxCpltCallback+0x30c>)
 8000e0a:	f004 fcf7 	bl	80057fc <HAL_UART_Transmit>
			}
			if (rx_data[2] == 'C' && rx_data[3] == 'A' && rx_data[4] == 'N') {
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	2b43      	cmp	r3, #67	; 0x43
 8000e14:	d12e      	bne.n	8000e74 <HAL_UART_RxCpltCallback+0x2cc>
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e18:	78db      	ldrb	r3, [r3, #3]
 8000e1a:	2b41      	cmp	r3, #65	; 0x41
 8000e1c:	d12a      	bne.n	8000e74 <HAL_UART_RxCpltCallback+0x2cc>
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e20:	791b      	ldrb	r3, [r3, #4]
 8000e22:	2b4e      	cmp	r3, #78	; 0x4e
 8000e24:	d126      	bne.n	8000e74 <HAL_UART_RxCpltCallback+0x2cc>
				communication_type = CAN;
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <HAL_UART_RxCpltCallback+0x320>)
 8000e28:	2202      	movs	r2, #2
 8000e2a:	701a      	strb	r2, [r3, #0]
				tx_type[9] = rx_data[2];
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e2e:	789a      	ldrb	r2, [r3, #2]
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000e32:	725a      	strb	r2, [r3, #9]
				tx_type[10] = rx_data[3];
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e36:	78da      	ldrb	r2, [r3, #3]
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000e3a:	729a      	strb	r2, [r3, #10]
				tx_type[11] = rx_data[4];
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e3e:	791a      	ldrb	r2, [r3, #4]
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000e42:	72da      	strb	r2, [r3, #11]
				tx_type[12] = ' ';
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000e46:	2220      	movs	r2, #32
 8000e48:	731a      	strb	r2, [r3, #12]

				tx_ask[10] = rx_data[2];
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e4c:	789a      	ldrb	r2, [r3, #2]
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000e50:	729a      	strb	r2, [r3, #10]
				tx_ask[11] = rx_data[3];
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e54:	78da      	ldrb	r2, [r3, #3]
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000e58:	72da      	strb	r2, [r3, #11]
				tx_ask[12] = rx_data[4];
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e5c:	791a      	ldrb	r2, [r3, #4]
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000e60:	731a      	strb	r2, [r3, #12]
				tx_ask[13] = ' ';
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000e64:	2220      	movs	r2, #32
 8000e66:	735a      	strb	r2, [r3, #13]

				HAL_UART_Transmit(&huart4, tx_type, TX_TYPE, UART_TIMEOUT);
 8000e68:	230f      	movs	r3, #15
 8000e6a:	2211      	movs	r2, #17
 8000e6c:	4917      	ldr	r1, [pc, #92]	; (8000ecc <HAL_UART_RxCpltCallback+0x324>)
 8000e6e:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <HAL_UART_RxCpltCallback+0x30c>)
 8000e70:	f004 fcc4 	bl	80057fc <HAL_UART_Transmit>
			}

			if (rx_data[2] == 'W' && rx_data[3] == 'H' && rx_data[4] == 'T') {
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e76:	789b      	ldrb	r3, [r3, #2]
 8000e78:	2b57      	cmp	r3, #87	; 0x57
 8000e7a:	d10d      	bne.n	8000e98 <HAL_UART_RxCpltCallback+0x2f0>
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e7e:	78db      	ldrb	r3, [r3, #3]
 8000e80:	2b48      	cmp	r3, #72	; 0x48
 8000e82:	d109      	bne.n	8000e98 <HAL_UART_RxCpltCallback+0x2f0>
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e86:	791b      	ldrb	r3, [r3, #4]
 8000e88:	2b54      	cmp	r3, #84	; 0x54
 8000e8a:	d105      	bne.n	8000e98 <HAL_UART_RxCpltCallback+0x2f0>
				HAL_UART_Transmit(&huart4, tx_ask, TX_ASK, UART_TIMEOUT);
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	2211      	movs	r2, #17
 8000e90:	490f      	ldr	r1, [pc, #60]	; (8000ed0 <HAL_UART_RxCpltCallback+0x328>)
 8000e92:	4808      	ldr	r0, [pc, #32]	; (8000eb4 <HAL_UART_RxCpltCallback+0x30c>)
 8000e94:	f004 fcb2 	bl	80057fc <HAL_UART_Transmit>
			}
		}
		HAL_UART_Receive_IT(&huart4, rx_data, RX_DATA);
 8000e98:	2205      	movs	r2, #5
 8000e9a:	4904      	ldr	r1, [pc, #16]	; (8000eac <HAL_UART_RxCpltCallback+0x304>)
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_UART_RxCpltCallback+0x30c>)
 8000e9e:	f004 fd36 	bl	800590e <HAL_UART_Receive_IT>
	}


}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000950 	.word	0x20000950
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000360 	.word	0x20000360
 8000eb8:	2000095c 	.word	0x2000095c
 8000ebc:	40000800 	.word	0x40000800
 8000ec0:	20000964 	.word	0x20000964
 8000ec4:	20000958 	.word	0x20000958
 8000ec8:	20000960 	.word	0x20000960
 8000ecc:	20000014 	.word	0x20000014
 8000ed0:	20000028 	.word	0x20000028

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x44>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_MspInit+0x44>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_MspInit+0x44>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_MspInit+0x44>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_MspInit+0x44>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_MspInit+0x44>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <HAL_CAN_MspInit+0x8c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d12f      	bne.n	8000faa <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f8a:	2309      	movs	r3, #9
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <HAL_CAN_MspInit+0x94>)
 8000f96:	f001 ff1f 	bl	8002dd8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f001 f819 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fa4:	2014      	movs	r0, #20
 8000fa6:	f001 f832 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40006400 	.word	0x40006400
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020c00 	.word	0x40020c00

08000fc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08e      	sub	sp, #56	; 0x38
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a4e      	ldr	r2, [pc, #312]	; (8001118 <HAL_ETH_MspInit+0x158>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	f040 8096 	bne.w	8001110 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000fe4:	4b4d      	ldr	r3, [pc, #308]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8000fea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff8:	623b      	str	r3, [r7, #32]
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a46      	ldr	r2, [pc, #280]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	4b41      	ldr	r3, [pc, #260]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4a40      	ldr	r2, [pc, #256]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800101a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800101e:	6313      	str	r3, [r2, #48]	; 0x30
 8001020:	4b3e      	ldr	r3, [pc, #248]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	4b3b      	ldr	r3, [pc, #236]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a3a      	ldr	r2, [pc, #232]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b35      	ldr	r3, [pc, #212]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	4a34      	ldr	r2, [pc, #208]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
 8001050:	4b32      	ldr	r3, [pc, #200]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	4a2e      	ldr	r2, [pc, #184]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	6313      	str	r3, [r2, #48]	; 0x30
 8001068:	4b2c      	ldr	r3, [pc, #176]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a28      	ldr	r2, [pc, #160]	; (800111c <HAL_ETH_MspInit+0x15c>)
 800107a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <HAL_ETH_MspInit+0x15c>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800108c:	2332      	movs	r3, #50	; 0x32
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800109c:	230b      	movs	r3, #11
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	481e      	ldr	r0, [pc, #120]	; (8001120 <HAL_ETH_MspInit+0x160>)
 80010a8:	f001 fe96 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010ac:	2386      	movs	r3, #134	; 0x86
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010bc:	230b      	movs	r3, #11
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	4817      	ldr	r0, [pc, #92]	; (8001124 <HAL_ETH_MspInit+0x164>)
 80010c8:	f001 fe86 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010de:	230b      	movs	r3, #11
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	480f      	ldr	r0, [pc, #60]	; (8001128 <HAL_ETH_MspInit+0x168>)
 80010ea:	f001 fe75 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001100:	230b      	movs	r3, #11
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	4619      	mov	r1, r3
 800110a:	4808      	ldr	r0, [pc, #32]	; (800112c <HAL_ETH_MspInit+0x16c>)
 800110c:	f001 fe64 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	3738      	adds	r7, #56	; 0x38
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40028000 	.word	0x40028000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020800 	.word	0x40020800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40021800 	.word	0x40021800

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <HAL_TIM_Base_MspInit+0x94>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d13b      	bne.n	80011ba <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <HAL_TIM_Base_MspInit+0x98>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a20      	ldr	r2, [pc, #128]	; (80011c8 <HAL_TIM_Base_MspInit+0x98>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_TIM_Base_MspInit+0x98>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 800115c:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <HAL_TIM_Base_MspInit+0xa0>)
 800115e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 8001162:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001166:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 800116a:	2240      	movs	r2, #64	; 0x40
 800116c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 8001176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 800117e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001182:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 8001186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800119e:	480b      	ldr	r0, [pc, #44]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 80011a0:	f000 ff50 	bl	8002044 <HAL_DMA_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 80011aa:	f7ff fe93 	bl	8000ed4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <HAL_TIM_Base_MspInit+0x9c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40000800 	.word	0x40000800
 80011c8:	40023800 	.word	0x40023800
 80011cc:	20000300 	.word	0x20000300
 80011d0:	40026010 	.word	0x40026010

080011d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_TIM_MspPostInit+0x64>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d11c      	bne.n	8001230 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_TIM_MspPostInit+0x68>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_TIM_MspPostInit+0x68>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_TIM_MspPostInit+0x68>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800120e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001212:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_TIM_MspPostInit+0x6c>)
 800122c:	f001 fdd4 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40000800 	.word	0x40000800
 800123c:	40023800 	.word	0x40023800
 8001240:	40020c00 	.word	0x40020c00

08001244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b0      	sub	sp, #192	; 0xc0
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	2290      	movs	r2, #144	; 0x90
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f006 f8c6 	bl	80073f6 <memset>
  if(huart->Instance==UART4)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a58      	ldr	r2, [pc, #352]	; (80013d0 <HAL_UART_MspInit+0x18c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d166      	bne.n	8001342 <HAL_UART_MspInit+0xfe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001278:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800127a:	2300      	movs	r3, #0
 800127c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fddc 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800128e:	f7ff fe21 	bl	8000ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001292:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a4f      	ldr	r2, [pc, #316]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a49      	ldr	r2, [pc, #292]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a43      	ldr	r2, [pc, #268]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <HAL_UART_MspInit+0x190>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012da:	2301      	movs	r3, #1
 80012dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012f2:	2308      	movs	r3, #8
 80012f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012fc:	4619      	mov	r1, r3
 80012fe:	4836      	ldr	r0, [pc, #216]	; (80013d8 <HAL_UART_MspInit+0x194>)
 8001300:	f001 fd6a 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800131e:	2308      	movs	r3, #8
 8001320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001324:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001328:	4619      	mov	r1, r3
 800132a:	482c      	ldr	r0, [pc, #176]	; (80013dc <HAL_UART_MspInit+0x198>)
 800132c:	f001 fd54 	bl	8002dd8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2034      	movs	r0, #52	; 0x34
 8001336:	f000 fe4e 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800133a:	2034      	movs	r0, #52	; 0x34
 800133c:	f000 fe67 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001340:	e041      	b.n	80013c6 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a26      	ldr	r2, [pc, #152]	; (80013e0 <HAL_UART_MspInit+0x19c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d13c      	bne.n	80013c6 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800134c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001350:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001352:	2300      	movs	r3, #0
 8001354:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fd70 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_UART_MspInit+0x126>
      Error_Handler();
 8001366:	f7ff fdb5 	bl	8000ed4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_UART_MspInit+0x190>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_UART_MspInit+0x190>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800139a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800139e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013b4:	2307      	movs	r3, #7
 80013b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013be:	4619      	mov	r1, r3
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <HAL_UART_MspInit+0x1a0>)
 80013c2:	f001 fd09 	bl	8002dd8 <HAL_GPIO_Init>
}
 80013c6:	bf00      	nop
 80013c8:	37c0      	adds	r7, #192	; 0xc0
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40004c00 	.word	0x40004c00
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40004800 	.word	0x40004800
 80013e4:	40020c00 	.word	0x40020c00

080013e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ae      	sub	sp, #184	; 0xb8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2290      	movs	r2, #144	; 0x90
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f005 fff4 	bl	80073f6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001416:	d159      	bne.n	80014cc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001418:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800141c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fd09 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001434:	f7ff fd4e 	bl	8000ed4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6313      	str	r3, [r2, #48]	; 0x30
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001450:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800146a:	230a      	movs	r3, #10
 800146c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001474:	4619      	mov	r1, r3
 8001476:	4818      	ldr	r0, [pc, #96]	; (80014d8 <HAL_PCD_MspInit+0xf0>)
 8001478:	f001 fcae 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800147c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001494:	4619      	mov	r1, r3
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <HAL_PCD_MspInit+0xf0>)
 8001498:	f001 fc9e 	bl	8002dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 800149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a6:	6353      	str	r3, [r2, #52]	; 0x34
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014be:	6453      	str	r3, [r2, #68]	; 0x44
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	37b8      	adds	r7, #184	; 0xb8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e0:	e7fe      	b.n	80014e0 <NMI_Handler+0x4>

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001528:	f000 f898 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <DMA1_Stream0_IRQHandler+0x10>)
 8001536:	f000 fec5 	bl	80022c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000300 	.word	0x20000300

08001544 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <CAN1_RX0_IRQHandler+0x10>)
 800154a:	f000 fa30 	bl	80019ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200001dc 	.word	0x200001dc

08001558 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <UART4_IRQHandler+0x10>)
 800155e:	f004 fa1b 	bl	8005998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000360 	.word	0x20000360

0800156c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001594:	f7ff ffea 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	; (80015dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015be:	f005 ff23 	bl	8007408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c2:	f7fe ffb7 	bl	8000534 <main>
  bx  lr    
 80015c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80015d4:	080074b8 	.word	0x080074b8
  ldr r2, =_sbss
 80015d8:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80015dc:	20000994 	.word	0x20000994

080015e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC_IRQHandler>

080015e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e6:	2003      	movs	r0, #3
 80015e8:	f000 fcea 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 f805 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f2:	f7ff fc75 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fd05 	bl	800202a <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001638:	f000 fccd 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	2000003c 	.word	0x2000003c
 8001654:	20000044 	.word	0x20000044
 8001658:	20000040 	.word	0x20000040

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000044 	.word	0x20000044
 8001680:	20000990 	.word	0x20000990

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000990 	.word	0x20000990

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000044 	.word	0x20000044

080016e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0ed      	b.n	80018d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d102      	bne.n	8001708 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fc10 	bl	8000f28 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001718:	f7ff ffb4 	bl	8001684 <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800171e:	e012      	b.n	8001746 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001720:	f7ff ffb0 	bl	8001684 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b0a      	cmp	r3, #10
 800172c:	d90b      	bls.n	8001746 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2205      	movs	r2, #5
 800173e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0c5      	b.n	80018d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0e5      	beq.n	8001720 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0202 	bic.w	r2, r2, #2
 8001762:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001764:	f7ff ff8e 	bl	8001684 <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800176a:	e012      	b.n	8001792 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800176c:	f7ff ff8a 	bl	8001684 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b0a      	cmp	r3, #10
 8001778:	d90b      	bls.n	8001792 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2205      	movs	r2, #5
 800178a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e09f      	b.n	80018d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1e5      	bne.n	800176c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7e1b      	ldrb	r3, [r3, #24]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d108      	bne.n	80017ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e007      	b.n	80017ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7e5b      	ldrb	r3, [r3, #25]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d108      	bne.n	80017e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e007      	b.n	80017f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7e9b      	ldrb	r3, [r3, #26]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d108      	bne.n	800180e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0220 	orr.w	r2, r2, #32
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	e007      	b.n	800181e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0220 	bic.w	r2, r2, #32
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7edb      	ldrb	r3, [r3, #27]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d108      	bne.n	8001838 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0210 	bic.w	r2, r2, #16
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e007      	b.n	8001848 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0210 	orr.w	r2, r2, #16
 8001846:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7f1b      	ldrb	r3, [r3, #28]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d108      	bne.n	8001862 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0208 	orr.w	r2, r2, #8
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e007      	b.n	8001872 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0208 	bic.w	r2, r2, #8
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7f5b      	ldrb	r3, [r3, #29]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0204 	orr.w	r2, r2, #4
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e007      	b.n	800189c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0204 	bic.w	r2, r2, #4
 800189a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	ea42 0103 	orr.w	r1, r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	1e5a      	subs	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d12e      	bne.n	800194c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2202      	movs	r2, #2
 80018f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001906:	f7ff febd 	bl	8001684 <HAL_GetTick>
 800190a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800190c:	e012      	b.n	8001934 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800190e:	f7ff feb9 	bl	8001684 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b0a      	cmp	r3, #10
 800191a:	d90b      	bls.n	8001934 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2205      	movs	r2, #5
 800192c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e012      	b.n	800195a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1e5      	bne.n	800190e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	e006      	b.n	800195a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
  }
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001972:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d002      	beq.n	8001980 <HAL_CAN_ActivateNotification+0x1e>
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d109      	bne.n	8001994 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6959      	ldr	r1, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	e006      	b.n	80019a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
  }
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b08a      	sub	sp, #40	; 0x28
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d07c      	beq.n	8001aee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d023      	beq.n	8001a46 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f983 	bl	8001d1c <HAL_CAN_TxMailbox0CompleteCallback>
 8001a16:	e016      	b.n	8001a46 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2a:	e00c      	b.n	8001a46 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	e002      	b.n	8001a46 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f989 	bl	8001d58 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d024      	beq.n	8001a9a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f963 	bl	8001d30 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a6a:	e016      	b.n	8001a9a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d004      	beq.n	8001a80 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7e:	e00c      	b.n	8001a9a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
 8001a92:	e002      	b.n	8001a9a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f969 	bl	8001d6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d024      	beq.n	8001aee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f943 	bl	8001d44 <HAL_CAN_TxMailbox2CompleteCallback>
 8001abe:	e016      	b.n	8001aee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad2:	e00c      	b.n	8001aee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae6:	e002      	b.n	8001aee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f949 	bl	8001d80 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00c      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2210      	movs	r2, #16
 8001b10:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00b      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f93a 	bl	8001da8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f921 	bl	8001d94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00c      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d007      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2210      	movs	r2, #16
 8001b74:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00b      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2208      	movs	r2, #8
 8001b90:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f91c 	bl	8001dd0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f903 	bl	8001dbc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00b      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2210      	movs	r2, #16
 8001bd0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f906 	bl	8001de4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f8ff 	bl	8001df8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d07b      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d072      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d043      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03e      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c7c:	2b60      	cmp	r3, #96	; 0x60
 8001c7e:	d02b      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x32a>
 8001c80:	2b60      	cmp	r3, #96	; 0x60
 8001c82:	d82e      	bhi.n	8001ce2 <HAL_CAN_IRQHandler+0x334>
 8001c84:	2b50      	cmp	r3, #80	; 0x50
 8001c86:	d022      	beq.n	8001cce <HAL_CAN_IRQHandler+0x320>
 8001c88:	2b50      	cmp	r3, #80	; 0x50
 8001c8a:	d82a      	bhi.n	8001ce2 <HAL_CAN_IRQHandler+0x334>
 8001c8c:	2b40      	cmp	r3, #64	; 0x40
 8001c8e:	d019      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x316>
 8001c90:	2b40      	cmp	r3, #64	; 0x40
 8001c92:	d826      	bhi.n	8001ce2 <HAL_CAN_IRQHandler+0x334>
 8001c94:	2b30      	cmp	r3, #48	; 0x30
 8001c96:	d010      	beq.n	8001cba <HAL_CAN_IRQHandler+0x30c>
 8001c98:	2b30      	cmp	r3, #48	; 0x30
 8001c9a:	d822      	bhi.n	8001ce2 <HAL_CAN_IRQHandler+0x334>
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d002      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x2f8>
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d005      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ca4:	e01d      	b.n	8001ce2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cae:	e019      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	f043 0310 	orr.w	r3, r3, #16
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cb8:	e014      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	f043 0320 	orr.w	r3, r3, #32
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cc2:	e00f      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ccc:	e00a      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cd6:	e005      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ce0:	e000      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ce2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cf2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f87c 	bl	8001e0c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d14:	bf00      	nop
 8001d16:	3728      	adds	r7, #40	; 0x28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <__NVIC_SetPriorityGrouping+0x40>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x40>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00
 8001e64:	05fa0000 	.word	0x05fa0000

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff3e 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff8e 	bl	8001f14 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5d 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff31 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff fb18 	bl	8001684 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e099      	b.n	8002194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002080:	e00f      	b.n	80020a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002082:	f7ff faff 	bl	8001684 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b05      	cmp	r3, #5
 800208e:	d908      	bls.n	80020a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2203      	movs	r2, #3
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e078      	b.n	8002194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1e8      	bne.n	8002082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4b38      	ldr	r3, [pc, #224]	; (800219c <HAL_DMA_Init+0x158>)
 80020bc:	4013      	ands	r3, r2
 80020be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d107      	bne.n	800210c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4313      	orrs	r3, r2
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f023 0307 	bic.w	r3, r3, #7
 8002122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	4313      	orrs	r3, r2
 800212c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	2b04      	cmp	r3, #4
 8002134:	d117      	bne.n	8002166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00e      	beq.n	8002166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fa7b 	bl	8002644 <DMA_CheckFifoParam>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002162:	2301      	movs	r3, #1
 8002164:	e016      	b.n	8002194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fa32 	bl	80025d8 <DMA_CalcBaseAndBitshift>
 8002174:	4603      	mov	r3, r0
 8002176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	223f      	movs	r2, #63	; 0x3f
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	e010803f 	.word	0xe010803f

080021a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021ae:	f7ff fa69 	bl	8001684 <HAL_GetTick>
 80021b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d008      	beq.n	80021d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e052      	b.n	8002278 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0216 	bic.w	r2, r2, #22
 80021e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <HAL_DMA_Abort+0x62>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0208 	bic.w	r2, r2, #8
 8002210:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002222:	e013      	b.n	800224c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002224:	f7ff fa2e 	bl	8001684 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b05      	cmp	r3, #5
 8002230:	d90c      	bls.n	800224c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2203      	movs	r2, #3
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e015      	b.n	8002278 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e4      	bne.n	8002224 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	223f      	movs	r2, #63	; 0x3f
 8002260:	409a      	lsls	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d004      	beq.n	800229e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00c      	b.n	80022b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2205      	movs	r2, #5
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80022d0:	4b8e      	ldr	r3, [pc, #568]	; (800250c <HAL_DMA_IRQHandler+0x248>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a8e      	ldr	r2, [pc, #568]	; (8002510 <HAL_DMA_IRQHandler+0x24c>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0a9b      	lsrs	r3, r3, #10
 80022dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	2208      	movs	r2, #8
 80022f0:	409a      	lsls	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d01a      	beq.n	8002330 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d013      	beq.n	8002330 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0204 	bic.w	r2, r2, #4
 8002316:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	2208      	movs	r2, #8
 800231e:	409a      	lsls	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	2201      	movs	r2, #1
 8002336:	409a      	lsls	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d012      	beq.n	8002366 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2201      	movs	r2, #1
 8002354:	409a      	lsls	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	f043 0202 	orr.w	r2, r3, #2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	2204      	movs	r2, #4
 800236c:	409a      	lsls	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d012      	beq.n	800239c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	2204      	movs	r2, #4
 800238a:	409a      	lsls	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	f043 0204 	orr.w	r2, r3, #4
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a0:	2210      	movs	r2, #16
 80023a2:	409a      	lsls	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d043      	beq.n	8002434 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d03c      	beq.n	8002434 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	2210      	movs	r2, #16
 80023c0:	409a      	lsls	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d018      	beq.n	8002406 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d108      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d024      	beq.n	8002434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	4798      	blx	r3
 80023f2:	e01f      	b.n	8002434 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01b      	beq.n	8002434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
 8002404:	e016      	b.n	8002434 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d107      	bne.n	8002424 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0208 	bic.w	r2, r2, #8
 8002422:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	2220      	movs	r2, #32
 800243a:	409a      	lsls	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 808f 	beq.w	8002564 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8087 	beq.w	8002564 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	2220      	movs	r2, #32
 800245c:	409a      	lsls	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b05      	cmp	r3, #5
 800246c:	d136      	bne.n	80024dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0216 	bic.w	r2, r2, #22
 800247c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800248c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d103      	bne.n	800249e <HAL_DMA_IRQHandler+0x1da>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0208 	bic.w	r2, r2, #8
 80024ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	223f      	movs	r2, #63	; 0x3f
 80024b4:	409a      	lsls	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d07e      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
        }
        return;
 80024da:	e079      	b.n	80025d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d01d      	beq.n	8002526 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10d      	bne.n	8002514 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d031      	beq.n	8002564 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
 8002508:	e02c      	b.n	8002564 <HAL_DMA_IRQHandler+0x2a0>
 800250a:	bf00      	nop
 800250c:	2000003c 	.word	0x2000003c
 8002510:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	2b00      	cmp	r3, #0
 800251a:	d023      	beq.n	8002564 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4798      	blx	r3
 8002524:	e01e      	b.n	8002564 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10f      	bne.n	8002554 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0210 	bic.w	r2, r2, #16
 8002542:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	2b00      	cmp	r3, #0
 800256a:	d032      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d022      	beq.n	80025be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2205      	movs	r2, #5
 800257c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	3301      	adds	r3, #1
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	429a      	cmp	r2, r3
 800259a:	d307      	bcc.n	80025ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f2      	bne.n	8002590 <HAL_DMA_IRQHandler+0x2cc>
 80025aa:	e000      	b.n	80025ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	4798      	blx	r3
 80025ce:	e000      	b.n	80025d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025d0:	bf00      	nop
    }
  }
}
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	3b10      	subs	r3, #16
 80025e8:	4a13      	ldr	r2, [pc, #76]	; (8002638 <DMA_CalcBaseAndBitshift+0x60>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <DMA_CalcBaseAndBitshift+0x64>)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4413      	add	r3, r2
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d908      	bls.n	8002618 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <DMA_CalcBaseAndBitshift+0x68>)
 800260e:	4013      	ands	r3, r2
 8002610:	1d1a      	adds	r2, r3, #4
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	659a      	str	r2, [r3, #88]	; 0x58
 8002616:	e006      	b.n	8002626 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <DMA_CalcBaseAndBitshift+0x68>)
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	aaaaaaab 	.word	0xaaaaaaab
 800263c:	080074a0 	.word	0x080074a0
 8002640:	fffffc00 	.word	0xfffffc00

08002644 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d11f      	bne.n	800269e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d856      	bhi.n	8002712 <DMA_CheckFifoParam+0xce>
 8002664:	a201      	add	r2, pc, #4	; (adr r2, 800266c <DMA_CheckFifoParam+0x28>)
 8002666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266a:	bf00      	nop
 800266c:	0800267d 	.word	0x0800267d
 8002670:	0800268f 	.word	0x0800268f
 8002674:	0800267d 	.word	0x0800267d
 8002678:	08002713 	.word	0x08002713
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d046      	beq.n	8002716 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800268c:	e043      	b.n	8002716 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002696:	d140      	bne.n	800271a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800269c:	e03d      	b.n	800271a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a6:	d121      	bne.n	80026ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d837      	bhi.n	800271e <DMA_CheckFifoParam+0xda>
 80026ae:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <DMA_CheckFifoParam+0x70>)
 80026b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b4:	080026c5 	.word	0x080026c5
 80026b8:	080026cb 	.word	0x080026cb
 80026bc:	080026c5 	.word	0x080026c5
 80026c0:	080026dd 	.word	0x080026dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
      break;
 80026c8:	e030      	b.n	800272c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d025      	beq.n	8002722 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026da:	e022      	b.n	8002722 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026e4:	d11f      	bne.n	8002726 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026ea:	e01c      	b.n	8002726 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d903      	bls.n	80026fa <DMA_CheckFifoParam+0xb6>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d003      	beq.n	8002700 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026f8:	e018      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
      break;
 80026fe:	e015      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00e      	beq.n	800272a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      break;
 8002710:	e00b      	b.n	800272a <DMA_CheckFifoParam+0xe6>
      break;
 8002712:	bf00      	nop
 8002714:	e00a      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      break;
 8002716:	bf00      	nop
 8002718:	e008      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      break;
 800271a:	bf00      	nop
 800271c:	e006      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      break;
 800271e:	bf00      	nop
 8002720:	e004      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      break;
 8002722:	bf00      	nop
 8002724:	e002      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      break;   
 8002726:	bf00      	nop
 8002728:	e000      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      break;
 800272a:	bf00      	nop
    }
  } 
  
  return status; 
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e086      	b.n	800285c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2223      	movs	r2, #35	; 0x23
 800275c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7fe fc2d 	bl	8000fc0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_ETH_Init+0x128>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a3e      	ldr	r2, [pc, #248]	; (8002864 <HAL_ETH_Init+0x128>)
 800276c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b3c      	ldr	r3, [pc, #240]	; (8002864 <HAL_ETH_Init+0x128>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800277e:	4b3a      	ldr	r3, [pc, #232]	; (8002868 <HAL_ETH_Init+0x12c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a39      	ldr	r2, [pc, #228]	; (8002868 <HAL_ETH_Init+0x12c>)
 8002784:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002788:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800278a:	4b37      	ldr	r3, [pc, #220]	; (8002868 <HAL_ETH_Init+0x12c>)
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	4935      	ldr	r1, [pc, #212]	; (8002868 <HAL_ETH_Init+0x12c>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002798:	4b33      	ldr	r3, [pc, #204]	; (8002868 <HAL_ETH_Init+0x12c>)
 800279a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027b4:	f7fe ff66 	bl	8001684 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80027ba:	e011      	b.n	80027e0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80027bc:	f7fe ff62 	bl	8001684 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027ca:	d909      	bls.n	80027e0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2204      	movs	r2, #4
 80027d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	22e0      	movs	r2, #224	; 0xe0
 80027d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e03d      	b.n	800285c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e4      	bne.n	80027bc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f97a 	bl	8002aec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fa25 	bl	8002c48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fa7b 	bl	8002cfa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	461a      	mov	r2, r3
 800280a:	2100      	movs	r1, #0
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f9e3 	bl	8002bd8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002820:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <HAL_ETH_Init+0x130>)
 8002830:	430b      	orrs	r3, r1
 8002832:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002846:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2210      	movs	r2, #16
 8002856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	40013800 	.word	0x40013800
 800286c:	00020060 	.word	0x00020060

08002870 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <ETH_SetMACConfig+0x164>)
 8002886:	4013      	ands	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	7b9b      	ldrb	r3, [r3, #14]
 800288e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	7c12      	ldrb	r2, [r2, #16]
 8002894:	2a00      	cmp	r2, #0
 8002896:	d102      	bne.n	800289e <ETH_SetMACConfig+0x2e>
 8002898:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800289c:	e000      	b.n	80028a0 <ETH_SetMACConfig+0x30>
 800289e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80028a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	7c52      	ldrb	r2, [r2, #17]
 80028a6:	2a00      	cmp	r2, #0
 80028a8:	d102      	bne.n	80028b0 <ETH_SetMACConfig+0x40>
 80028aa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80028ae:	e000      	b.n	80028b2 <ETH_SetMACConfig+0x42>
 80028b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	7fdb      	ldrb	r3, [r3, #31]
 80028be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80028c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80028c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	7f92      	ldrb	r2, [r2, #30]
 80028cc:	2a00      	cmp	r2, #0
 80028ce:	d102      	bne.n	80028d6 <ETH_SetMACConfig+0x66>
 80028d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028d4:	e000      	b.n	80028d8 <ETH_SetMACConfig+0x68>
 80028d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80028d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	7f1b      	ldrb	r3, [r3, #28]
 80028de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80028e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	791b      	ldrb	r3, [r3, #4]
 80028ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80028ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028f6:	2a00      	cmp	r2, #0
 80028f8:	d102      	bne.n	8002900 <ETH_SetMACConfig+0x90>
 80028fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028fe:	e000      	b.n	8002902 <ETH_SetMACConfig+0x92>
 8002900:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002902:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	7bdb      	ldrb	r3, [r3, #15]
 8002908:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800290a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002910:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002918:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800291a:	4313      	orrs	r3, r2
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002932:	2001      	movs	r0, #1
 8002934:	f7fe feb2 	bl	800169c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800294e:	4013      	ands	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002956:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800295e:	2a00      	cmp	r2, #0
 8002960:	d101      	bne.n	8002966 <ETH_SetMACConfig+0xf6>
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	e000      	b.n	8002968 <ETH_SetMACConfig+0xf8>
 8002966:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002968:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800296e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002976:	2a01      	cmp	r2, #1
 8002978:	d101      	bne.n	800297e <ETH_SetMACConfig+0x10e>
 800297a:	2208      	movs	r2, #8
 800297c:	e000      	b.n	8002980 <ETH_SetMACConfig+0x110>
 800297e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002980:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002988:	2a01      	cmp	r2, #1
 800298a:	d101      	bne.n	8002990 <ETH_SetMACConfig+0x120>
 800298c:	2204      	movs	r2, #4
 800298e:	e000      	b.n	8002992 <ETH_SetMACConfig+0x122>
 8002990:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002992:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800299a:	2a01      	cmp	r2, #1
 800299c:	d101      	bne.n	80029a2 <ETH_SetMACConfig+0x132>
 800299e:	2202      	movs	r2, #2
 80029a0:	e000      	b.n	80029a4 <ETH_SetMACConfig+0x134>
 80029a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029a4:	4313      	orrs	r3, r2
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029bc:	2001      	movs	r0, #1
 80029be:	f7fe fe6d 	bl	800169c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	619a      	str	r2, [r3, #24]
}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	fd20810f 	.word	0xfd20810f

080029d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <ETH_SetDMAConfig+0x110>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	7b1b      	ldrb	r3, [r3, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <ETH_SetDMAConfig+0x2c>
 80029fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a02:	e000      	b.n	8002a06 <ETH_SetDMAConfig+0x2e>
 8002a04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	7b5b      	ldrb	r3, [r3, #13]
 8002a0a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a0c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	7f52      	ldrb	r2, [r2, #29]
 8002a12:	2a00      	cmp	r2, #0
 8002a14:	d102      	bne.n	8002a1c <ETH_SetDMAConfig+0x44>
 8002a16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a1a:	e000      	b.n	8002a1e <ETH_SetDMAConfig+0x46>
 8002a1c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	7b9b      	ldrb	r3, [r3, #14]
 8002a24:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a26:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	7f1b      	ldrb	r3, [r3, #28]
 8002a32:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	7f9b      	ldrb	r3, [r3, #30]
 8002a3a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a3c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a4a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7fe fe14 	bl	800169c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	791b      	ldrb	r3, [r3, #4]
 8002a86:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a8c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a92:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a98:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002aa0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002aa2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002aaa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ab0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002aba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002abe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002acc:	2001      	movs	r0, #1
 8002ace:	f7fe fde5 	bl	800169c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6013      	str	r3, [r2, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	f8de3f23 	.word	0xf8de3f23

08002aec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b0a6      	sub	sp, #152	; 0x98
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002afa:	2301      	movs	r3, #1
 8002afc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b00:	2300      	movs	r3, #0
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b58:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fe7f 	bl	8002870 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002b72:	2301      	movs	r3, #1
 8002b74:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002b76:	2301      	movs	r3, #1
 8002b78:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002b80:	2301      	movs	r3, #1
 8002b82:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ba6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bac:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002bc2:	f107 0308 	add.w	r3, r7, #8
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ff05 	bl	80029d8 <ETH_SetDMAConfig>
}
 8002bce:	bf00      	nop
 8002bd0:	3798      	adds	r7, #152	; 0x98
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3305      	adds	r3, #5
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	3204      	adds	r2, #4
 8002bf0:	7812      	ldrb	r2, [r2, #0]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <ETH_MACAddressConfig+0x68>)
 8002bfa:	4413      	add	r3, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3303      	adds	r3, #3
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	061a      	lsls	r2, r3, #24
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	041b      	lsls	r3, r3, #16
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3301      	adds	r3, #1
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	7812      	ldrb	r2, [r2, #0]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <ETH_MACAddressConfig+0x6c>)
 8002c2a:	4413      	add	r3, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	6013      	str	r3, [r2, #0]
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40028040 	.word	0x40028040
 8002c44:	40028044 	.word	0x40028044

08002c48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e03e      	b.n	8002cd4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68d9      	ldr	r1, [r3, #12]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2200      	movs	r2, #0
 8002c72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	3206      	adds	r2, #6
 8002c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d80c      	bhi.n	8002cb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68d9      	ldr	r1, [r3, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	e004      	b.n	8002cc2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d9bd      	bls.n	8002c56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cec:	611a      	str	r2, [r3, #16]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b085      	sub	sp, #20
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e048      	b.n	8002d9a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6919      	ldr	r1, [r3, #16]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2200      	movs	r2, #0
 8002d36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	3212      	adds	r2, #18
 8002d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d80c      	bhi.n	8002d8a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6919      	ldr	r1, [r3, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	60da      	str	r2, [r3, #12]
 8002d88:	e004      	b.n	8002d94 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3301      	adds	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d9b3      	bls.n	8002d08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dca:	60da      	str	r2, [r3, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	e175      	b.n	80030e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	f040 8164 	bne.w	80030de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d005      	beq.n	8002e2e <HAL_GPIO_Init+0x56>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d130      	bne.n	8002e90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	2203      	movs	r2, #3
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e64:	2201      	movs	r2, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 0201 	and.w	r2, r3, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d017      	beq.n	8002ecc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d123      	bne.n	8002f20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	08da      	lsrs	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3208      	adds	r2, #8
 8002ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	220f      	movs	r2, #15
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	08da      	lsrs	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3208      	adds	r2, #8
 8002f1a:	69b9      	ldr	r1, [r7, #24]
 8002f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0203 	and.w	r2, r3, #3
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80be 	beq.w	80030de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f62:	4b66      	ldr	r3, [pc, #408]	; (80030fc <HAL_GPIO_Init+0x324>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	4a65      	ldr	r2, [pc, #404]	; (80030fc <HAL_GPIO_Init+0x324>)
 8002f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6e:	4b63      	ldr	r3, [pc, #396]	; (80030fc <HAL_GPIO_Init+0x324>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f7a:	4a61      	ldr	r2, [pc, #388]	; (8003100 <HAL_GPIO_Init+0x328>)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	220f      	movs	r2, #15
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a58      	ldr	r2, [pc, #352]	; (8003104 <HAL_GPIO_Init+0x32c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d037      	beq.n	8003016 <HAL_GPIO_Init+0x23e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a57      	ldr	r2, [pc, #348]	; (8003108 <HAL_GPIO_Init+0x330>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d031      	beq.n	8003012 <HAL_GPIO_Init+0x23a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a56      	ldr	r2, [pc, #344]	; (800310c <HAL_GPIO_Init+0x334>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02b      	beq.n	800300e <HAL_GPIO_Init+0x236>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a55      	ldr	r2, [pc, #340]	; (8003110 <HAL_GPIO_Init+0x338>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d025      	beq.n	800300a <HAL_GPIO_Init+0x232>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a54      	ldr	r2, [pc, #336]	; (8003114 <HAL_GPIO_Init+0x33c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01f      	beq.n	8003006 <HAL_GPIO_Init+0x22e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a53      	ldr	r2, [pc, #332]	; (8003118 <HAL_GPIO_Init+0x340>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d019      	beq.n	8003002 <HAL_GPIO_Init+0x22a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a52      	ldr	r2, [pc, #328]	; (800311c <HAL_GPIO_Init+0x344>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_GPIO_Init+0x226>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a51      	ldr	r2, [pc, #324]	; (8003120 <HAL_GPIO_Init+0x348>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00d      	beq.n	8002ffa <HAL_GPIO_Init+0x222>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a50      	ldr	r2, [pc, #320]	; (8003124 <HAL_GPIO_Init+0x34c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <HAL_GPIO_Init+0x21e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a4f      	ldr	r2, [pc, #316]	; (8003128 <HAL_GPIO_Init+0x350>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_GPIO_Init+0x21a>
 8002fee:	2309      	movs	r3, #9
 8002ff0:	e012      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8002ff2:	230a      	movs	r3, #10
 8002ff4:	e010      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	e00e      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8002ffa:	2307      	movs	r3, #7
 8002ffc:	e00c      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8002ffe:	2306      	movs	r3, #6
 8003000:	e00a      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8003002:	2305      	movs	r3, #5
 8003004:	e008      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8003006:	2304      	movs	r3, #4
 8003008:	e006      	b.n	8003018 <HAL_GPIO_Init+0x240>
 800300a:	2303      	movs	r3, #3
 800300c:	e004      	b.n	8003018 <HAL_GPIO_Init+0x240>
 800300e:	2302      	movs	r3, #2
 8003010:	e002      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8003016:	2300      	movs	r3, #0
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	f002 0203 	and.w	r2, r2, #3
 800301e:	0092      	lsls	r2, r2, #2
 8003020:	4093      	lsls	r3, r2
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003028:	4935      	ldr	r1, [pc, #212]	; (8003100 <HAL_GPIO_Init+0x328>)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	3302      	adds	r3, #2
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003036:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_GPIO_Init+0x354>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800305a:	4a34      	ldr	r2, [pc, #208]	; (800312c <HAL_GPIO_Init+0x354>)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003060:	4b32      	ldr	r3, [pc, #200]	; (800312c <HAL_GPIO_Init+0x354>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003084:	4a29      	ldr	r2, [pc, #164]	; (800312c <HAL_GPIO_Init+0x354>)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800308a:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_GPIO_Init+0x354>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ae:	4a1f      	ldr	r2, [pc, #124]	; (800312c <HAL_GPIO_Init+0x354>)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_GPIO_Init+0x354>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <HAL_GPIO_Init+0x354>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3301      	adds	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b0f      	cmp	r3, #15
 80030e8:	f67f ae86 	bls.w	8002df8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	3724      	adds	r7, #36	; 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	40013800 	.word	0x40013800
 8003104:	40020000 	.word	0x40020000
 8003108:	40020400 	.word	0x40020400
 800310c:	40020800 	.word	0x40020800
 8003110:	40020c00 	.word	0x40020c00
 8003114:	40021000 	.word	0x40021000
 8003118:	40021400 	.word	0x40021400
 800311c:	40021800 	.word	0x40021800
 8003120:	40021c00 	.word	0x40021c00
 8003124:	40022000 	.word	0x40022000
 8003128:	40022400 	.word	0x40022400
 800312c:	40013c00 	.word	0x40013c00

08003130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	807b      	strh	r3, [r7, #2]
 800313c:	4613      	mov	r3, r2
 800313e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003140:	787b      	ldrb	r3, [r7, #1]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003146:	887a      	ldrh	r2, [r7, #2]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800314c:	e003      	b.n	8003156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800314e:	887b      	ldrh	r3, [r7, #2]
 8003150:	041a      	lsls	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	619a      	str	r2, [r3, #24]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af02      	add	r7, sp, #8
 8003168:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e108      	b.n	8003386 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe f92a 	bl	80013e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2203      	movs	r2, #3
 8003198:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a2:	d102      	bne.n	80031aa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 fe8c 	bl	8006ecc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7c1a      	ldrb	r2, [r3, #16]
 80031bc:	f88d 2000 	strb.w	r2, [sp]
 80031c0:	3304      	adds	r3, #4
 80031c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c4:	f003 fe28 	bl	8006e18 <USB_CoreInit>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0d5      	b.n	8003386 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 fe84 	bl	8006eee <USB_SetCurrentMode>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0c6      	b.n	8003386 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f8:	2300      	movs	r3, #0
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	e04a      	b.n	8003294 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3315      	adds	r3, #21
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	3314      	adds	r3, #20
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	b298      	uxth	r0, r3
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	332e      	adds	r3, #46	; 0x2e
 800323a:	4602      	mov	r2, r0
 800323c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	3318      	adds	r3, #24
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	331c      	adds	r3, #28
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3320      	adds	r3, #32
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3324      	adds	r3, #36	; 0x24
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	3301      	adds	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	791b      	ldrb	r3, [r3, #4]
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	429a      	cmp	r2, r3
 800329c:	d3af      	bcc.n	80031fe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]
 80032a2:	e044      	b.n	800332e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032a4:	7bfa      	ldrb	r2, [r7, #15]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	f203 2355 	addw	r3, r3, #597	; 0x255
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032ba:	7bfa      	ldrb	r2, [r7, #15]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	3301      	adds	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	791b      	ldrb	r3, [r3, #4]
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	429a      	cmp	r2, r3
 8003336:	d3b5      	bcc.n	80032a4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7c1a      	ldrb	r2, [r3, #16]
 8003340:	f88d 2000 	strb.w	r2, [sp]
 8003344:	3304      	adds	r3, #4
 8003346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003348:	f003 fe1e 	bl	8006f88 <USB_DevInit>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e013      	b.n	8003386 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	7b1b      	ldrb	r3, [r3, #12]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d102      	bne.n	800337a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f80b 	bl	8003390 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f003 ffd9 	bl	8007336 <USB_DevDisconnect>

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	10000003 	.word	0x10000003

080033d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e6:	6013      	str	r3, [r2, #0]
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40007000 	.word	0x40007000

080033f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	4b23      	ldr	r3, [pc, #140]	; (8003490 <HAL_PWREx_EnableOverDrive+0x98>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a22      	ldr	r2, [pc, #136]	; (8003490 <HAL_PWREx_EnableOverDrive+0x98>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	6413      	str	r3, [r2, #64]	; 0x40
 800340e:	4b20      	ldr	r3, [pc, #128]	; (8003490 <HAL_PWREx_EnableOverDrive+0x98>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800341a:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <HAL_PWREx_EnableOverDrive+0x9c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1d      	ldr	r2, [pc, #116]	; (8003494 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003426:	f7fe f92d 	bl	8001684 <HAL_GetTick>
 800342a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800342c:	e009      	b.n	8003442 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800342e:	f7fe f929 	bl	8001684 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800343c:	d901      	bls.n	8003442 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e022      	b.n	8003488 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003442:	4b14      	ldr	r3, [pc, #80]	; (8003494 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344e:	d1ee      	bne.n	800342e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003450:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800345c:	f7fe f912 	bl	8001684 <HAL_GetTick>
 8003460:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003462:	e009      	b.n	8003478 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003464:	f7fe f90e 	bl	8001684 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003472:	d901      	bls.n	8003478 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e007      	b.n	8003488 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_PWREx_EnableOverDrive+0x9c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003484:	d1ee      	bne.n	8003464 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	40007000 	.word	0x40007000

08003498 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034a0:	2300      	movs	r3, #0
 80034a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e29b      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8087 	beq.w	80035ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034bc:	4b96      	ldr	r3, [pc, #600]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d00c      	beq.n	80034e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c8:	4b93      	ldr	r3, [pc, #588]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d112      	bne.n	80034fa <HAL_RCC_OscConfig+0x62>
 80034d4:	4b90      	ldr	r3, [pc, #576]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e0:	d10b      	bne.n	80034fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e2:	4b8d      	ldr	r3, [pc, #564]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d06c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x130>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d168      	bne.n	80035c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e275      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003502:	d106      	bne.n	8003512 <HAL_RCC_OscConfig+0x7a>
 8003504:	4b84      	ldr	r3, [pc, #528]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a83      	ldr	r2, [pc, #524]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800350a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	e02e      	b.n	8003570 <HAL_RCC_OscConfig+0xd8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x9c>
 800351a:	4b7f      	ldr	r3, [pc, #508]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a7e      	ldr	r2, [pc, #504]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b7c      	ldr	r3, [pc, #496]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a7b      	ldr	r2, [pc, #492]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800352c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e01d      	b.n	8003570 <HAL_RCC_OscConfig+0xd8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0xc0>
 800353e:	4b76      	ldr	r3, [pc, #472]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a75      	ldr	r2, [pc, #468]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b73      	ldr	r3, [pc, #460]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a72      	ldr	r2, [pc, #456]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xd8>
 8003558:	4b6f      	ldr	r3, [pc, #444]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a6e      	ldr	r2, [pc, #440]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b6c      	ldr	r3, [pc, #432]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a6b      	ldr	r2, [pc, #428]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe f884 	bl	8001684 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7fe f880 	bl	8001684 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e229      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b61      	ldr	r3, [pc, #388]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0xe8>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe f870 	bl	8001684 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe f86c 	bl	8001684 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e215      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	4b57      	ldr	r3, [pc, #348]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x110>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d069      	beq.n	80036aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035d6:	4b50      	ldr	r3, [pc, #320]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d11c      	bne.n	8003628 <HAL_RCC_OscConfig+0x190>
 80035ee:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d116      	bne.n	8003628 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x17a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e1e9      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003612:	4b41      	ldr	r3, [pc, #260]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	493d      	ldr	r1, [pc, #244]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	e040      	b.n	80036aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d023      	beq.n	8003678 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003630:	4b39      	ldr	r3, [pc, #228]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a38      	ldr	r2, [pc, #224]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe f822 	bl	8001684 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003644:	f7fe f81e 	bl	8001684 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1c7      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003656:	4b30      	ldr	r3, [pc, #192]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003662:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4929      	ldr	r1, [pc, #164]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
 8003676:	e018      	b.n	80036aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a26      	ldr	r2, [pc, #152]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fd fffe 	bl	8001684 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368c:	f7fd fffa 	bl	8001684 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e1a3      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d038      	beq.n	8003728 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d019      	beq.n	80036f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036be:	4b16      	ldr	r3, [pc, #88]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80036c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c2:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ca:	f7fd ffdb 	bl	8001684 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d2:	f7fd ffd7 	bl	8001684 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e180      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80036e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x23a>
 80036f0:	e01a      	b.n	8003728 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80036f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <HAL_RCC_OscConfig+0x280>)
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fd ffc1 	bl	8001684 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003706:	f7fd ffbd 	bl	8001684 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d903      	bls.n	800371c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e166      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
 8003718:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371c:	4b92      	ldr	r3, [pc, #584]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 800371e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ee      	bne.n	8003706 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80a4 	beq.w	800387e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003736:	4b8c      	ldr	r3, [pc, #560]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10d      	bne.n	800375e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	4b89      	ldr	r3, [pc, #548]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	4a88      	ldr	r2, [pc, #544]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374c:	6413      	str	r3, [r2, #64]	; 0x40
 800374e:	4b86      	ldr	r3, [pc, #536]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375e:	4b83      	ldr	r3, [pc, #524]	; (800396c <HAL_RCC_OscConfig+0x4d4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d118      	bne.n	800379c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800376a:	4b80      	ldr	r3, [pc, #512]	; (800396c <HAL_RCC_OscConfig+0x4d4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7f      	ldr	r2, [pc, #508]	; (800396c <HAL_RCC_OscConfig+0x4d4>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003776:	f7fd ff85 	bl	8001684 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377e:	f7fd ff81 	bl	8001684 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b64      	cmp	r3, #100	; 0x64
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e12a      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003790:	4b76      	ldr	r3, [pc, #472]	; (800396c <HAL_RCC_OscConfig+0x4d4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d106      	bne.n	80037b2 <HAL_RCC_OscConfig+0x31a>
 80037a4:	4b70      	ldr	r3, [pc, #448]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	4a6f      	ldr	r2, [pc, #444]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	; 0x70
 80037b0:	e02d      	b.n	800380e <HAL_RCC_OscConfig+0x376>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x33c>
 80037ba:	4b6b      	ldr	r3, [pc, #428]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	4a6a      	ldr	r2, [pc, #424]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	6713      	str	r3, [r2, #112]	; 0x70
 80037c6:	4b68      	ldr	r3, [pc, #416]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4a67      	ldr	r2, [pc, #412]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037cc:	f023 0304 	bic.w	r3, r3, #4
 80037d0:	6713      	str	r3, [r2, #112]	; 0x70
 80037d2:	e01c      	b.n	800380e <HAL_RCC_OscConfig+0x376>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d10c      	bne.n	80037f6 <HAL_RCC_OscConfig+0x35e>
 80037dc:	4b62      	ldr	r3, [pc, #392]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	4a61      	ldr	r2, [pc, #388]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	6713      	str	r3, [r2, #112]	; 0x70
 80037e8:	4b5f      	ldr	r3, [pc, #380]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a5e      	ldr	r2, [pc, #376]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	e00b      	b.n	800380e <HAL_RCC_OscConfig+0x376>
 80037f6:	4b5c      	ldr	r3, [pc, #368]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	4a5b      	ldr	r2, [pc, #364]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	6713      	str	r3, [r2, #112]	; 0x70
 8003802:	4b59      	ldr	r3, [pc, #356]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	4a58      	ldr	r2, [pc, #352]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003808:	f023 0304 	bic.w	r3, r3, #4
 800380c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d015      	beq.n	8003842 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fd ff35 	bl	8001684 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fd ff31 	bl	8001684 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0d8      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003834:	4b4c      	ldr	r3, [pc, #304]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ee      	beq.n	800381e <HAL_RCC_OscConfig+0x386>
 8003840:	e014      	b.n	800386c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003842:	f7fd ff1f 	bl	8001684 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003848:	e00a      	b.n	8003860 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fd ff1b 	bl	8001684 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f241 3288 	movw	r2, #5000	; 0x1388
 8003858:	4293      	cmp	r3, r2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0c2      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003860:	4b41      	ldr	r3, [pc, #260]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ee      	bne.n	800384a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003872:	4b3d      	ldr	r3, [pc, #244]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a3c      	ldr	r2, [pc, #240]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80ae 	beq.w	80039e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003888:	4b37      	ldr	r3, [pc, #220]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d06d      	beq.n	8003970 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d14b      	bne.n	8003934 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b32      	ldr	r3, [pc, #200]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a31      	ldr	r2, [pc, #196]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80038a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fd feec 	bl	8001684 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd fee8 	bl	8001684 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e091      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	4b29      	ldr	r3, [pc, #164]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	3b01      	subs	r3, #1
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	061b      	lsls	r3, r3, #24
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	071b      	lsls	r3, r3, #28
 80038fa:	491b      	ldr	r1, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a18      	ldr	r2, [pc, #96]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fd feba 	bl	8001684 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd feb6 	bl	8001684 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e05f      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x47c>
 8003932:	e057      	b.n	80039e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 800393a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800393e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fd fea0 	bl	8001684 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fd fe9c 	bl	8001684 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e045      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	4b03      	ldr	r3, [pc, #12]	; (8003968 <HAL_RCC_OscConfig+0x4d0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x4b0>
 8003966:	e03d      	b.n	80039e4 <HAL_RCC_OscConfig+0x54c>
 8003968:	40023800 	.word	0x40023800
 800396c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003970:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <HAL_RCC_OscConfig+0x558>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d030      	beq.n	80039e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d129      	bne.n	80039e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d122      	bne.n	80039e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039a0:	4013      	ands	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d119      	bne.n	80039e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d10f      	bne.n	80039e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d107      	bne.n	80039e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800

080039f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0d0      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b6a      	ldr	r3, [pc, #424]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d910      	bls.n	8003a3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b67      	ldr	r3, [pc, #412]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 020f 	bic.w	r2, r3, #15
 8003a22:	4965      	ldr	r1, [pc, #404]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b63      	ldr	r3, [pc, #396]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0b8      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d020      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a54:	4b59      	ldr	r3, [pc, #356]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a58      	ldr	r2, [pc, #352]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a6c:	4b53      	ldr	r3, [pc, #332]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4a52      	ldr	r2, [pc, #328]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a78:	4b50      	ldr	r3, [pc, #320]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	494d      	ldr	r1, [pc, #308]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d040      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d115      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e07f      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d107      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab6:	4b41      	ldr	r3, [pc, #260]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e073      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac6:	4b3d      	ldr	r3, [pc, #244]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06b      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad6:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f023 0203 	bic.w	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4936      	ldr	r1, [pc, #216]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae8:	f7fd fdcc 	bl	8001684 <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af0:	f7fd fdc8 	bl	8001684 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e053      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b06:	4b2d      	ldr	r3, [pc, #180]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 020c 	and.w	r2, r3, #12
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d1eb      	bne.n	8003af0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b18:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d210      	bcs.n	8003b48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 020f 	bic.w	r2, r3, #15
 8003b2e:	4922      	ldr	r1, [pc, #136]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e032      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b54:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4916      	ldr	r1, [pc, #88]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	490e      	ldr	r1, [pc, #56]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b86:	f000 f821 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	490a      	ldr	r1, [pc, #40]	; (8003bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8003b98:	5ccb      	ldrb	r3, [r1, r3]
 8003b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9e:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_RCC_ClockConfig+0x1d4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd fd28 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023c00 	.word	0x40023c00
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	08007488 	.word	0x08007488
 8003bc4:	2000003c 	.word	0x2000003c
 8003bc8:	20000040 	.word	0x20000040

08003bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd0:	b094      	sub	sp, #80	; 0x50
 8003bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd8:	2300      	movs	r3, #0
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bdc:	2300      	movs	r3, #0
 8003bde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be4:	4b79      	ldr	r3, [pc, #484]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d00d      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0x40>
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	f200 80e1 	bhi.w	8003db8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x34>
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bfe:	e0db      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c00:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c04:	e0db      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c06:	4b73      	ldr	r3, [pc, #460]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c0a:	e0d8      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c0c:	4b6f      	ldr	r3, [pc, #444]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c16:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d063      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c22:	4b6a      	ldr	r3, [pc, #424]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	099b      	lsrs	r3, r3, #6
 8003c28:	2200      	movs	r2, #0
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
 8003c36:	2300      	movs	r3, #0
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c3e:	4622      	mov	r2, r4
 8003c40:	462b      	mov	r3, r5
 8003c42:	f04f 0000 	mov.w	r0, #0
 8003c46:	f04f 0100 	mov.w	r1, #0
 8003c4a:	0159      	lsls	r1, r3, #5
 8003c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c50:	0150      	lsls	r0, r2, #5
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4621      	mov	r1, r4
 8003c58:	1a51      	subs	r1, r2, r1
 8003c5a:	6139      	str	r1, [r7, #16]
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c70:	4659      	mov	r1, fp
 8003c72:	018b      	lsls	r3, r1, #6
 8003c74:	4651      	mov	r1, sl
 8003c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	018a      	lsls	r2, r1, #6
 8003c7e:	4651      	mov	r1, sl
 8003c80:	ebb2 0801 	subs.w	r8, r2, r1
 8003c84:	4659      	mov	r1, fp
 8003c86:	eb63 0901 	sbc.w	r9, r3, r1
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c9e:	4690      	mov	r8, r2
 8003ca0:	4699      	mov	r9, r3
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	eb18 0303 	adds.w	r3, r8, r3
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	462b      	mov	r3, r5
 8003cac:	eb49 0303 	adc.w	r3, r9, r3
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	024b      	lsls	r3, r1, #9
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cc8:	4621      	mov	r1, r4
 8003cca:	024a      	lsls	r2, r1, #9
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cdc:	f7fc faac 	bl	8000238 <__aeabi_uldivmod>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce8:	e058      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cea:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	099b      	lsrs	r3, r3, #6
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cfa:	623b      	str	r3, [r7, #32]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003d00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	f04f 0000 	mov.w	r0, #0
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	0159      	lsls	r1, r3, #5
 8003d12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d16:	0150      	lsls	r0, r2, #5
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d22:	4649      	mov	r1, r9
 8003d24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d40:	eb63 050b 	sbc.w	r5, r3, fp
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	00eb      	lsls	r3, r5, #3
 8003d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d52:	00e2      	lsls	r2, r4, #3
 8003d54:	4614      	mov	r4, r2
 8003d56:	461d      	mov	r5, r3
 8003d58:	4643      	mov	r3, r8
 8003d5a:	18e3      	adds	r3, r4, r3
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	464b      	mov	r3, r9
 8003d60:	eb45 0303 	adc.w	r3, r5, r3
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d72:	4629      	mov	r1, r5
 8003d74:	028b      	lsls	r3, r1, #10
 8003d76:	4621      	mov	r1, r4
 8003d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	028a      	lsls	r2, r1, #10
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d86:	2200      	movs	r2, #0
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	61fa      	str	r2, [r7, #28]
 8003d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d90:	f7fc fa52 	bl	8000238 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	3301      	adds	r3, #1
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003db6:	e002      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3750      	adds	r7, #80	; 0x50
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	00f42400 	.word	0x00f42400
 8003dd4:	007a1200 	.word	0x007a1200

08003dd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_RCC_GetHCLKFreq+0x14>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	2000003c 	.word	0x2000003c

08003df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003df4:	f7ff fff0 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	0a9b      	lsrs	r3, r3, #10
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	4903      	ldr	r1, [pc, #12]	; (8003e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e06:	5ccb      	ldrb	r3, [r1, r3]
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40023800 	.word	0x40023800
 8003e14:	08007498 	.word	0x08007498

08003e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e1c:	f7ff ffdc 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003e20:	4602      	mov	r2, r0
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	0b5b      	lsrs	r3, r3, #13
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	4903      	ldr	r1, [pc, #12]	; (8003e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2e:	5ccb      	ldrb	r3, [r1, r3]
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	08007498 	.word	0x08007498

08003e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d012      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e68:	4b69      	ldr	r3, [pc, #420]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4a68      	ldr	r2, [pc, #416]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e72:	6093      	str	r3, [r2, #8]
 8003e74:	4b66      	ldr	r3, [pc, #408]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7c:	4964      	ldr	r1, [pc, #400]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d017      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e9a:	4b5d      	ldr	r3, [pc, #372]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea8:	4959      	ldr	r1, [pc, #356]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d017      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ed6:	4b4e      	ldr	r3, [pc, #312]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003edc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	494a      	ldr	r1, [pc, #296]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef4:	d101      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f02:	2301      	movs	r3, #1
 8003f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 808b 	beq.w	800403a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f24:	4b3a      	ldr	r3, [pc, #232]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	4a39      	ldr	r2, [pc, #228]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8003f30:	4b37      	ldr	r3, [pc, #220]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f3c:	4b35      	ldr	r3, [pc, #212]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a34      	ldr	r2, [pc, #208]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f48:	f7fd fb9c 	bl	8001684 <HAL_GetTick>
 8003f4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f50:	f7fd fb98 	bl	8001684 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e38f      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f62:	4b2c      	ldr	r3, [pc, #176]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d035      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d02e      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f8c:	4b20      	ldr	r3, [pc, #128]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f96:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	4a1d      	ldr	r2, [pc, #116]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	4a1a      	ldr	r2, [pc, #104]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fae:	4a18      	ldr	r2, [pc, #96]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fb4:	4b16      	ldr	r3, [pc, #88]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d114      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fd fb60 	bl	8001684 <HAL_GetTick>
 8003fc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc6:	e00a      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc8:	f7fd fb5c 	bl	8001684 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e351      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0ee      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ff6:	d111      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004006:	400b      	ands	r3, r1
 8004008:	4901      	ldr	r1, [pc, #4]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
 800400e:	e00b      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004010:	40023800 	.word	0x40023800
 8004014:	40007000 	.word	0x40007000
 8004018:	0ffffcff 	.word	0x0ffffcff
 800401c:	4bac      	ldr	r3, [pc, #688]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4aab      	ldr	r2, [pc, #684]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004022:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004026:	6093      	str	r3, [r2, #8]
 8004028:	4ba9      	ldr	r3, [pc, #676]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004034:	49a6      	ldr	r1, [pc, #664]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004036:	4313      	orrs	r3, r2
 8004038:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b00      	cmp	r3, #0
 8004044:	d010      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004046:	4ba2      	ldr	r3, [pc, #648]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800404c:	4aa0      	ldr	r2, [pc, #640]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004052:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004056:	4b9e      	ldr	r3, [pc, #632]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004058:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	499b      	ldr	r1, [pc, #620]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004074:	4b96      	ldr	r3, [pc, #600]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004082:	4993      	ldr	r1, [pc, #588]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004096:	4b8e      	ldr	r3, [pc, #568]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a4:	498a      	ldr	r1, [pc, #552]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040b8:	4b85      	ldr	r3, [pc, #532]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c6:	4982      	ldr	r1, [pc, #520]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040da:	4b7d      	ldr	r3, [pc, #500]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	4979      	ldr	r1, [pc, #484]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040fc:	4b74      	ldr	r3, [pc, #464]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f023 0203 	bic.w	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	4971      	ldr	r1, [pc, #452]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800411e:	4b6c      	ldr	r3, [pc, #432]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004124:	f023 020c 	bic.w	r2, r3, #12
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412c:	4968      	ldr	r1, [pc, #416]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004140:	4b63      	ldr	r3, [pc, #396]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004146:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414e:	4960      	ldr	r1, [pc, #384]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004162:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004170:	4957      	ldr	r1, [pc, #348]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004184:	4b52      	ldr	r3, [pc, #328]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	494f      	ldr	r1, [pc, #316]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041a6:	4b4a      	ldr	r3, [pc, #296]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	4946      	ldr	r1, [pc, #280]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041c8:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d6:	493e      	ldr	r1, [pc, #248]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041ea:	4b39      	ldr	r3, [pc, #228]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f8:	4935      	ldr	r1, [pc, #212]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800420c:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800421a:	492d      	ldr	r1, [pc, #180]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d011      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800422e:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800423c:	4924      	ldr	r1, [pc, #144]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800424c:	d101      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800424e:	2301      	movs	r3, #1
 8004250:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800426e:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004274:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427c:	4914      	ldr	r1, [pc, #80]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00b      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a0:	490b      	ldr	r1, [pc, #44]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00f      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c4:	4902      	ldr	r1, [pc, #8]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042cc:	e002      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00b      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042e0:	4b8a      	ldr	r3, [pc, #552]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	4986      	ldr	r1, [pc, #536]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00b      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004304:	4b81      	ldr	r3, [pc, #516]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800430a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004314:	497d      	ldr	r1, [pc, #500]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d006      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 80d6 	beq.w	80044dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004330:	4b76      	ldr	r3, [pc, #472]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a75      	ldr	r2, [pc, #468]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004336:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800433a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433c:	f7fd f9a2 	bl	8001684 <HAL_GetTick>
 8004340:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004344:	f7fd f99e 	bl	8001684 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e195      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004356:	4b6d      	ldr	r3, [pc, #436]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d021      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	2b00      	cmp	r3, #0
 8004374:	d11d      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004376:	4b65      	ldr	r3, [pc, #404]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004384:	4b61      	ldr	r3, [pc, #388]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800438a:	0e1b      	lsrs	r3, r3, #24
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	019a      	lsls	r2, r3, #6
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	041b      	lsls	r3, r3, #16
 800439c:	431a      	orrs	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	061b      	lsls	r3, r3, #24
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	071b      	lsls	r3, r3, #28
 80043aa:	4958      	ldr	r1, [pc, #352]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d02e      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043dc:	d129      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043de:	4b4b      	ldr	r3, [pc, #300]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043ec:	4b47      	ldr	r3, [pc, #284]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f2:	0f1b      	lsrs	r3, r3, #28
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	019a      	lsls	r2, r3, #6
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	041b      	lsls	r3, r3, #16
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	061b      	lsls	r3, r3, #24
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	071b      	lsls	r3, r3, #28
 8004412:	493e      	ldr	r1, [pc, #248]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800441a:	4b3c      	ldr	r3, [pc, #240]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004420:	f023 021f 	bic.w	r2, r3, #31
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	3b01      	subs	r3, #1
 800442a:	4938      	ldr	r1, [pc, #224]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01d      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800443e:	4b33      	ldr	r3, [pc, #204]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004444:	0e1b      	lsrs	r3, r3, #24
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800444c:	4b2f      	ldr	r3, [pc, #188]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004452:	0f1b      	lsrs	r3, r3, #28
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	019a      	lsls	r2, r3, #6
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	431a      	orrs	r2, r3
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	061b      	lsls	r3, r3, #24
 800446c:	431a      	orrs	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	071b      	lsls	r3, r3, #28
 8004472:	4926      	ldr	r1, [pc, #152]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d011      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	019a      	lsls	r2, r3, #6
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	071b      	lsls	r3, r3, #28
 80044a2:	491a      	ldr	r1, [pc, #104]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a17      	ldr	r2, [pc, #92]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b6:	f7fd f8e5 	bl	8001684 <HAL_GetTick>
 80044ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044be:	f7fd f8e1 	bl	8001684 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b64      	cmp	r3, #100	; 0x64
 80044ca:	d901      	bls.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e0d8      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	f040 80ce 	bne.w	8004680 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a08      	ldr	r2, [pc, #32]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f0:	f7fd f8c8 	bl	8001684 <HAL_GetTick>
 80044f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044f6:	e00b      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044f8:	f7fd f8c4 	bl	8001684 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	; 0x64
 8004504:	d904      	bls.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e0bb      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004510:	4b5e      	ldr	r3, [pc, #376]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800451c:	d0ec      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800453a:	2b00      	cmp	r3, #0
 800453c:	d02e      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d12a      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004546:	4b51      	ldr	r3, [pc, #324]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004554:	4b4d      	ldr	r3, [pc, #308]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	0f1b      	lsrs	r3, r3, #28
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	019a      	lsls	r2, r3, #6
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	041b      	lsls	r3, r3, #16
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	061b      	lsls	r3, r3, #24
 8004574:	431a      	orrs	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	071b      	lsls	r3, r3, #28
 800457a:	4944      	ldr	r1, [pc, #272]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004582:	4b42      	ldr	r3, [pc, #264]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004588:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	3b01      	subs	r3, #1
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	493d      	ldr	r1, [pc, #244]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d022      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045b0:	d11d      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045b2:	4b36      	ldr	r3, [pc, #216]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	0e1b      	lsrs	r3, r3, #24
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045c0:	4b32      	ldr	r3, [pc, #200]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	0f1b      	lsrs	r3, r3, #28
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	019a      	lsls	r2, r3, #6
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	041b      	lsls	r3, r3, #16
 80045da:	431a      	orrs	r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	431a      	orrs	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	071b      	lsls	r3, r3, #28
 80045e6:	4929      	ldr	r1, [pc, #164]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d028      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045fa:	4b24      	ldr	r3, [pc, #144]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	0e1b      	lsrs	r3, r3, #24
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004608:	4b20      	ldr	r3, [pc, #128]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	0c1b      	lsrs	r3, r3, #16
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	019a      	lsls	r2, r3, #6
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	041b      	lsls	r3, r3, #16
 8004620:	431a      	orrs	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	071b      	lsls	r3, r3, #28
 800462e:	4917      	ldr	r1, [pc, #92]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004636:	4b15      	ldr	r3, [pc, #84]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	4911      	ldr	r1, [pc, #68]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800464c:	4b0f      	ldr	r3, [pc, #60]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0e      	ldr	r2, [pc, #56]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004658:	f7fd f814 	bl	8001684 <HAL_GetTick>
 800465c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004660:	f7fd f810 	bl	8001684 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d901      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e007      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004672:	4b06      	ldr	r3, [pc, #24]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800467a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800467e:	d1ef      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40023800 	.word	0x40023800

08004690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e049      	b.n	8004736 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fc fd3a 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f000 fbee 	bl	8004eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e049      	b.n	80047e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d106      	bne.n	800476a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f841 	bl	80047ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3304      	adds	r3, #4
 800477a:	4619      	mov	r1, r3
 800477c:	4610      	mov	r0, r2
 800477e:	f000 fb97 	bl	8004eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <HAL_TIM_PWM_Start+0x24>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	bf14      	ite	ne
 800481c:	2301      	movne	r3, #1
 800481e:	2300      	moveq	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	e03c      	b.n	800489e <HAL_TIM_PWM_Start+0x9e>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b04      	cmp	r3, #4
 8004828:	d109      	bne.n	800483e <HAL_TIM_PWM_Start+0x3e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	bf14      	ite	ne
 8004836:	2301      	movne	r3, #1
 8004838:	2300      	moveq	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	e02f      	b.n	800489e <HAL_TIM_PWM_Start+0x9e>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d109      	bne.n	8004858 <HAL_TIM_PWM_Start+0x58>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e022      	b.n	800489e <HAL_TIM_PWM_Start+0x9e>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d109      	bne.n	8004872 <HAL_TIM_PWM_Start+0x72>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e015      	b.n	800489e <HAL_TIM_PWM_Start+0x9e>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b10      	cmp	r3, #16
 8004876:	d109      	bne.n	800488c <HAL_TIM_PWM_Start+0x8c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e008      	b.n	800489e <HAL_TIM_PWM_Start+0x9e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e092      	b.n	80049cc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d104      	bne.n	80048b6 <HAL_TIM_PWM_Start+0xb6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b4:	e023      	b.n	80048fe <HAL_TIM_PWM_Start+0xfe>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d104      	bne.n	80048c6 <HAL_TIM_PWM_Start+0xc6>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c4:	e01b      	b.n	80048fe <HAL_TIM_PWM_Start+0xfe>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d104      	bne.n	80048d6 <HAL_TIM_PWM_Start+0xd6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d4:	e013      	b.n	80048fe <HAL_TIM_PWM_Start+0xfe>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b0c      	cmp	r3, #12
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_PWM_Start+0xe6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048e4:	e00b      	b.n	80048fe <HAL_TIM_PWM_Start+0xfe>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_PWM_Start+0xf6>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f4:	e003      	b.n	80048fe <HAL_TIM_PWM_Start+0xfe>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2201      	movs	r2, #1
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fe76 	bl	80055f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a30      	ldr	r2, [pc, #192]	; (80049d4 <HAL_TIM_PWM_Start+0x1d4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_TIM_PWM_Start+0x120>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2f      	ldr	r2, [pc, #188]	; (80049d8 <HAL_TIM_PWM_Start+0x1d8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d101      	bne.n	8004924 <HAL_TIM_PWM_Start+0x124>
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <HAL_TIM_PWM_Start+0x126>
 8004924:	2300      	movs	r3, #0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a25      	ldr	r2, [pc, #148]	; (80049d4 <HAL_TIM_PWM_Start+0x1d4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d022      	beq.n	800498a <HAL_TIM_PWM_Start+0x18a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494c:	d01d      	beq.n	800498a <HAL_TIM_PWM_Start+0x18a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a22      	ldr	r2, [pc, #136]	; (80049dc <HAL_TIM_PWM_Start+0x1dc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d018      	beq.n	800498a <HAL_TIM_PWM_Start+0x18a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a20      	ldr	r2, [pc, #128]	; (80049e0 <HAL_TIM_PWM_Start+0x1e0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_TIM_PWM_Start+0x18a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_TIM_PWM_Start+0x1e4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_TIM_PWM_Start+0x18a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <HAL_TIM_PWM_Start+0x1d8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d009      	beq.n	800498a <HAL_TIM_PWM_Start+0x18a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1b      	ldr	r2, [pc, #108]	; (80049e8 <HAL_TIM_PWM_Start+0x1e8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_TIM_PWM_Start+0x18a>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a19      	ldr	r2, [pc, #100]	; (80049ec <HAL_TIM_PWM_Start+0x1ec>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d115      	bne.n	80049b6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <HAL_TIM_PWM_Start+0x1f0>)
 8004992:	4013      	ands	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b06      	cmp	r3, #6
 800499a:	d015      	beq.n	80049c8 <HAL_TIM_PWM_Start+0x1c8>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a2:	d011      	beq.n	80049c8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b4:	e008      	b.n	80049c8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0201 	orr.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e000      	b.n	80049ca <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40010000 	.word	0x40010000
 80049d8:	40010400 	.word	0x40010400
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40001800 	.word	0x40001800
 80049f0:	00010007 	.word	0x00010007

080049f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fdf6 	bl	80055f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a36      	ldr	r2, [pc, #216]	; (8004aec <HAL_TIM_PWM_Stop+0xf8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d004      	beq.n	8004a20 <HAL_TIM_PWM_Stop+0x2c>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a35      	ldr	r2, [pc, #212]	; (8004af0 <HAL_TIM_PWM_Stop+0xfc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIM_PWM_Stop+0x30>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_TIM_PWM_Stop+0x32>
 8004a24:	2300      	movs	r3, #0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d017      	beq.n	8004a5a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6a1a      	ldr	r2, [r3, #32]
 8004a30:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10f      	bne.n	8004a5a <HAL_TIM_PWM_Stop+0x66>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6a1a      	ldr	r2, [r3, #32]
 8004a40:	f240 4344 	movw	r3, #1092	; 0x444
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d107      	bne.n	8004a5a <HAL_TIM_PWM_Stop+0x66>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6a1a      	ldr	r2, [r3, #32]
 8004a60:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10f      	bne.n	8004a8a <HAL_TIM_PWM_Stop+0x96>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6a1a      	ldr	r2, [r3, #32]
 8004a70:	f240 4344 	movw	r3, #1092	; 0x444
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d107      	bne.n	8004a8a <HAL_TIM_PWM_Stop+0x96>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_PWM_Stop+0xa6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a98:	e023      	b.n	8004ae2 <HAL_TIM_PWM_Stop+0xee>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_PWM_Stop+0xb6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa8:	e01b      	b.n	8004ae2 <HAL_TIM_PWM_Stop+0xee>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_PWM_Stop+0xc6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab8:	e013      	b.n	8004ae2 <HAL_TIM_PWM_Stop+0xee>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_PWM_Stop+0xd6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ac8:	e00b      	b.n	8004ae2 <HAL_TIM_PWM_Stop+0xee>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_PWM_Stop+0xe6>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad8:	e003      	b.n	8004ae2 <HAL_TIM_PWM_Stop+0xee>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40010400 	.word	0x40010400

08004af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e0ff      	b.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b14      	cmp	r3, #20
 8004b1e:	f200 80f0 	bhi.w	8004d02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b22:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b7d 	.word	0x08004b7d
 8004b2c:	08004d03 	.word	0x08004d03
 8004b30:	08004d03 	.word	0x08004d03
 8004b34:	08004d03 	.word	0x08004d03
 8004b38:	08004bbd 	.word	0x08004bbd
 8004b3c:	08004d03 	.word	0x08004d03
 8004b40:	08004d03 	.word	0x08004d03
 8004b44:	08004d03 	.word	0x08004d03
 8004b48:	08004bff 	.word	0x08004bff
 8004b4c:	08004d03 	.word	0x08004d03
 8004b50:	08004d03 	.word	0x08004d03
 8004b54:	08004d03 	.word	0x08004d03
 8004b58:	08004c3f 	.word	0x08004c3f
 8004b5c:	08004d03 	.word	0x08004d03
 8004b60:	08004d03 	.word	0x08004d03
 8004b64:	08004d03 	.word	0x08004d03
 8004b68:	08004c81 	.word	0x08004c81
 8004b6c:	08004d03 	.word	0x08004d03
 8004b70:	08004d03 	.word	0x08004d03
 8004b74:	08004d03 	.word	0x08004d03
 8004b78:	08004cc1 	.word	0x08004cc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fa40 	bl	8005008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0208 	orr.w	r2, r2, #8
 8004b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0204 	bic.w	r2, r2, #4
 8004ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6999      	ldr	r1, [r3, #24]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	619a      	str	r2, [r3, #24]
      break;
 8004bba:	e0a5      	b.n	8004d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fa92 	bl	80050ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6999      	ldr	r1, [r3, #24]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	021a      	lsls	r2, r3, #8
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	619a      	str	r2, [r3, #24]
      break;
 8004bfc:	e084      	b.n	8004d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fae9 	bl	80051dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0208 	orr.w	r2, r2, #8
 8004c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0204 	bic.w	r2, r2, #4
 8004c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69d9      	ldr	r1, [r3, #28]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	61da      	str	r2, [r3, #28]
      break;
 8004c3c:	e064      	b.n	8004d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fb3f 	bl	80052c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69d9      	ldr	r1, [r3, #28]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	021a      	lsls	r2, r3, #8
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	61da      	str	r2, [r3, #28]
      break;
 8004c7e:	e043      	b.n	8004d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fb76 	bl	8005378 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0208 	orr.w	r2, r2, #8
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0204 	bic.w	r2, r2, #4
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cbe:	e023      	b.n	8004d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fba8 	bl	800541c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	021a      	lsls	r2, r3, #8
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d00:	e002      	b.n	8004d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
      break;
 8004d06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop

08004d1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_TIM_ConfigClockSource+0x1c>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e0b4      	b.n	8004ea2 <HAL_TIM_ConfigClockSource+0x186>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	4b56      	ldr	r3, [pc, #344]	; (8004eac <HAL_TIM_ConfigClockSource+0x190>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d70:	d03e      	beq.n	8004df0 <HAL_TIM_ConfigClockSource+0xd4>
 8004d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d76:	f200 8087 	bhi.w	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	f000 8086 	beq.w	8004e8e <HAL_TIM_ConfigClockSource+0x172>
 8004d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d86:	d87f      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b70      	cmp	r3, #112	; 0x70
 8004d8a:	d01a      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0xa6>
 8004d8c:	2b70      	cmp	r3, #112	; 0x70
 8004d8e:	d87b      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b60      	cmp	r3, #96	; 0x60
 8004d92:	d050      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x11a>
 8004d94:	2b60      	cmp	r3, #96	; 0x60
 8004d96:	d877      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b50      	cmp	r3, #80	; 0x50
 8004d9a:	d03c      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0xfa>
 8004d9c:	2b50      	cmp	r3, #80	; 0x50
 8004d9e:	d873      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b40      	cmp	r3, #64	; 0x40
 8004da2:	d058      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x13a>
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d86f      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004da8:	2b30      	cmp	r3, #48	; 0x30
 8004daa:	d064      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x15a>
 8004dac:	2b30      	cmp	r3, #48	; 0x30
 8004dae:	d86b      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d060      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x15a>
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	d867      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d05c      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x15a>
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	d05a      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x15a>
 8004dc0:	e062      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dd2:	f000 fbf1 	bl	80055b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004de4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	609a      	str	r2, [r3, #8]
      break;
 8004dee:	e04f      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e00:	f000 fbda 	bl	80055b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e12:	609a      	str	r2, [r3, #8]
      break;
 8004e14:	e03c      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e22:	461a      	mov	r2, r3
 8004e24:	f000 fb4e 	bl	80054c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2150      	movs	r1, #80	; 0x50
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fba7 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 8004e34:	e02c      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e42:	461a      	mov	r2, r3
 8004e44:	f000 fb6d 	bl	8005522 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2160      	movs	r1, #96	; 0x60
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fb97 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 8004e54:	e01c      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e62:	461a      	mov	r2, r3
 8004e64:	f000 fb2e 	bl	80054c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2140      	movs	r1, #64	; 0x40
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fb87 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 8004e74:	e00c      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f000 fb7e 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 8004e86:	e003      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e8c:	e000      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	fffeff88 	.word	0xfffeff88

08004eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a46      	ldr	r2, [pc, #280]	; (8004fdc <TIM_Base_SetConfig+0x12c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d013      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ece:	d00f      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a43      	ldr	r2, [pc, #268]	; (8004fe0 <TIM_Base_SetConfig+0x130>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00b      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a42      	ldr	r2, [pc, #264]	; (8004fe4 <TIM_Base_SetConfig+0x134>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d007      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a41      	ldr	r2, [pc, #260]	; (8004fe8 <TIM_Base_SetConfig+0x138>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a40      	ldr	r2, [pc, #256]	; (8004fec <TIM_Base_SetConfig+0x13c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d108      	bne.n	8004f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a35      	ldr	r2, [pc, #212]	; (8004fdc <TIM_Base_SetConfig+0x12c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d02b      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f10:	d027      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a32      	ldr	r2, [pc, #200]	; (8004fe0 <TIM_Base_SetConfig+0x130>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d023      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a31      	ldr	r2, [pc, #196]	; (8004fe4 <TIM_Base_SetConfig+0x134>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01f      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a30      	ldr	r2, [pc, #192]	; (8004fe8 <TIM_Base_SetConfig+0x138>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01b      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2f      	ldr	r2, [pc, #188]	; (8004fec <TIM_Base_SetConfig+0x13c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d017      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2e      	ldr	r2, [pc, #184]	; (8004ff0 <TIM_Base_SetConfig+0x140>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ff4 <TIM_Base_SetConfig+0x144>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00f      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	; (8004ff8 <TIM_Base_SetConfig+0x148>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00b      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2b      	ldr	r2, [pc, #172]	; (8004ffc <TIM_Base_SetConfig+0x14c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d007      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2a      	ldr	r2, [pc, #168]	; (8005000 <TIM_Base_SetConfig+0x150>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d003      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a29      	ldr	r2, [pc, #164]	; (8005004 <TIM_Base_SetConfig+0x154>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d108      	bne.n	8004f74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a10      	ldr	r2, [pc, #64]	; (8004fdc <TIM_Base_SetConfig+0x12c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_Base_SetConfig+0xf8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a12      	ldr	r2, [pc, #72]	; (8004fec <TIM_Base_SetConfig+0x13c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d103      	bne.n	8004fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d105      	bne.n	8004fce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f023 0201 	bic.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	611a      	str	r2, [r3, #16]
  }
}
 8004fce:	bf00      	nop
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40000c00 	.word	0x40000c00
 8004fec:	40010400 	.word	0x40010400
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	40014800 	.word	0x40014800
 8004ffc:	40001800 	.word	0x40001800
 8005000:	40001c00 	.word	0x40001c00
 8005004:	40002000 	.word	0x40002000

08005008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f023 0201 	bic.w	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4b2b      	ldr	r3, [pc, #172]	; (80050e0 <TIM_OC1_SetConfig+0xd8>)
 8005034:	4013      	ands	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f023 0302 	bic.w	r3, r3, #2
 8005050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a21      	ldr	r2, [pc, #132]	; (80050e4 <TIM_OC1_SetConfig+0xdc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_OC1_SetConfig+0x64>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a20      	ldr	r2, [pc, #128]	; (80050e8 <TIM_OC1_SetConfig+0xe0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d10c      	bne.n	8005086 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0308 	bic.w	r3, r3, #8
 8005072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 0304 	bic.w	r3, r3, #4
 8005084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <TIM_OC1_SetConfig+0xdc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_OC1_SetConfig+0x8e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a15      	ldr	r2, [pc, #84]	; (80050e8 <TIM_OC1_SetConfig+0xe0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d111      	bne.n	80050ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800509c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	621a      	str	r2, [r3, #32]
}
 80050d4:	bf00      	nop
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	fffeff8f 	.word	0xfffeff8f
 80050e4:	40010000 	.word	0x40010000
 80050e8:	40010400 	.word	0x40010400

080050ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	f023 0210 	bic.w	r2, r3, #16
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4b2e      	ldr	r3, [pc, #184]	; (80051d0 <TIM_OC2_SetConfig+0xe4>)
 8005118:	4013      	ands	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	021b      	lsls	r3, r3, #8
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f023 0320 	bic.w	r3, r3, #32
 8005136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a23      	ldr	r2, [pc, #140]	; (80051d4 <TIM_OC2_SetConfig+0xe8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <TIM_OC2_SetConfig+0x68>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a22      	ldr	r2, [pc, #136]	; (80051d8 <TIM_OC2_SetConfig+0xec>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10d      	bne.n	8005170 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800515a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800516e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <TIM_OC2_SetConfig+0xe8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_OC2_SetConfig+0x94>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <TIM_OC2_SetConfig+0xec>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d113      	bne.n	80051a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800518e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	feff8fff 	.word	0xfeff8fff
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40010400 	.word	0x40010400

080051dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4b2d      	ldr	r3, [pc, #180]	; (80052bc <TIM_OC3_SetConfig+0xe0>)
 8005208:	4013      	ands	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a22      	ldr	r2, [pc, #136]	; (80052c0 <TIM_OC3_SetConfig+0xe4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_OC3_SetConfig+0x66>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a21      	ldr	r2, [pc, #132]	; (80052c4 <TIM_OC3_SetConfig+0xe8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d10d      	bne.n	800525e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800525c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <TIM_OC3_SetConfig+0xe4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_OC3_SetConfig+0x92>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <TIM_OC3_SetConfig+0xe8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d113      	bne.n	8005296 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800527c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	621a      	str	r2, [r3, #32]
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	fffeff8f 	.word	0xfffeff8f
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40010400 	.word	0x40010400

080052c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4b1e      	ldr	r3, [pc, #120]	; (800536c <TIM_OC4_SetConfig+0xa4>)
 80052f4:	4013      	ands	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	031b      	lsls	r3, r3, #12
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a13      	ldr	r2, [pc, #76]	; (8005370 <TIM_OC4_SetConfig+0xa8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d003      	beq.n	8005330 <TIM_OC4_SetConfig+0x68>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a12      	ldr	r2, [pc, #72]	; (8005374 <TIM_OC4_SetConfig+0xac>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d109      	bne.n	8005344 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005336:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	019b      	lsls	r3, r3, #6
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	feff8fff 	.word	0xfeff8fff
 8005370:	40010000 	.word	0x40010000
 8005374:	40010400 	.word	0x40010400

08005378 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <TIM_OC5_SetConfig+0x98>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a12      	ldr	r2, [pc, #72]	; (8005414 <TIM_OC5_SetConfig+0x9c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_OC5_SetConfig+0x5e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a11      	ldr	r2, [pc, #68]	; (8005418 <TIM_OC5_SetConfig+0xa0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d109      	bne.n	80053ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	621a      	str	r2, [r3, #32]
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	fffeff8f 	.word	0xfffeff8f
 8005414:	40010000 	.word	0x40010000
 8005418:	40010400 	.word	0x40010400

0800541c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4b1c      	ldr	r3, [pc, #112]	; (80054b8 <TIM_OC6_SetConfig+0x9c>)
 8005448:	4013      	ands	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800545e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	051b      	lsls	r3, r3, #20
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a13      	ldr	r2, [pc, #76]	; (80054bc <TIM_OC6_SetConfig+0xa0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_OC6_SetConfig+0x60>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a12      	ldr	r2, [pc, #72]	; (80054c0 <TIM_OC6_SetConfig+0xa4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d109      	bne.n	8005490 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005482:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	029b      	lsls	r3, r3, #10
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	feff8fff 	.word	0xfeff8fff
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40010400 	.word	0x40010400

080054c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f023 0201 	bic.w	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f023 030a 	bic.w	r3, r3, #10
 8005500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	621a      	str	r2, [r3, #32]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005522:	b480      	push	{r7}
 8005524:	b087      	sub	sp, #28
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f023 0210 	bic.w	r2, r3, #16
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800554c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	031b      	lsls	r3, r3, #12
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800555e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	f043 0307 	orr.w	r3, r3, #7
 80055a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	021a      	lsls	r2, r3, #8
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	431a      	orrs	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4313      	orrs	r3, r2
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 031f 	and.w	r3, r3, #31
 800560a:	2201      	movs	r2, #1
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1a      	ldr	r2, [r3, #32]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	43db      	mvns	r3, r3
 800561a:	401a      	ands	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a1a      	ldr	r2, [r3, #32]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	fa01 f303 	lsl.w	r3, r1, r3
 8005630:	431a      	orrs	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005658:	2302      	movs	r3, #2
 800565a:	e06d      	b.n	8005738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a30      	ldr	r2, [pc, #192]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2f      	ldr	r2, [pc, #188]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d108      	bne.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005696:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a20      	ldr	r2, [pc, #128]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d022      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ce:	d01d      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1d      	ldr	r2, [pc, #116]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d018      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1c      	ldr	r2, [pc, #112]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d013      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1a      	ldr	r2, [pc, #104]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00e      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a15      	ldr	r2, [pc, #84]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a16      	ldr	r2, [pc, #88]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a15      	ldr	r2, [pc, #84]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10c      	bne.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005712:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	4313      	orrs	r3, r2
 800571c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	40010000 	.word	0x40010000
 8005748:	40010400 	.word	0x40010400
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40000c00 	.word	0x40000c00
 8005758:	40014000 	.word	0x40014000
 800575c:	40001800 	.word	0x40001800

08005760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e040      	b.n	80057f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fb fd5e 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2224      	movs	r2, #36	; 0x24
 800578c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0201 	bic.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fe6c 	bl	8006484 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fc05 	bl	8005fbc <UART_SetConfig>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e01b      	b.n	80057f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 feeb 	bl	80065c8 <UART_CheckIdleState>
 80057f2:	4603      	mov	r3, r0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005810:	2b20      	cmp	r3, #32
 8005812:	d177      	bne.n	8005904 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_UART_Transmit+0x24>
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e070      	b.n	8005906 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2221      	movs	r2, #33	; 0x21
 8005830:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005832:	f7fb ff27 	bl	8001684 <HAL_GetTick>
 8005836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	88fa      	ldrh	r2, [r7, #6]
 8005844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005850:	d108      	bne.n	8005864 <HAL_UART_Transmit+0x68>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d104      	bne.n	8005864 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	e003      	b.n	800586c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005868:	2300      	movs	r3, #0
 800586a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800586c:	e02f      	b.n	80058ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2200      	movs	r2, #0
 8005876:	2180      	movs	r1, #128	; 0x80
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 ff4d 	bl	8006718 <UART_WaitOnFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d004      	beq.n	800588e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e03b      	b.n	8005906 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	461a      	mov	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	3302      	adds	r3, #2
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	e007      	b.n	80058bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	781a      	ldrb	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	3301      	adds	r3, #1
 80058ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1c9      	bne.n	800586e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2200      	movs	r2, #0
 80058e2:	2140      	movs	r1, #64	; 0x40
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 ff17 	bl	8006718 <UART_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e005      	b.n	8005906 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005900:	2300      	movs	r3, #0
 8005902:	e000      	b.n	8005906 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005904:	2302      	movs	r3, #2
  }
}
 8005906:	4618      	mov	r0, r3
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b08a      	sub	sp, #40	; 0x28
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	4613      	mov	r3, r2
 800591a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005922:	2b20      	cmp	r3, #32
 8005924:	d132      	bne.n	800598c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <HAL_UART_Receive_IT+0x24>
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e02b      	b.n	800598e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d018      	beq.n	800597c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	613b      	str	r3, [r7, #16]
   return(result);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	623b      	str	r3, [r7, #32]
 800596a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	69f9      	ldr	r1, [r7, #28]
 800596e:	6a3a      	ldr	r2, [r7, #32]
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	61bb      	str	r3, [r7, #24]
   return(result);
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e6      	bne.n	800594a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800597c:	88fb      	ldrh	r3, [r7, #6]
 800597e:	461a      	mov	r2, r3
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 ff36 	bl	80067f4 <UART_Start_Receive_IT>
 8005988:	4603      	mov	r3, r0
 800598a:	e000      	b.n	800598e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3728      	adds	r7, #40	; 0x28
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b0ba      	sub	sp, #232	; 0xe8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80059c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80059c6:	4013      	ands	r3, r2
 80059c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80059cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d115      	bne.n	8005a00 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00f      	beq.n	8005a00 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d009      	beq.n	8005a00 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 82ac 	beq.w	8005f4e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	4798      	blx	r3
      }
      return;
 80059fe:	e2a6      	b.n	8005f4e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 8117 	beq.w	8005c38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a1a:	4b85      	ldr	r3, [pc, #532]	; (8005c30 <HAL_UART_IRQHandler+0x298>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 810a 	beq.w	8005c38 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d011      	beq.n	8005a54 <HAL_UART_IRQHandler+0xbc>
 8005a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00b      	beq.n	8005a54 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2201      	movs	r2, #1
 8005a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4a:	f043 0201 	orr.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d011      	beq.n	8005a84 <HAL_UART_IRQHandler+0xec>
 8005a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00b      	beq.n	8005a84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2202      	movs	r2, #2
 8005a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7a:	f043 0204 	orr.w	r2, r3, #4
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d011      	beq.n	8005ab4 <HAL_UART_IRQHandler+0x11c>
 8005a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2204      	movs	r2, #4
 8005aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aaa:	f043 0202 	orr.w	r2, r3, #2
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d017      	beq.n	8005af0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d105      	bne.n	8005ad8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2208      	movs	r2, #8
 8005ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae6:	f043 0208 	orr.w	r2, r3, #8
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d012      	beq.n	8005b22 <HAL_UART_IRQHandler+0x18a>
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00c      	beq.n	8005b22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b18:	f043 0220 	orr.w	r2, r3, #32
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8212 	beq.w	8005f52 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00d      	beq.n	8005b56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6a:	2b40      	cmp	r3, #64	; 0x40
 8005b6c:	d005      	beq.n	8005b7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d04f      	beq.n	8005c1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 ff00 	bl	8006980 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8a:	2b40      	cmp	r3, #64	; 0x40
 8005b8c:	d141      	bne.n	8005c12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3308      	adds	r3, #8
 8005b94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1d9      	bne.n	8005b8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d013      	beq.n	8005c0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be6:	4a13      	ldr	r2, [pc, #76]	; (8005c34 <HAL_UART_IRQHandler+0x29c>)
 8005be8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fc fb46 	bl	8002280 <HAL_DMA_Abort_IT>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d017      	beq.n	8005c2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c04:	4610      	mov	r0, r2
 8005c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c08:	e00f      	b.n	8005c2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f9b6 	bl	8005f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c10:	e00b      	b.n	8005c2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f9b2 	bl	8005f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	e007      	b.n	8005c2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f9ae 	bl	8005f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005c28:	e193      	b.n	8005f52 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c2a:	bf00      	nop
    return;
 8005c2c:	e191      	b.n	8005f52 <HAL_UART_IRQHandler+0x5ba>
 8005c2e:	bf00      	nop
 8005c30:	04000120 	.word	0x04000120
 8005c34:	08006a49 	.word	0x08006a49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	f040 814c 	bne.w	8005eda <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 8145 	beq.w	8005eda <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 813e 	beq.w	8005eda <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2210      	movs	r2, #16
 8005c64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	f040 80b6 	bne.w	8005de2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 8165 	beq.w	8005f56 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c96:	429a      	cmp	r2, r3
 8005c98:	f080 815d 	bcs.w	8005f56 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ca2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb0:	f000 8086 	beq.w	8005dc0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ce2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1da      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3308      	adds	r3, #8
 8005d04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d10:	f023 0301 	bic.w	r3, r3, #1
 8005d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e1      	bne.n	8005cfe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3308      	adds	r3, #8
 8005d5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e3      	bne.n	8005d3a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d90:	f023 0310 	bic.w	r3, r3, #16
 8005d94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005da2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005da4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005da8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e4      	bne.n	8005d80 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fc f9f0 	bl	80021a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f8d8 	bl	8005f90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005de0:	e0b9      	b.n	8005f56 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80ab 	beq.w	8005f5a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 80a6 	beq.w	8005f5a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e30:	647b      	str	r3, [r7, #68]	; 0x44
 8005e32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e4      	bne.n	8005e0e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	e853 3f00 	ldrex	r3, [r3]
 8005e52:	623b      	str	r3, [r7, #32]
   return(result);
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3308      	adds	r3, #8
 8005e64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e68:	633a      	str	r2, [r7, #48]	; 0x30
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e3      	bne.n	8005e44 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f023 0310 	bic.w	r3, r3, #16
 8005ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	69b9      	ldr	r1, [r7, #24]
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e4      	bne.n	8005e90 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ecc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f85c 	bl	8005f90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ed8:	e03f      	b.n	8005f5a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00e      	beq.n	8005f04 <HAL_UART_IRQHandler+0x56c>
 8005ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d008      	beq.n	8005f04 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005efa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f853 	bl	8005fa8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f02:	e02d      	b.n	8005f60 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00e      	beq.n	8005f2e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d008      	beq.n	8005f2e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01c      	beq.n	8005f5e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	4798      	blx	r3
    }
    return;
 8005f2c:	e017      	b.n	8005f5e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d012      	beq.n	8005f60 <HAL_UART_IRQHandler+0x5c8>
 8005f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00c      	beq.n	8005f60 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fd94 	bl	8006a74 <UART_EndTransmit_IT>
    return;
 8005f4c:	e008      	b.n	8005f60 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f4e:	bf00      	nop
 8005f50:	e006      	b.n	8005f60 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005f52:	bf00      	nop
 8005f54:	e004      	b.n	8005f60 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f56:	bf00      	nop
 8005f58:	e002      	b.n	8005f60 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f5a:	bf00      	nop
 8005f5c:	e000      	b.n	8005f60 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005f5e:	bf00      	nop
  }

}
 8005f60:	37e8      	adds	r7, #232	; 0xe8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop

08005f68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4ba6      	ldr	r3, [pc, #664]	; (8006280 <UART_SetConfig+0x2c4>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	6979      	ldr	r1, [r7, #20]
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	430a      	orrs	r2, r1
 800602c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a94      	ldr	r2, [pc, #592]	; (8006284 <UART_SetConfig+0x2c8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d120      	bne.n	800607a <UART_SetConfig+0xbe>
 8006038:	4b93      	ldr	r3, [pc, #588]	; (8006288 <UART_SetConfig+0x2cc>)
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	2b03      	cmp	r3, #3
 8006044:	d816      	bhi.n	8006074 <UART_SetConfig+0xb8>
 8006046:	a201      	add	r2, pc, #4	; (adr r2, 800604c <UART_SetConfig+0x90>)
 8006048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604c:	0800605d 	.word	0x0800605d
 8006050:	08006069 	.word	0x08006069
 8006054:	08006063 	.word	0x08006063
 8006058:	0800606f 	.word	0x0800606f
 800605c:	2301      	movs	r3, #1
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e150      	b.n	8006304 <UART_SetConfig+0x348>
 8006062:	2302      	movs	r3, #2
 8006064:	77fb      	strb	r3, [r7, #31]
 8006066:	e14d      	b.n	8006304 <UART_SetConfig+0x348>
 8006068:	2304      	movs	r3, #4
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e14a      	b.n	8006304 <UART_SetConfig+0x348>
 800606e:	2308      	movs	r3, #8
 8006070:	77fb      	strb	r3, [r7, #31]
 8006072:	e147      	b.n	8006304 <UART_SetConfig+0x348>
 8006074:	2310      	movs	r3, #16
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e144      	b.n	8006304 <UART_SetConfig+0x348>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a83      	ldr	r2, [pc, #524]	; (800628c <UART_SetConfig+0x2d0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d132      	bne.n	80060ea <UART_SetConfig+0x12e>
 8006084:	4b80      	ldr	r3, [pc, #512]	; (8006288 <UART_SetConfig+0x2cc>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608a:	f003 030c 	and.w	r3, r3, #12
 800608e:	2b0c      	cmp	r3, #12
 8006090:	d828      	bhi.n	80060e4 <UART_SetConfig+0x128>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <UART_SetConfig+0xdc>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060cd 	.word	0x080060cd
 800609c:	080060e5 	.word	0x080060e5
 80060a0:	080060e5 	.word	0x080060e5
 80060a4:	080060e5 	.word	0x080060e5
 80060a8:	080060d9 	.word	0x080060d9
 80060ac:	080060e5 	.word	0x080060e5
 80060b0:	080060e5 	.word	0x080060e5
 80060b4:	080060e5 	.word	0x080060e5
 80060b8:	080060d3 	.word	0x080060d3
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	080060e5 	.word	0x080060e5
 80060c8:	080060df 	.word	0x080060df
 80060cc:	2300      	movs	r3, #0
 80060ce:	77fb      	strb	r3, [r7, #31]
 80060d0:	e118      	b.n	8006304 <UART_SetConfig+0x348>
 80060d2:	2302      	movs	r3, #2
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e115      	b.n	8006304 <UART_SetConfig+0x348>
 80060d8:	2304      	movs	r3, #4
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	e112      	b.n	8006304 <UART_SetConfig+0x348>
 80060de:	2308      	movs	r3, #8
 80060e0:	77fb      	strb	r3, [r7, #31]
 80060e2:	e10f      	b.n	8006304 <UART_SetConfig+0x348>
 80060e4:	2310      	movs	r3, #16
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e10c      	b.n	8006304 <UART_SetConfig+0x348>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a68      	ldr	r2, [pc, #416]	; (8006290 <UART_SetConfig+0x2d4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d120      	bne.n	8006136 <UART_SetConfig+0x17a>
 80060f4:	4b64      	ldr	r3, [pc, #400]	; (8006288 <UART_SetConfig+0x2cc>)
 80060f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060fe:	2b30      	cmp	r3, #48	; 0x30
 8006100:	d013      	beq.n	800612a <UART_SetConfig+0x16e>
 8006102:	2b30      	cmp	r3, #48	; 0x30
 8006104:	d814      	bhi.n	8006130 <UART_SetConfig+0x174>
 8006106:	2b20      	cmp	r3, #32
 8006108:	d009      	beq.n	800611e <UART_SetConfig+0x162>
 800610a:	2b20      	cmp	r3, #32
 800610c:	d810      	bhi.n	8006130 <UART_SetConfig+0x174>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <UART_SetConfig+0x15c>
 8006112:	2b10      	cmp	r3, #16
 8006114:	d006      	beq.n	8006124 <UART_SetConfig+0x168>
 8006116:	e00b      	b.n	8006130 <UART_SetConfig+0x174>
 8006118:	2300      	movs	r3, #0
 800611a:	77fb      	strb	r3, [r7, #31]
 800611c:	e0f2      	b.n	8006304 <UART_SetConfig+0x348>
 800611e:	2302      	movs	r3, #2
 8006120:	77fb      	strb	r3, [r7, #31]
 8006122:	e0ef      	b.n	8006304 <UART_SetConfig+0x348>
 8006124:	2304      	movs	r3, #4
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e0ec      	b.n	8006304 <UART_SetConfig+0x348>
 800612a:	2308      	movs	r3, #8
 800612c:	77fb      	strb	r3, [r7, #31]
 800612e:	e0e9      	b.n	8006304 <UART_SetConfig+0x348>
 8006130:	2310      	movs	r3, #16
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e0e6      	b.n	8006304 <UART_SetConfig+0x348>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a56      	ldr	r2, [pc, #344]	; (8006294 <UART_SetConfig+0x2d8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d120      	bne.n	8006182 <UART_SetConfig+0x1c6>
 8006140:	4b51      	ldr	r3, [pc, #324]	; (8006288 <UART_SetConfig+0x2cc>)
 8006142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006146:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800614a:	2bc0      	cmp	r3, #192	; 0xc0
 800614c:	d013      	beq.n	8006176 <UART_SetConfig+0x1ba>
 800614e:	2bc0      	cmp	r3, #192	; 0xc0
 8006150:	d814      	bhi.n	800617c <UART_SetConfig+0x1c0>
 8006152:	2b80      	cmp	r3, #128	; 0x80
 8006154:	d009      	beq.n	800616a <UART_SetConfig+0x1ae>
 8006156:	2b80      	cmp	r3, #128	; 0x80
 8006158:	d810      	bhi.n	800617c <UART_SetConfig+0x1c0>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <UART_SetConfig+0x1a8>
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d006      	beq.n	8006170 <UART_SetConfig+0x1b4>
 8006162:	e00b      	b.n	800617c <UART_SetConfig+0x1c0>
 8006164:	2300      	movs	r3, #0
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e0cc      	b.n	8006304 <UART_SetConfig+0x348>
 800616a:	2302      	movs	r3, #2
 800616c:	77fb      	strb	r3, [r7, #31]
 800616e:	e0c9      	b.n	8006304 <UART_SetConfig+0x348>
 8006170:	2304      	movs	r3, #4
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e0c6      	b.n	8006304 <UART_SetConfig+0x348>
 8006176:	2308      	movs	r3, #8
 8006178:	77fb      	strb	r3, [r7, #31]
 800617a:	e0c3      	b.n	8006304 <UART_SetConfig+0x348>
 800617c:	2310      	movs	r3, #16
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e0c0      	b.n	8006304 <UART_SetConfig+0x348>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a44      	ldr	r2, [pc, #272]	; (8006298 <UART_SetConfig+0x2dc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d125      	bne.n	80061d8 <UART_SetConfig+0x21c>
 800618c:	4b3e      	ldr	r3, [pc, #248]	; (8006288 <UART_SetConfig+0x2cc>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800619a:	d017      	beq.n	80061cc <UART_SetConfig+0x210>
 800619c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a0:	d817      	bhi.n	80061d2 <UART_SetConfig+0x216>
 80061a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a6:	d00b      	beq.n	80061c0 <UART_SetConfig+0x204>
 80061a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ac:	d811      	bhi.n	80061d2 <UART_SetConfig+0x216>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <UART_SetConfig+0x1fe>
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b6:	d006      	beq.n	80061c6 <UART_SetConfig+0x20a>
 80061b8:	e00b      	b.n	80061d2 <UART_SetConfig+0x216>
 80061ba:	2300      	movs	r3, #0
 80061bc:	77fb      	strb	r3, [r7, #31]
 80061be:	e0a1      	b.n	8006304 <UART_SetConfig+0x348>
 80061c0:	2302      	movs	r3, #2
 80061c2:	77fb      	strb	r3, [r7, #31]
 80061c4:	e09e      	b.n	8006304 <UART_SetConfig+0x348>
 80061c6:	2304      	movs	r3, #4
 80061c8:	77fb      	strb	r3, [r7, #31]
 80061ca:	e09b      	b.n	8006304 <UART_SetConfig+0x348>
 80061cc:	2308      	movs	r3, #8
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e098      	b.n	8006304 <UART_SetConfig+0x348>
 80061d2:	2310      	movs	r3, #16
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	e095      	b.n	8006304 <UART_SetConfig+0x348>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2f      	ldr	r2, [pc, #188]	; (800629c <UART_SetConfig+0x2e0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d125      	bne.n	800622e <UART_SetConfig+0x272>
 80061e2:	4b29      	ldr	r3, [pc, #164]	; (8006288 <UART_SetConfig+0x2cc>)
 80061e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061f0:	d017      	beq.n	8006222 <UART_SetConfig+0x266>
 80061f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061f6:	d817      	bhi.n	8006228 <UART_SetConfig+0x26c>
 80061f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fc:	d00b      	beq.n	8006216 <UART_SetConfig+0x25a>
 80061fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006202:	d811      	bhi.n	8006228 <UART_SetConfig+0x26c>
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <UART_SetConfig+0x254>
 8006208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620c:	d006      	beq.n	800621c <UART_SetConfig+0x260>
 800620e:	e00b      	b.n	8006228 <UART_SetConfig+0x26c>
 8006210:	2301      	movs	r3, #1
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e076      	b.n	8006304 <UART_SetConfig+0x348>
 8006216:	2302      	movs	r3, #2
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e073      	b.n	8006304 <UART_SetConfig+0x348>
 800621c:	2304      	movs	r3, #4
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e070      	b.n	8006304 <UART_SetConfig+0x348>
 8006222:	2308      	movs	r3, #8
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e06d      	b.n	8006304 <UART_SetConfig+0x348>
 8006228:	2310      	movs	r3, #16
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e06a      	b.n	8006304 <UART_SetConfig+0x348>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <UART_SetConfig+0x2e4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d138      	bne.n	80062aa <UART_SetConfig+0x2ee>
 8006238:	4b13      	ldr	r3, [pc, #76]	; (8006288 <UART_SetConfig+0x2cc>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006242:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006246:	d017      	beq.n	8006278 <UART_SetConfig+0x2bc>
 8006248:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800624c:	d82a      	bhi.n	80062a4 <UART_SetConfig+0x2e8>
 800624e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006252:	d00b      	beq.n	800626c <UART_SetConfig+0x2b0>
 8006254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006258:	d824      	bhi.n	80062a4 <UART_SetConfig+0x2e8>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <UART_SetConfig+0x2aa>
 800625e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006262:	d006      	beq.n	8006272 <UART_SetConfig+0x2b6>
 8006264:	e01e      	b.n	80062a4 <UART_SetConfig+0x2e8>
 8006266:	2300      	movs	r3, #0
 8006268:	77fb      	strb	r3, [r7, #31]
 800626a:	e04b      	b.n	8006304 <UART_SetConfig+0x348>
 800626c:	2302      	movs	r3, #2
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e048      	b.n	8006304 <UART_SetConfig+0x348>
 8006272:	2304      	movs	r3, #4
 8006274:	77fb      	strb	r3, [r7, #31]
 8006276:	e045      	b.n	8006304 <UART_SetConfig+0x348>
 8006278:	2308      	movs	r3, #8
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e042      	b.n	8006304 <UART_SetConfig+0x348>
 800627e:	bf00      	nop
 8006280:	efff69f3 	.word	0xefff69f3
 8006284:	40011000 	.word	0x40011000
 8006288:	40023800 	.word	0x40023800
 800628c:	40004400 	.word	0x40004400
 8006290:	40004800 	.word	0x40004800
 8006294:	40004c00 	.word	0x40004c00
 8006298:	40005000 	.word	0x40005000
 800629c:	40011400 	.word	0x40011400
 80062a0:	40007800 	.word	0x40007800
 80062a4:	2310      	movs	r3, #16
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e02c      	b.n	8006304 <UART_SetConfig+0x348>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a72      	ldr	r2, [pc, #456]	; (8006478 <UART_SetConfig+0x4bc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d125      	bne.n	8006300 <UART_SetConfig+0x344>
 80062b4:	4b71      	ldr	r3, [pc, #452]	; (800647c <UART_SetConfig+0x4c0>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80062be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062c2:	d017      	beq.n	80062f4 <UART_SetConfig+0x338>
 80062c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062c8:	d817      	bhi.n	80062fa <UART_SetConfig+0x33e>
 80062ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ce:	d00b      	beq.n	80062e8 <UART_SetConfig+0x32c>
 80062d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d4:	d811      	bhi.n	80062fa <UART_SetConfig+0x33e>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <UART_SetConfig+0x326>
 80062da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062de:	d006      	beq.n	80062ee <UART_SetConfig+0x332>
 80062e0:	e00b      	b.n	80062fa <UART_SetConfig+0x33e>
 80062e2:	2300      	movs	r3, #0
 80062e4:	77fb      	strb	r3, [r7, #31]
 80062e6:	e00d      	b.n	8006304 <UART_SetConfig+0x348>
 80062e8:	2302      	movs	r3, #2
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e00a      	b.n	8006304 <UART_SetConfig+0x348>
 80062ee:	2304      	movs	r3, #4
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e007      	b.n	8006304 <UART_SetConfig+0x348>
 80062f4:	2308      	movs	r3, #8
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e004      	b.n	8006304 <UART_SetConfig+0x348>
 80062fa:	2310      	movs	r3, #16
 80062fc:	77fb      	strb	r3, [r7, #31]
 80062fe:	e001      	b.n	8006304 <UART_SetConfig+0x348>
 8006300:	2310      	movs	r3, #16
 8006302:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800630c:	d15b      	bne.n	80063c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800630e:	7ffb      	ldrb	r3, [r7, #31]
 8006310:	2b08      	cmp	r3, #8
 8006312:	d828      	bhi.n	8006366 <UART_SetConfig+0x3aa>
 8006314:	a201      	add	r2, pc, #4	; (adr r2, 800631c <UART_SetConfig+0x360>)
 8006316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631a:	bf00      	nop
 800631c:	08006341 	.word	0x08006341
 8006320:	08006349 	.word	0x08006349
 8006324:	08006351 	.word	0x08006351
 8006328:	08006367 	.word	0x08006367
 800632c:	08006357 	.word	0x08006357
 8006330:	08006367 	.word	0x08006367
 8006334:	08006367 	.word	0x08006367
 8006338:	08006367 	.word	0x08006367
 800633c:	0800635f 	.word	0x0800635f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006340:	f7fd fd56 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 8006344:	61b8      	str	r0, [r7, #24]
        break;
 8006346:	e013      	b.n	8006370 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006348:	f7fd fd66 	bl	8003e18 <HAL_RCC_GetPCLK2Freq>
 800634c:	61b8      	str	r0, [r7, #24]
        break;
 800634e:	e00f      	b.n	8006370 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006350:	4b4b      	ldr	r3, [pc, #300]	; (8006480 <UART_SetConfig+0x4c4>)
 8006352:	61bb      	str	r3, [r7, #24]
        break;
 8006354:	e00c      	b.n	8006370 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006356:	f7fd fc39 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 800635a:	61b8      	str	r0, [r7, #24]
        break;
 800635c:	e008      	b.n	8006370 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800635e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006362:	61bb      	str	r3, [r7, #24]
        break;
 8006364:	e004      	b.n	8006370 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	77bb      	strb	r3, [r7, #30]
        break;
 800636e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d074      	beq.n	8006460 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	005a      	lsls	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	441a      	add	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	fbb2 f3f3 	udiv	r3, r2, r3
 800638a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	2b0f      	cmp	r3, #15
 8006390:	d916      	bls.n	80063c0 <UART_SetConfig+0x404>
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006398:	d212      	bcs.n	80063c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	b29b      	uxth	r3, r3
 800639e:	f023 030f 	bic.w	r3, r3, #15
 80063a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	085b      	lsrs	r3, r3, #1
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	89fb      	ldrh	r3, [r7, #14]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	89fa      	ldrh	r2, [r7, #14]
 80063bc:	60da      	str	r2, [r3, #12]
 80063be:	e04f      	b.n	8006460 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	77bb      	strb	r3, [r7, #30]
 80063c4:	e04c      	b.n	8006460 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063c6:	7ffb      	ldrb	r3, [r7, #31]
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d828      	bhi.n	800641e <UART_SetConfig+0x462>
 80063cc:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <UART_SetConfig+0x418>)
 80063ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d2:	bf00      	nop
 80063d4:	080063f9 	.word	0x080063f9
 80063d8:	08006401 	.word	0x08006401
 80063dc:	08006409 	.word	0x08006409
 80063e0:	0800641f 	.word	0x0800641f
 80063e4:	0800640f 	.word	0x0800640f
 80063e8:	0800641f 	.word	0x0800641f
 80063ec:	0800641f 	.word	0x0800641f
 80063f0:	0800641f 	.word	0x0800641f
 80063f4:	08006417 	.word	0x08006417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063f8:	f7fd fcfa 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 80063fc:	61b8      	str	r0, [r7, #24]
        break;
 80063fe:	e013      	b.n	8006428 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006400:	f7fd fd0a 	bl	8003e18 <HAL_RCC_GetPCLK2Freq>
 8006404:	61b8      	str	r0, [r7, #24]
        break;
 8006406:	e00f      	b.n	8006428 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006408:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <UART_SetConfig+0x4c4>)
 800640a:	61bb      	str	r3, [r7, #24]
        break;
 800640c:	e00c      	b.n	8006428 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800640e:	f7fd fbdd 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8006412:	61b8      	str	r0, [r7, #24]
        break;
 8006414:	e008      	b.n	8006428 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641a:	61bb      	str	r3, [r7, #24]
        break;
 800641c:	e004      	b.n	8006428 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	77bb      	strb	r3, [r7, #30]
        break;
 8006426:	bf00      	nop
    }

    if (pclk != 0U)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d018      	beq.n	8006460 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	085a      	lsrs	r2, r3, #1
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	441a      	add	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006440:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b0f      	cmp	r3, #15
 8006446:	d909      	bls.n	800645c <UART_SetConfig+0x4a0>
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800644e:	d205      	bcs.n	800645c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	b29a      	uxth	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	e001      	b.n	8006460 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800646c:	7fbb      	ldrb	r3, [r7, #30]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3720      	adds	r7, #32
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	40007c00 	.word	0x40007c00
 800647c:	40023800 	.word	0x40023800
 8006480:	00f42400 	.word	0x00f42400

08006484 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01a      	beq.n	800659a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006582:	d10a      	bne.n	800659a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	605a      	str	r2, [r3, #4]
  }
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b098      	sub	sp, #96	; 0x60
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065d8:	f7fb f854 	bl	8001684 <HAL_GetTick>
 80065dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d12e      	bne.n	800664a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f4:	2200      	movs	r2, #0
 80065f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f88c 	bl	8006718 <UART_WaitOnFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d021      	beq.n	800664a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800661a:	653b      	str	r3, [r7, #80]	; 0x50
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006624:	647b      	str	r3, [r7, #68]	; 0x44
 8006626:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800662a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e6      	bne.n	8006606 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2220      	movs	r2, #32
 800663c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e062      	b.n	8006710 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b04      	cmp	r3, #4
 8006656:	d149      	bne.n	80066ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006660:	2200      	movs	r2, #0
 8006662:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f856 	bl	8006718 <UART_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d03c      	beq.n	80066ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	623b      	str	r3, [r7, #32]
   return(result);
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006690:	633b      	str	r3, [r7, #48]	; 0x30
 8006692:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e6      	bne.n	8006672 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3308      	adds	r3, #8
 80066aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0301 	bic.w	r3, r3, #1
 80066ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066c4:	61fa      	str	r2, [r7, #28]
 80066c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	69b9      	ldr	r1, [r7, #24]
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	617b      	str	r3, [r7, #20]
   return(result);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e5      	bne.n	80066a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e011      	b.n	8006710 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3758      	adds	r7, #88	; 0x58
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	4613      	mov	r3, r2
 8006726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006728:	e04f      	b.n	80067ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006730:	d04b      	beq.n	80067ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006732:	f7fa ffa7 	bl	8001684 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	429a      	cmp	r2, r3
 8006740:	d302      	bcc.n	8006748 <UART_WaitOnFlagUntilTimeout+0x30>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e04e      	b.n	80067ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b00      	cmp	r3, #0
 8006758:	d037      	beq.n	80067ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b80      	cmp	r3, #128	; 0x80
 800675e:	d034      	beq.n	80067ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b40      	cmp	r3, #64	; 0x40
 8006764:	d031      	beq.n	80067ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b08      	cmp	r3, #8
 8006772:	d110      	bne.n	8006796 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2208      	movs	r2, #8
 800677a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 f8ff 	bl	8006980 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2208      	movs	r2, #8
 8006786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e029      	b.n	80067ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a4:	d111      	bne.n	80067ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 f8e5 	bl	8006980 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e00f      	b.n	80067ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4013      	ands	r3, r2
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	bf0c      	ite	eq
 80067da:	2301      	moveq	r3, #1
 80067dc:	2300      	movne	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d0a0      	beq.n	800672a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b097      	sub	sp, #92	; 0x5c
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	88fa      	ldrh	r2, [r7, #6]
 800680c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	88fa      	ldrh	r2, [r7, #6]
 8006814:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006826:	d10e      	bne.n	8006846 <UART_Start_Receive_IT+0x52>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d105      	bne.n	800683c <UART_Start_Receive_IT+0x48>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006836:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800683a:	e02d      	b.n	8006898 <UART_Start_Receive_IT+0xa4>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	22ff      	movs	r2, #255	; 0xff
 8006840:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006844:	e028      	b.n	8006898 <UART_Start_Receive_IT+0xa4>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10d      	bne.n	800686a <UART_Start_Receive_IT+0x76>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d104      	bne.n	8006860 <UART_Start_Receive_IT+0x6c>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	22ff      	movs	r2, #255	; 0xff
 800685a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800685e:	e01b      	b.n	8006898 <UART_Start_Receive_IT+0xa4>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	227f      	movs	r2, #127	; 0x7f
 8006864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006868:	e016      	b.n	8006898 <UART_Start_Receive_IT+0xa4>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006872:	d10d      	bne.n	8006890 <UART_Start_Receive_IT+0x9c>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <UART_Start_Receive_IT+0x92>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	227f      	movs	r2, #127	; 0x7f
 8006880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006884:	e008      	b.n	8006898 <UART_Start_Receive_IT+0xa4>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	223f      	movs	r2, #63	; 0x3f
 800688a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800688e:	e003      	b.n	8006898 <UART_Start_Receive_IT+0xa4>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2222      	movs	r2, #34	; 0x22
 80068a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3308      	adds	r3, #8
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	657b      	str	r3, [r7, #84]	; 0x54
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3308      	adds	r3, #8
 80068c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80068ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e5      	bne.n	80068a8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e4:	d107      	bne.n	80068f6 <UART_Start_Receive_IT+0x102>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d103      	bne.n	80068f6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4a21      	ldr	r2, [pc, #132]	; (8006978 <UART_Start_Receive_IT+0x184>)
 80068f2:	669a      	str	r2, [r3, #104]	; 0x68
 80068f4:	e002      	b.n	80068fc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a20      	ldr	r2, [pc, #128]	; (800697c <UART_Start_Receive_IT+0x188>)
 80068fa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d019      	beq.n	8006938 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
 8006924:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e6      	bne.n	8006904 <UART_Start_Receive_IT+0x110>
 8006936:	e018      	b.n	800696a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	613b      	str	r3, [r7, #16]
   return(result);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f043 0320 	orr.w	r3, r3, #32
 800694c:	653b      	str	r3, [r7, #80]	; 0x50
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006956:	623b      	str	r3, [r7, #32]
 8006958:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	69f9      	ldr	r1, [r7, #28]
 800695c:	6a3a      	ldr	r2, [r7, #32]
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	61bb      	str	r3, [r7, #24]
   return(result);
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e6      	bne.n	8006938 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	375c      	adds	r7, #92	; 0x5c
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	08006c71 	.word	0x08006c71
 800697c:	08006ac9 	.word	0x08006ac9

08006980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b095      	sub	sp, #84	; 0x54
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800699c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a6:	643b      	str	r3, [r7, #64]	; 0x40
 80069a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e6      	bne.n	8006988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3308      	adds	r3, #8
 80069d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e5      	bne.n	80069ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d118      	bne.n	8006a28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f023 0310 	bic.w	r3, r3, #16
 8006a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a14:	61bb      	str	r3, [r7, #24]
 8006a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6979      	ldr	r1, [r7, #20]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	613b      	str	r3, [r7, #16]
   return(result);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e6      	bne.n	80069f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a3c:	bf00      	nop
 8006a3e:	3754      	adds	r7, #84	; 0x54
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff fa88 	bl	8005f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a6c:	bf00      	nop
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a90:	61fb      	str	r3, [r7, #28]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	61bb      	str	r3, [r7, #24]
 8006a9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6979      	ldr	r1, [r7, #20]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e6      	bne.n	8006a7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fa54 	bl	8005f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ac0:	bf00      	nop
 8006ac2:	3720      	adds	r7, #32
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b09c      	sub	sp, #112	; 0x70
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ad6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ae0:	2b22      	cmp	r3, #34	; 0x22
 8006ae2:	f040 80b9 	bne.w	8006c58 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006af0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006af4:	b2d9      	uxtb	r1, r3
 8006af6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b00:	400a      	ands	r2, r1
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f040 809c 	bne.w	8006c68 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e6      	bne.n	8006b30 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3308      	adds	r3, #8
 8006b68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b74:	f023 0301 	bic.w	r3, r3, #1
 8006b78:	667b      	str	r3, [r7, #100]	; 0x64
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3308      	adds	r3, #8
 8006b80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b82:	647a      	str	r2, [r7, #68]	; 0x44
 8006b84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e5      	bne.n	8006b62 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d018      	beq.n	8006bea <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bd8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e6      	bne.n	8006bb8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d12e      	bne.n	8006c50 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f023 0310 	bic.w	r3, r3, #16
 8006c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	69b9      	ldr	r1, [r7, #24]
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	617b      	str	r3, [r7, #20]
   return(result);
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e6      	bne.n	8006bf8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	f003 0310 	and.w	r3, r3, #16
 8006c34:	2b10      	cmp	r3, #16
 8006c36:	d103      	bne.n	8006c40 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2210      	movs	r2, #16
 8006c3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff f9a1 	bl	8005f90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c4e:	e00b      	b.n	8006c68 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7f9 ffa9 	bl	8000ba8 <HAL_UART_RxCpltCallback>
}
 8006c56:	e007      	b.n	8006c68 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0208 	orr.w	r2, r2, #8
 8006c66:	619a      	str	r2, [r3, #24]
}
 8006c68:	bf00      	nop
 8006c6a:	3770      	adds	r7, #112	; 0x70
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b09c      	sub	sp, #112	; 0x70
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c88:	2b22      	cmp	r3, #34	; 0x22
 8006c8a:	f040 80b9 	bne.w	8006e00 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006ca2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb2:	1c9a      	adds	r2, r3, #2
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f040 809c 	bne.w	8006e10 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cec:	667b      	str	r3, [r7, #100]	; 0x64
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cf6:	657b      	str	r3, [r7, #84]	; 0x54
 8006cf8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006cfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e6      	bne.n	8006cd8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3308      	adds	r3, #8
 8006d10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	f023 0301 	bic.w	r3, r3, #1
 8006d20:	663b      	str	r3, [r7, #96]	; 0x60
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3308      	adds	r3, #8
 8006d28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d2a:	643a      	str	r2, [r7, #64]	; 0x40
 8006d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e5      	bne.n	8006d0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d018      	beq.n	8006d92 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d80:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e6      	bne.n	8006d60 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d12e      	bne.n	8006df8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f023 0310 	bic.w	r3, r3, #16
 8006db4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6979      	ldr	r1, [r7, #20]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	613b      	str	r3, [r7, #16]
   return(result);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e6      	bne.n	8006da0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b10      	cmp	r3, #16
 8006dde:	d103      	bne.n	8006de8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2210      	movs	r2, #16
 8006de6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff f8cd 	bl	8005f90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006df6:	e00b      	b.n	8006e10 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7f9 fed5 	bl	8000ba8 <HAL_UART_RxCpltCallback>
}
 8006dfe:	e007      	b.n	8006e10 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0208 	orr.w	r2, r2, #8
 8006e0e:	619a      	str	r2, [r3, #24]
}
 8006e10:	bf00      	nop
 8006e12:	3770      	adds	r7, #112	; 0x70
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e18:	b084      	sub	sp, #16
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	f107 001c 	add.w	r0, r7, #28
 8006e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e2a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d121      	bne.n	8006e76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	4b21      	ldr	r3, [pc, #132]	; (8006ec8 <USB_CoreInit+0xb0>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d105      	bne.n	8006e6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa92 	bl	8007394 <USB_CoreReset>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	e010      	b.n	8006e98 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fa86 	bl	8007394 <USB_CoreReset>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006e98:	7fbb      	ldrb	r3, [r7, #30]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d10b      	bne.n	8006eb6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f043 0206 	orr.w	r2, r3, #6
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f043 0220 	orr.w	r2, r3, #32
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ec2:	b004      	add	sp, #16
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	ffbdffbf 	.word	0xffbdffbf

08006ecc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f023 0201 	bic.w	r2, r3, #1
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f0a:	78fb      	ldrb	r3, [r7, #3]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d115      	bne.n	8006f3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f1c:	200a      	movs	r0, #10
 8006f1e:	f7fa fbbd 	bl	800169c <HAL_Delay>
      ms += 10U;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	330a      	adds	r3, #10
 8006f26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fa25 	bl	8007378 <USB_GetMode>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d01e      	beq.n	8006f72 <USB_SetCurrentMode+0x84>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2bc7      	cmp	r3, #199	; 0xc7
 8006f38:	d9f0      	bls.n	8006f1c <USB_SetCurrentMode+0x2e>
 8006f3a:	e01a      	b.n	8006f72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d115      	bne.n	8006f6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f4e:	200a      	movs	r0, #10
 8006f50:	f7fa fba4 	bl	800169c <HAL_Delay>
      ms += 10U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	330a      	adds	r3, #10
 8006f58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa0c 	bl	8007378 <USB_GetMode>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <USB_SetCurrentMode+0x84>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2bc7      	cmp	r3, #199	; 0xc7
 8006f6a:	d9f0      	bls.n	8006f4e <USB_SetCurrentMode+0x60>
 8006f6c:	e001      	b.n	8006f72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e005      	b.n	8006f7e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2bc8      	cmp	r3, #200	; 0xc8
 8006f76:	d101      	bne.n	8006f7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f88:	b084      	sub	sp, #16
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b086      	sub	sp, #24
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	e009      	b.n	8006fbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	3340      	adds	r3, #64	; 0x40
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	2b0e      	cmp	r3, #14
 8006fc0:	d9f2      	bls.n	8006fa8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fc2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d11c      	bne.n	8007004 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fd8:	f043 0302 	orr.w	r3, r3, #2
 8006fdc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	e005      	b.n	8007010 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007016:	461a      	mov	r2, r3
 8007018:	2300      	movs	r3, #0
 800701a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800701c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007020:	2b01      	cmp	r3, #1
 8007022:	d10d      	bne.n	8007040 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007028:	2b00      	cmp	r3, #0
 800702a:	d104      	bne.n	8007036 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800702c:	2100      	movs	r1, #0
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f968 	bl	8007304 <USB_SetDevSpeed>
 8007034:	e008      	b.n	8007048 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007036:	2101      	movs	r1, #1
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f963 	bl	8007304 <USB_SetDevSpeed>
 800703e:	e003      	b.n	8007048 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007040:	2103      	movs	r1, #3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f95e 	bl	8007304 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007048:	2110      	movs	r1, #16
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f8fa 	bl	8007244 <USB_FlushTxFifo>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f924 	bl	80072a8 <USB_FlushRxFifo>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007070:	461a      	mov	r2, r3
 8007072:	2300      	movs	r3, #0
 8007074:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707c:	461a      	mov	r2, r3
 800707e:	2300      	movs	r3, #0
 8007080:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007088:	461a      	mov	r2, r3
 800708a:	2300      	movs	r3, #0
 800708c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800708e:	2300      	movs	r3, #0
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	e043      	b.n	800711c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070aa:	d118      	bne.n	80070de <USB_DevInit+0x156>
    {
      if (i == 0U)
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070be:	461a      	mov	r2, r3
 80070c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e013      	b.n	80070f0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	461a      	mov	r2, r3
 80070d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	e008      	b.n	80070f0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ea:	461a      	mov	r2, r3
 80070ec:	2300      	movs	r3, #0
 80070ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fc:	461a      	mov	r2, r3
 80070fe:	2300      	movs	r3, #0
 8007100:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710e:	461a      	mov	r2, r3
 8007110:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007114:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	3301      	adds	r3, #1
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007120:	461a      	mov	r2, r3
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	4293      	cmp	r3, r2
 8007126:	d3b5      	bcc.n	8007094 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007128:	2300      	movs	r3, #0
 800712a:	613b      	str	r3, [r7, #16]
 800712c:	e043      	b.n	80071b6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007144:	d118      	bne.n	8007178 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007158:	461a      	mov	r2, r3
 800715a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e013      	b.n	800718a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716e:	461a      	mov	r2, r3
 8007170:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	e008      	b.n	800718a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007184:	461a      	mov	r2, r3
 8007186:	2300      	movs	r3, #0
 8007188:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007196:	461a      	mov	r2, r3
 8007198:	2300      	movs	r3, #0
 800719a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a8:	461a      	mov	r2, r3
 80071aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	3301      	adds	r3, #1
 80071b4:	613b      	str	r3, [r7, #16]
 80071b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071ba:	461a      	mov	r2, r3
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	4293      	cmp	r3, r2
 80071c0:	d3b5      	bcc.n	800712e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d105      	bne.n	80071f8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f043 0210 	orr.w	r2, r3, #16
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699a      	ldr	r2, [r3, #24]
 80071fc:	4b0f      	ldr	r3, [pc, #60]	; (800723c <USB_DevInit+0x2b4>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007204:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	f043 0208 	orr.w	r2, r3, #8
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007218:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800721c:	2b01      	cmp	r3, #1
 800721e:	d105      	bne.n	800722c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699a      	ldr	r2, [r3, #24]
 8007224:	4b06      	ldr	r3, [pc, #24]	; (8007240 <USB_DevInit+0x2b8>)
 8007226:	4313      	orrs	r3, r2
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800722c:	7dfb      	ldrb	r3, [r7, #23]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007238:	b004      	add	sp, #16
 800723a:	4770      	bx	lr
 800723c:	803c3800 	.word	0x803c3800
 8007240:	40000004 	.word	0x40000004

08007244 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800725e:	d901      	bls.n	8007264 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e01b      	b.n	800729c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	daf2      	bge.n	8007252 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	019b      	lsls	r3, r3, #6
 8007274:	f043 0220 	orr.w	r2, r3, #32
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3301      	adds	r3, #1
 8007280:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007288:	d901      	bls.n	800728e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e006      	b.n	800729c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b20      	cmp	r3, #32
 8007298:	d0f0      	beq.n	800727c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80072c0:	d901      	bls.n	80072c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e018      	b.n	80072f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	daf2      	bge.n	80072b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2210      	movs	r2, #16
 80072d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80072e4:	d901      	bls.n	80072ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e006      	b.n	80072f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f003 0310 	and.w	r3, r3, #16
 80072f2:	2b10      	cmp	r3, #16
 80072f4:	d0f0      	beq.n	80072d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	68f9      	ldr	r1, [r7, #12]
 8007320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007324:	4313      	orrs	r3, r2
 8007326:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007350:	f023 0303 	bic.w	r3, r3, #3
 8007354:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007364:	f043 0302 	orr.w	r3, r3, #2
 8007368:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	f003 0301 	and.w	r3, r3, #1
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80073ac:	d901      	bls.n	80073b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e01b      	b.n	80073ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	daf2      	bge.n	80073a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	f043 0201 	orr.w	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3301      	adds	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80073d6:	d901      	bls.n	80073dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e006      	b.n	80073ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d0f0      	beq.n	80073ca <USB_CoreReset+0x36>

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <memset>:
 80073f6:	4402      	add	r2, r0
 80073f8:	4603      	mov	r3, r0
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d100      	bne.n	8007400 <memset+0xa>
 80073fe:	4770      	bx	lr
 8007400:	f803 1b01 	strb.w	r1, [r3], #1
 8007404:	e7f9      	b.n	80073fa <memset+0x4>
	...

08007408 <__libc_init_array>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	4d0d      	ldr	r5, [pc, #52]	; (8007440 <__libc_init_array+0x38>)
 800740c:	4c0d      	ldr	r4, [pc, #52]	; (8007444 <__libc_init_array+0x3c>)
 800740e:	1b64      	subs	r4, r4, r5
 8007410:	10a4      	asrs	r4, r4, #2
 8007412:	2600      	movs	r6, #0
 8007414:	42a6      	cmp	r6, r4
 8007416:	d109      	bne.n	800742c <__libc_init_array+0x24>
 8007418:	4d0b      	ldr	r5, [pc, #44]	; (8007448 <__libc_init_array+0x40>)
 800741a:	4c0c      	ldr	r4, [pc, #48]	; (800744c <__libc_init_array+0x44>)
 800741c:	f000 f818 	bl	8007450 <_init>
 8007420:	1b64      	subs	r4, r4, r5
 8007422:	10a4      	asrs	r4, r4, #2
 8007424:	2600      	movs	r6, #0
 8007426:	42a6      	cmp	r6, r4
 8007428:	d105      	bne.n	8007436 <__libc_init_array+0x2e>
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007430:	4798      	blx	r3
 8007432:	3601      	adds	r6, #1
 8007434:	e7ee      	b.n	8007414 <__libc_init_array+0xc>
 8007436:	f855 3b04 	ldr.w	r3, [r5], #4
 800743a:	4798      	blx	r3
 800743c:	3601      	adds	r6, #1
 800743e:	e7f2      	b.n	8007426 <__libc_init_array+0x1e>
 8007440:	080074b0 	.word	0x080074b0
 8007444:	080074b0 	.word	0x080074b0
 8007448:	080074b0 	.word	0x080074b0
 800744c:	080074b4 	.word	0x080074b4

08007450 <_init>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	bf00      	nop
 8007454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007456:	bc08      	pop	{r3}
 8007458:	469e      	mov	lr, r3
 800745a:	4770      	bx	lr

0800745c <_fini>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	bf00      	nop
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr
