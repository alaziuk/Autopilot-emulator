
Autopilot symulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee0  08005ee0  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee8  08005ee8  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000020  08005f10  00020020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000c0  08005fb0  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000075c  20000160  08006050  00020160  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200008bc  08006050  000208bc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002018e  2**0
                  CONTENTS, READONLY
 15 .debug_info   000179a8  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002d00  00000000  00000000  00037b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001350  00000000  00000000  0003a880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000f18  00000000  00000000  0003bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029749  00000000  00000000  0003cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000163af  00000000  00000000  00066231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00103600  00000000  00000000  0007c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000052c0  00000000  00000000  0017fbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006e  00000000  00000000  00184ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000160 	.word	0x20000160
 8000214:	00000000 	.word	0x00000000
 8000218:	08005e90 	.word	0x08005e90

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000164 	.word	0x20000164
 8000234:	08005e90 	.word	0x08005e90

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fe35 	bl	80011a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f824 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f9cc 	bl	80008dc <MX_GPIO_Init>
  MX_ETH_Init();
 8000544:	f000 f892 	bl	800066c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000548:	f000 f96a 	bl	8000820 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800054c:	f000 f998 	bl	8000880 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000550:	f000 f8da 	bl	8000708 <MX_TIM3_Init>
  MX_UART4_Init();
 8000554:	f000 f934 	bl	80007c0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  // start timer
  HAL_TIM_Base_Start_IT(&htim3);
 8000558:	4807      	ldr	r0, [pc, #28]	; (8000578 <main+0x44>)
 800055a:	f002 fff3 	bl	8003544 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart4, rx_data, RX_DATA);
 800055e:	2205      	movs	r2, #5
 8000560:	4906      	ldr	r1, [pc, #24]	; (800057c <main+0x48>)
 8000562:	4807      	ldr	r0, [pc, #28]	; (8000580 <main+0x4c>)
 8000564:	f003 fef3 	bl	800434e <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart4, tx_boot, TX_BOOT, UART_TIMEOUT);
 8000568:	230f      	movs	r3, #15
 800056a:	2211      	movs	r2, #17
 800056c:	4905      	ldr	r1, [pc, #20]	; (8000584 <main+0x50>)
 800056e:	4804      	ldr	r0, [pc, #16]	; (8000580 <main+0x4c>)
 8000570:	f003 fe64 	bl	800423c <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	e7fe      	b.n	8000574 <main+0x40>
 8000576:	bf00      	nop
 8000578:	20000264 	.word	0x20000264
 800057c:	200008a0 	.word	0x200008a0
 8000580:	200002b0 	.word	0x200002b0
 8000584:	08005ea8 	.word	0x08005ea8

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2234      	movs	r2, #52	; 0x34
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 fc4d 	bl	8005e36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ac:	f001 fe6e 	bl	800228c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <SystemClock_Config+0xdc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a2b      	ldr	r2, [pc, #172]	; (8000664 <SystemClock_Config+0xdc>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <SystemClock_Config+0xdc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <SystemClock_Config+0xe0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d0:	4a25      	ldr	r2, [pc, #148]	; (8000668 <SystemClock_Config+0xe0>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <SystemClock_Config+0xe0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005fc:	2360      	movs	r3, #96	; 0x60
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fe9b 	bl	800234c <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800061c:	f000 fabe 	bl	8000b9c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000620:	f001 fe44 	bl	80022ac <HAL_PWREx_EnableOverDrive>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800062a:	f000 fab7 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2103      	movs	r1, #3
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f92c 	bl	80028a8 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000656:	f000 faa1 	bl	8000b9c <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_ETH_Init+0x84>)
 8000672:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <MX_ETH_Init+0x88>)
 8000674:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <MX_ETH_Init+0x8c>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_ETH_Init+0x8c>)
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ETH_Init+0x8c>)
 8000684:	22e1      	movs	r2, #225	; 0xe1
 8000686:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_ETH_Init+0x8c>)
 800068a:	2200      	movs	r2, #0
 800068c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_ETH_Init+0x8c>)
 8000690:	2200      	movs	r2, #0
 8000692:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_ETH_Init+0x8c>)
 8000696:	2200      	movs	r2, #0
 8000698:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_ETH_Init+0x84>)
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <MX_ETH_Init+0x8c>)
 800069e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_ETH_Init+0x84>)
 80006a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006a6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_ETH_Init+0x84>)
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <MX_ETH_Init+0x90>)
 80006ac:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_ETH_Init+0x84>)
 80006b0:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_ETH_Init+0x94>)
 80006b2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_ETH_Init+0x84>)
 80006b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006ba:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <MX_ETH_Init+0x84>)
 80006be:	f000 ff97 	bl	80015f0 <HAL_ETH_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006c8:	f000 fa68 	bl	8000b9c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006cc:	2238      	movs	r2, #56	; 0x38
 80006ce:	2100      	movs	r1, #0
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_ETH_Init+0x98>)
 80006d2:	f005 fbb0 	bl	8005e36 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_ETH_Init+0x98>)
 80006d8:	2221      	movs	r2, #33	; 0x21
 80006da:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_ETH_Init+0x98>)
 80006de:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006e2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_ETH_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200001b4 	.word	0x200001b4
 80006f4:	40028000 	.word	0x40028000
 80006f8:	200008b0 	.word	0x200008b0
 80006fc:	200000c0 	.word	0x200000c0
 8000700:	20000020 	.word	0x20000020
 8000704:	2000017c 	.word	0x2000017c

08000708 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_TIM3_Init+0xb0>)
 800072e:	4a23      	ldr	r2, [pc, #140]	; (80007bc <MX_TIM3_Init+0xb4>)
 8000730:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_TIM3_Init+0xb0>)
 8000734:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000738:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_TIM3_Init+0xb0>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_TIM3_Init+0xb0>)
 8000742:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000746:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_TIM3_Init+0xb0>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_TIM3_Init+0xb0>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <MX_TIM3_Init+0xb0>)
 8000756:	f002 ff6d 	bl	8003634 <HAL_TIM_OC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000760:	f000 fa1c 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_TIM3_Init+0xb0>)
 8000774:	f003 fc68 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800077e:	f000 fa0d 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <MX_TIM3_Init+0xb0>)
 800079a:	f003 f8a9 	bl	80038f0 <HAL_TIM_OC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80007a4:	f000 f9fa 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <MX_TIM3_Init+0xb0>)
 80007aa:	f000 faff 	bl	8000dac <HAL_TIM_MspPostInit>

}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000264 	.word	0x20000264
 80007bc:	40000400 	.word	0x40000400

080007c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_UART4_Init+0x58>)
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <MX_UART4_Init+0x5c>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_UART4_Init+0x58>)
 80007cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_UART4_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_UART4_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_UART4_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_UART4_Init+0x58>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_UART4_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_UART4_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_UART4_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_UART4_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_UART4_Init+0x58>)
 8000804:	f003 fccc 	bl	80041a0 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 f9c5 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200002b0 	.word	0x200002b0
 800081c:	40004c00 	.word	0x40004c00

08000820 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USART3_UART_Init+0x58>)
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <MX_USART3_UART_Init+0x5c>)
 8000828:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_USART3_UART_Init+0x58>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART3_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USART3_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART3_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART3_UART_Init+0x58>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART3_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART3_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART3_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART3_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART3_UART_Init+0x58>)
 8000864:	f003 fc9c 	bl	80041a0 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 f995 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000338 	.word	0x20000338
 800087c:	40004800 	.word	0x40004800

08000880 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800088a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2206      	movs	r2, #6
 8000890:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	2202      	movs	r2, #2
 8000896:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c4:	f001 fba7 	bl	8002016 <HAL_PCD_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ce:	f000 f965 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200003c0 	.word	0x200003c0

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <MX_GPIO_Init+0x134>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a46      	ldr	r2, [pc, #280]	; (8000a10 <MX_GPIO_Init+0x134>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b44      	ldr	r3, [pc, #272]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <MX_GPIO_Init+0x134>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a40      	ldr	r2, [pc, #256]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b3b      	ldr	r3, [pc, #236]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a3a      	ldr	r2, [pc, #232]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <MX_GPIO_Init+0x134>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a34      	ldr	r2, [pc, #208]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a2e      	ldr	r2, [pc, #184]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <MX_GPIO_Init+0x134>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <MX_GPIO_Init+0x134>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|Blue_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f244 0181 	movw	r1, #16513	; 0x4081
 8000988:	4822      	ldr	r0, [pc, #136]	; (8000a14 <MX_GPIO_Init+0x138>)
 800098a:	f001 fb2b 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	4821      	ldr	r0, [pc, #132]	; (8000a18 <MX_GPIO_Init+0x13c>)
 8000994:	f001 fb26 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	481b      	ldr	r0, [pc, #108]	; (8000a1c <MX_GPIO_Init+0x140>)
 80009b0:	f001 f96c 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|Blue_Pin;
 80009b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4811      	ldr	r0, [pc, #68]	; (8000a14 <MX_GPIO_Init+0x138>)
 80009ce:	f001 f95d 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009d2:	2340      	movs	r3, #64	; 0x40
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <MX_GPIO_Init+0x13c>)
 80009ea:	f001 f94f 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_GPIO_Init+0x13c>)
 8000a02:	f001 f943 	bl	8001c8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40021800 	.word	0x40021800
 8000a1c:	40020800 	.word	0x40020800

08000a20 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

//usart callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	if (huart == &huart4) { // Check if the callback is for huart4
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a51      	ldr	r2, [pc, #324]	; (8000b70 <HAL_UART_RxCpltCallback+0x150>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	f040 809b 	bne.w	8000b68 <HAL_UART_RxCpltCallback+0x148>

		if (rx_data[0] == 'A' && rx_data[1] == 'T') {
 8000a32:	4b50      	ldr	r3, [pc, #320]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b41      	cmp	r3, #65	; 0x41
 8000a38:	d106      	bne.n	8000a48 <HAL_UART_RxCpltCallback+0x28>
 8000a3a:	4b4e      	ldr	r3, [pc, #312]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	2b54      	cmp	r3, #84	; 0x54
 8000a40:	d102      	bne.n	8000a48 <HAL_UART_RxCpltCallback+0x28>
			at_found = 1;
 8000a42:	4b4d      	ldr	r3, [pc, #308]	; (8000b78 <HAL_UART_RxCpltCallback+0x158>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
		}

		if (at_found) {
 8000a48:	4b4b      	ldr	r3, [pc, #300]	; (8000b78 <HAL_UART_RxCpltCallback+0x158>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 8086 	beq.w	8000b5e <HAL_UART_RxCpltCallback+0x13e>
			int rx_numbers_index = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]

			for (int i = 0; i <= NUMBERS; i++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	e00e      	b.n	8000a7a <HAL_UART_RxCpltCallback+0x5a>
				if (rx_data[2] == numbers[i]) {
 8000a5c:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000a5e:	789a      	ldrb	r2, [r3, #2]
 8000a60:	4946      	ldr	r1, [pc, #280]	; (8000b7c <HAL_UART_RxCpltCallback+0x15c>)
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	440b      	add	r3, r1
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d103      	bne.n	8000a74 <HAL_UART_RxCpltCallback+0x54>
					rx_numbers_index++;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
					break;
 8000a72:	e005      	b.n	8000a80 <HAL_UART_RxCpltCallback+0x60>
			for (int i = 0; i <= NUMBERS; i++) {
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	3301      	adds	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	2b0a      	cmp	r3, #10
 8000a7e:	dded      	ble.n	8000a5c <HAL_UART_RxCpltCallback+0x3c>
				}
			}

			for (int i = 0; i <= NUMBERS; i++) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e00e      	b.n	8000aa4 <HAL_UART_RxCpltCallback+0x84>
				if (rx_data[3] == numbers[i]) {
 8000a86:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000a88:	78da      	ldrb	r2, [r3, #3]
 8000a8a:	493c      	ldr	r1, [pc, #240]	; (8000b7c <HAL_UART_RxCpltCallback+0x15c>)
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	440b      	add	r3, r1
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d103      	bne.n	8000a9e <HAL_UART_RxCpltCallback+0x7e>
					rx_numbers_index++;
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
					break;
 8000a9c:	e005      	b.n	8000aaa <HAL_UART_RxCpltCallback+0x8a>
			for (int i = 0; i <= NUMBERS; i++) {
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2b0a      	cmp	r3, #10
 8000aa8:	dded      	ble.n	8000a86 <HAL_UART_RxCpltCallback+0x66>
				}
			}

			for (int i = 0; i <= NUMBERS; i++) {
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	e00e      	b.n	8000ace <HAL_UART_RxCpltCallback+0xae>
				if (rx_data[4] == numbers[i]) {
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000ab2:	791a      	ldrb	r2, [r3, #4]
 8000ab4:	4931      	ldr	r1, [pc, #196]	; (8000b7c <HAL_UART_RxCpltCallback+0x15c>)
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	440b      	add	r3, r1
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d103      	bne.n	8000ac8 <HAL_UART_RxCpltCallback+0xa8>
					rx_numbers_index++;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
					break;
 8000ac6:	e005      	b.n	8000ad4 <HAL_UART_RxCpltCallback+0xb4>
			for (int i = 0; i <= NUMBERS; i++) {
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	3301      	adds	r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	2b0a      	cmp	r3, #10
 8000ad2:	dded      	ble.n	8000ab0 <HAL_UART_RxCpltCallback+0x90>
				}
			}

			if (rx_numbers_index == 3) {
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d141      	bne.n	8000b5e <HAL_UART_RxCpltCallback+0x13e>
				percentageNumber = 100 * ((int)rx_data[2] - 48) + 10 * ((int)rx_data[3] - 48) + ((int)rx_data[4] - 48);
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000adc:	789b      	ldrb	r3, [r3, #2]
 8000ade:	3b30      	subs	r3, #48	; 0x30
 8000ae0:	2264      	movs	r2, #100	; 0x64
 8000ae2:	fb02 f103 	mul.w	r1, r2, r3
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000ae8:	78db      	ldrb	r3, [r3, #3]
 8000aea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000aee:	4613      	mov	r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	4413      	add	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	18ca      	adds	r2, r1, r3
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000afa:	791b      	ldrb	r3, [r3, #4]
 8000afc:	3b30      	subs	r3, #48	; 0x30
 8000afe:	4413      	add	r3, r2
 8000b00:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <HAL_UART_RxCpltCallback+0x160>)
 8000b02:	6013      	str	r3, [r2, #0]

				if (percentageNumber > 100) {
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <HAL_UART_RxCpltCallback+0x160>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b64      	cmp	r3, #100	; 0x64
 8000b0a:	dd0b      	ble.n	8000b24 <HAL_UART_RxCpltCallback+0x104>
					percentageNumber = 100;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <HAL_UART_RxCpltCallback+0x160>)
 8000b0e:	2264      	movs	r2, #100	; 0x64
 8000b10:	601a      	str	r2, [r3, #0]
					rx_data[2] = (uint8_t) 49;
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000b14:	2231      	movs	r2, #49	; 0x31
 8000b16:	709a      	strb	r2, [r3, #2]
					rx_data[3] = (uint8_t) 48;
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000b1a:	2230      	movs	r2, #48	; 0x30
 8000b1c:	70da      	strb	r2, [r3, #3]
					rx_data[4] = (uint8_t) 48;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000b20:	2230      	movs	r2, #48	; 0x30
 8000b22:	711a      	strb	r2, [r3, #4]
				}

				if (rx_data[2] == '0') {
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000b26:	789b      	ldrb	r3, [r3, #2]
 8000b28:	2b30      	cmp	r3, #48	; 0x30
 8000b2a:	d103      	bne.n	8000b34 <HAL_UART_RxCpltCallback+0x114>
					tx_perc[9] = ' ';
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_UART_RxCpltCallback+0x164>)
 8000b2e:	2220      	movs	r2, #32
 8000b30:	725a      	strb	r2, [r3, #9]
 8000b32:	e003      	b.n	8000b3c <HAL_UART_RxCpltCallback+0x11c>
				} else {
					tx_perc[9] = rx_data[2];
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000b36:	789a      	ldrb	r2, [r3, #2]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_UART_RxCpltCallback+0x164>)
 8000b3a:	725a      	strb	r2, [r3, #9]
				}
				tx_perc[10] = rx_data[3];
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000b3e:	78da      	ldrb	r2, [r3, #3]
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_UART_RxCpltCallback+0x164>)
 8000b42:	729a      	strb	r2, [r3, #10]
				tx_perc[11] = rx_data[4];
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000b46:	791a      	ldrb	r2, [r3, #4]
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_UART_RxCpltCallback+0x164>)
 8000b4a:	72da      	strb	r2, [r3, #11]

				HAL_UART_Transmit(&huart4, tx_perc, TX_PERC, UART_TIMEOUT);
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	2211      	movs	r2, #17
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <HAL_UART_RxCpltCallback+0x164>)
 8000b52:	4807      	ldr	r0, [pc, #28]	; (8000b70 <HAL_UART_RxCpltCallback+0x150>)
 8000b54:	f003 fb72 	bl	800423c <HAL_UART_Transmit>

				at_found = 0;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <HAL_UART_RxCpltCallback+0x158>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart4, rx_data, RX_DATA);
 8000b5e:	2205      	movs	r2, #5
 8000b60:	4904      	ldr	r1, [pc, #16]	; (8000b74 <HAL_UART_RxCpltCallback+0x154>)
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <HAL_UART_RxCpltCallback+0x150>)
 8000b64:	f003 fbf3 	bl	800434e <HAL_UART_Receive_IT>
	}


}
 8000b68:	bf00      	nop
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200002b0 	.word	0x200002b0
 8000b74:	200008a0 	.word	0x200008a0
 8000b78:	200008a8 	.word	0x200008a8
 8000b7c:	08005ebc 	.word	0x08005ebc
 8000b80:	200008ac 	.word	0x200008ac
 8000b84:	20000000 	.word	0x20000000

08000b88 <HAL_TIM_PeriodElapsedCallback>:

// timer 3 callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
		// timer here (1s).
	}
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x44>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x44>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x44>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x44>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x44>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x44>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a4e      	ldr	r2, [pc, #312]	; (8000d48 <HAL_ETH_MspInit+0x158>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	f040 8096 	bne.w	8000d40 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c14:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a4c      	ldr	r2, [pc, #304]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b4a      	ldr	r3, [pc, #296]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c28:	623b      	str	r3, [r7, #32]
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	4b47      	ldr	r3, [pc, #284]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	4a46      	ldr	r2, [pc, #280]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c36:	6313      	str	r3, [r2, #48]	; 0x30
 8000c38:	4b44      	ldr	r3, [pc, #272]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	4b41      	ldr	r3, [pc, #260]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a40      	ldr	r2, [pc, #256]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c50:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	4b3b      	ldr	r3, [pc, #236]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	4a3a      	ldr	r2, [pc, #232]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
 8000c68:	4b38      	ldr	r3, [pc, #224]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b35      	ldr	r3, [pc, #212]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	4a34      	ldr	r2, [pc, #208]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c80:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8c:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	4a2e      	ldr	r2, [pc, #184]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <HAL_ETH_MspInit+0x15c>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cbc:	2332      	movs	r3, #50	; 0x32
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ccc:	230b      	movs	r3, #11
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481e      	ldr	r0, [pc, #120]	; (8000d50 <HAL_ETH_MspInit+0x160>)
 8000cd8:	f000 ffd8 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cdc:	2386      	movs	r3, #134	; 0x86
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cec:	230b      	movs	r3, #11
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4817      	ldr	r0, [pc, #92]	; (8000d54 <HAL_ETH_MspInit+0x164>)
 8000cf8:	f000 ffc8 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0e:	230b      	movs	r3, #11
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	480f      	ldr	r0, [pc, #60]	; (8000d58 <HAL_ETH_MspInit+0x168>)
 8000d1a:	f000 ffb7 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d30:	230b      	movs	r3, #11
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <HAL_ETH_MspInit+0x16c>)
 8000d3c:	f000 ffa6 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3738      	adds	r7, #56	; 0x38
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40028000 	.word	0x40028000
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020800 	.word	0x40020800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	40021800 	.word	0x40021800

08000d60 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <HAL_TIM_OC_MspInit+0x44>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d113      	bne.n	8000d9a <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_TIM_OC_MspInit+0x48>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <HAL_TIM_OC_MspInit+0x48>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_TIM_OC_MspInit+0x48>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	201d      	movs	r0, #29
 8000d90:	f000 fb65 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d94:	201d      	movs	r0, #29
 8000d96:	f000 fb7e 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40000400 	.word	0x40000400
 8000da8:	40023800 	.word	0x40023800

08000dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <HAL_TIM_MspPostInit+0x64>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d11b      	bne.n	8000e06 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_TIM_MspPostInit+0x68>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_TIM_MspPostInit+0x68>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_TIM_MspPostInit+0x68>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000de6:	2340      	movs	r3, #64	; 0x40
 8000de8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_TIM_MspPostInit+0x6c>)
 8000e02:	f000 ff43 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3720      	adds	r7, #32
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40000400 	.word	0x40000400
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0b0      	sub	sp, #192	; 0xc0
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	2290      	movs	r2, #144	; 0x90
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 fffa 	bl	8005e36 <memset>
  if(huart->Instance==UART4)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a58      	ldr	r2, [pc, #352]	; (8000fa8 <HAL_UART_MspInit+0x18c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d166      	bne.n	8000f1a <HAL_UART_MspInit+0xfe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e50:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 ff4a 	bl	8002cf4 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e66:	f7ff fe99 	bl	8000b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e6a:	4b50      	ldr	r3, [pc, #320]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a4f      	ldr	r2, [pc, #316]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000e70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b4d      	ldr	r3, [pc, #308]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b4a      	ldr	r3, [pc, #296]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a49      	ldr	r2, [pc, #292]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b47      	ldr	r3, [pc, #284]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	4b44      	ldr	r3, [pc, #272]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a43      	ldr	r2, [pc, #268]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b41      	ldr	r3, [pc, #260]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4836      	ldr	r0, [pc, #216]	; (8000fb0 <HAL_UART_MspInit+0x194>)
 8000ed8:	f000 fed8 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f00:	4619      	mov	r1, r3
 8000f02:	482c      	ldr	r0, [pc, #176]	; (8000fb4 <HAL_UART_MspInit+0x198>)
 8000f04:	f000 fec2 	bl	8001c8c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2034      	movs	r0, #52	; 0x34
 8000f0e:	f000 faa6 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000f12:	2034      	movs	r0, #52	; 0x34
 8000f14:	f000 fabf 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f18:	e041      	b.n	8000f9e <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <HAL_UART_MspInit+0x19c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d13c      	bne.n	8000f9e <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f28:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fede 	bl	8002cf4 <HAL_RCCEx_PeriphCLKConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_UART_MspInit+0x126>
      Error_Handler();
 8000f3e:	f7ff fe2d 	bl	8000b9c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a19      	ldr	r2, [pc, #100]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a13      	ldr	r2, [pc, #76]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_UART_MspInit+0x190>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f96:	4619      	mov	r1, r3
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <HAL_UART_MspInit+0x1a0>)
 8000f9a:	f000 fe77 	bl	8001c8c <HAL_GPIO_Init>
}
 8000f9e:	bf00      	nop
 8000fa0:	37c0      	adds	r7, #192	; 0xc0
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40004c00 	.word	0x40004c00
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40004800 	.word	0x40004800
 8000fbc:	40020c00 	.word	0x40020c00

08000fc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0ae      	sub	sp, #184	; 0xb8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2290      	movs	r2, #144	; 0x90
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f004 ff28 	bl	8005e36 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fee:	d159      	bne.n	80010a4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ff0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ff4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fe77 	bl	8002cf4 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800100c:	f7ff fdc6 	bl	8000b9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <HAL_PCD_MspInit+0xec>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001028:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800102c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001042:	230a      	movs	r3, #10
 8001044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800104c:	4619      	mov	r1, r3
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <HAL_PCD_MspInit+0xf0>)
 8001050:	f000 fe1c 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800106c:	4619      	mov	r1, r3
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <HAL_PCD_MspInit+0xf0>)
 8001070:	f000 fe0c 	bl	8001c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_PCD_MspInit+0xec>)
 800107a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107e:	6353      	str	r3, [r2, #52]	; 0x34
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_PCD_MspInit+0xec>)
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001096:	6453      	str	r3, [r2, #68]	; 0x44
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_PCD_MspInit+0xec>)
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	37b8      	adds	r7, #184	; 0xb8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001100:	f000 f88e 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <TIM3_IRQHandler+0x10>)
 800110e:	f002 fae8 	bl	80036e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000264 	.word	0x20000264

0800111c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <UART4_IRQHandler+0x10>)
 8001122:	f003 f959 	bl	80043d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200002b0 	.word	0x200002b0

08001130 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <SystemInit+0x20>)
 8001136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <SystemInit+0x20>)
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800118c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001158:	f7ff ffea 	bl	8001130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115e:	490d      	ldr	r1, [pc, #52]	; (8001194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001174:	4c0a      	ldr	r4, [pc, #40]	; (80011a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001182:	f004 fe61 	bl	8005e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001186:	f7ff f9d5 	bl	8000534 <main>
  bx  lr    
 800118a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001198:	08005ef0 	.word	0x08005ef0
  ldr r2, =_sbss
 800119c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80011a0:	200008bc 	.word	0x200008bc

080011a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC_IRQHandler>

080011a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011aa:	2003      	movs	r0, #3
 80011ac:	f000 f94c 	bl	8001448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f000 f805 	bl	80011c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b6:	f7ff fcf7 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x58>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f967 	bl	80014b2 <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00e      	b.n	800120c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80a      	bhi.n	800120a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011fc:	f000 f92f 	bl	800145e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <HAL_InitTick+0x5c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000014 	.word	0x20000014
 8001218:	2000001c 	.word	0x2000001c
 800121c:	20000018 	.word	0x20000018

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	2000001c 	.word	0x2000001c
 8001244:	200008b8 	.word	0x200008b8

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200008b8 	.word	0x200008b8

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffde 	bl	8001248 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000001c 	.word	0x2000001c

080012a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <__NVIC_SetPriorityGrouping+0x40>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c4:	4013      	ands	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x40>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	05fa0000 	.word	0x05fa0000

080012f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <__NVIC_GetPriorityGrouping+0x18>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	f003 0307 	and.w	r3, r3, #7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f003 021f 	and.w	r2, r3, #31
 8001324:	4907      	ldr	r1, [pc, #28]	; (8001344 <__NVIC_EnableIRQ+0x38>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2001      	movs	r0, #1
 800132e:	fa00 f202 	lsl.w	r2, r0, r2
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	; (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
         );
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001414:	d301      	bcc.n	800141a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001416:	2301      	movs	r3, #1
 8001418:	e00f      	b.n	800143a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <SysTick_Config+0x40>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001422:	210f      	movs	r1, #15
 8001424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001428:	f7ff ff8e 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <SysTick_Config+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <SysTick_Config+0x40>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff29 	bl	80012a8 <__NVIC_SetPriorityGrouping>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001470:	f7ff ff3e 	bl	80012f0 <__NVIC_GetPriorityGrouping>
 8001474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	f7ff ff8e 	bl	800139c <NVIC_EncodePriority>
 8001480:	4602      	mov	r2, r0
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff5d 	bl	8001348 <__NVIC_SetPriority>
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff31 	bl	800130c <__NVIC_EnableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffa2 	bl	8001404 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b084      	sub	sp, #16
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff feb6 	bl	8001248 <HAL_GetTick>
 80014dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d008      	beq.n	80014fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e052      	b.n	80015a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0216 	bic.w	r2, r2, #22
 800150a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800151a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d103      	bne.n	800152c <HAL_DMA_Abort+0x62>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001528:	2b00      	cmp	r3, #0
 800152a:	d007      	beq.n	800153c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0208 	bic.w	r2, r2, #8
 800153a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800154c:	e013      	b.n	8001576 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800154e:	f7ff fe7b 	bl	8001248 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b05      	cmp	r3, #5
 800155a:	d90c      	bls.n	8001576 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2220      	movs	r2, #32
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2203      	movs	r2, #3
 8001566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e015      	b.n	80015a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e4      	bne.n	800154e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	223f      	movs	r2, #63	; 0x3f
 800158a:	409a      	lsls	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d004      	beq.n	80015c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e00c      	b.n	80015e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2205      	movs	r2, #5
 80015cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e086      	b.n	8001710 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001608:	2b00      	cmp	r3, #0
 800160a:	d106      	bne.n	800161a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2223      	movs	r2, #35	; 0x23
 8001610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff faeb 	bl	8000bf0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <HAL_ETH_Init+0x128>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a3e      	ldr	r2, [pc, #248]	; (8001718 <HAL_ETH_Init+0x128>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <HAL_ETH_Init+0x128>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001632:	4b3a      	ldr	r3, [pc, #232]	; (800171c <HAL_ETH_Init+0x12c>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4a39      	ldr	r2, [pc, #228]	; (800171c <HAL_ETH_Init+0x12c>)
 8001638:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800163c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_ETH_Init+0x12c>)
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	4935      	ldr	r1, [pc, #212]	; (800171c <HAL_ETH_Init+0x12c>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800164c:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_ETH_Init+0x12c>)
 800164e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001666:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001668:	f7ff fdee 	bl	8001248 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800166e:	e011      	b.n	8001694 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001670:	f7ff fdea 	bl	8001248 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800167e:	d909      	bls.n	8001694 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2204      	movs	r2, #4
 8001684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	22e0      	movs	r2, #224	; 0xe0
 800168c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e03d      	b.n	8001710 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1e4      	bne.n	8001670 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f97a 	bl	80019a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 fa25 	bl	8001afc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fa7b 	bl	8001bae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	461a      	mov	r2, r3
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f9e3 	bl	8001a8c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80016d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_ETH_Init+0x130>)
 80016e4:	430b      	orrs	r3, r1
 80016e6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80016fa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2210      	movs	r2, #16
 800170a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	40013800 	.word	0x40013800
 8001720:	00020060 	.word	0x00020060

08001724 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <ETH_SetMACConfig+0x164>)
 800173a:	4013      	ands	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	7b9b      	ldrb	r3, [r3, #14]
 8001742:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	7c12      	ldrb	r2, [r2, #16]
 8001748:	2a00      	cmp	r2, #0
 800174a:	d102      	bne.n	8001752 <ETH_SetMACConfig+0x2e>
 800174c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001750:	e000      	b.n	8001754 <ETH_SetMACConfig+0x30>
 8001752:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001754:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	7c52      	ldrb	r2, [r2, #17]
 800175a:	2a00      	cmp	r2, #0
 800175c:	d102      	bne.n	8001764 <ETH_SetMACConfig+0x40>
 800175e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001762:	e000      	b.n	8001766 <ETH_SetMACConfig+0x42>
 8001764:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001766:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800176c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	7fdb      	ldrb	r3, [r3, #31]
 8001772:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001774:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800177a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	7f92      	ldrb	r2, [r2, #30]
 8001780:	2a00      	cmp	r2, #0
 8001782:	d102      	bne.n	800178a <ETH_SetMACConfig+0x66>
 8001784:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001788:	e000      	b.n	800178c <ETH_SetMACConfig+0x68>
 800178a:	2200      	movs	r2, #0
                        macconf->Speed |
 800178c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	7f1b      	ldrb	r3, [r3, #28]
 8001792:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001794:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800179a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80017a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017aa:	2a00      	cmp	r2, #0
 80017ac:	d102      	bne.n	80017b4 <ETH_SetMACConfig+0x90>
 80017ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b2:	e000      	b.n	80017b6 <ETH_SetMACConfig+0x92>
 80017b4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	7bdb      	ldrb	r3, [r3, #15]
 80017bc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017be:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017cc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80017ce:	4313      	orrs	r3, r2
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7ff fd3a 	bl	8001260 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001802:	4013      	ands	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001812:	2a00      	cmp	r2, #0
 8001814:	d101      	bne.n	800181a <ETH_SetMACConfig+0xf6>
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	e000      	b.n	800181c <ETH_SetMACConfig+0xf8>
 800181a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800181c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001822:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800182a:	2a01      	cmp	r2, #1
 800182c:	d101      	bne.n	8001832 <ETH_SetMACConfig+0x10e>
 800182e:	2208      	movs	r2, #8
 8001830:	e000      	b.n	8001834 <ETH_SetMACConfig+0x110>
 8001832:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001834:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800183c:	2a01      	cmp	r2, #1
 800183e:	d101      	bne.n	8001844 <ETH_SetMACConfig+0x120>
 8001840:	2204      	movs	r2, #4
 8001842:	e000      	b.n	8001846 <ETH_SetMACConfig+0x122>
 8001844:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001846:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800184e:	2a01      	cmp	r2, #1
 8001850:	d101      	bne.n	8001856 <ETH_SetMACConfig+0x132>
 8001852:	2202      	movs	r2, #2
 8001854:	e000      	b.n	8001858 <ETH_SetMACConfig+0x134>
 8001856:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001858:	4313      	orrs	r3, r2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff fcf5 	bl	8001260 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	619a      	str	r2, [r3, #24]
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	fd20810f 	.word	0xfd20810f

0800188c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4b3d      	ldr	r3, [pc, #244]	; (800199c <ETH_SetDMAConfig+0x110>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	7b1b      	ldrb	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <ETH_SetDMAConfig+0x2c>
 80018b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018b6:	e000      	b.n	80018ba <ETH_SetDMAConfig+0x2e>
 80018b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	7b5b      	ldrb	r3, [r3, #13]
 80018be:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018c0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	7f52      	ldrb	r2, [r2, #29]
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d102      	bne.n	80018d0 <ETH_SetDMAConfig+0x44>
 80018ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018ce:	e000      	b.n	80018d2 <ETH_SetDMAConfig+0x46>
 80018d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	7b9b      	ldrb	r3, [r3, #14]
 80018d8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018da:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	7f1b      	ldrb	r3, [r3, #28]
 80018e6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80018e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	7f9b      	ldrb	r3, [r3, #30]
 80018ee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018f0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80018f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018fe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001900:	4313      	orrs	r3, r2
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001910:	461a      	mov	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001922:	2001      	movs	r0, #1
 8001924:	f7ff fc9c 	bl	8001260 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001930:	461a      	mov	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	791b      	ldrb	r3, [r3, #4]
 800193a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001940:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001946:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800194c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001954:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001956:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800195e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001964:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800196e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001972:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001980:	2001      	movs	r0, #1
 8001982:	f7ff fc6d 	bl	8001260 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	f8de3f23 	.word	0xf8de3f23

080019a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b0a6      	sub	sp, #152	; 0x98
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80019be:	2301      	movs	r3, #1
 80019c0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80019ca:	2301      	movs	r3, #1
 80019cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80019d0:	2301      	movs	r3, #1
 80019d2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019e2:	2300      	movs	r3, #0
 80019e4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fe7f 	bl	8001724 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a26:	2301      	movs	r3, #1
 8001a28:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a34:	2301      	movs	r3, #1
 8001a36:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a52:	2301      	movs	r3, #1
 8001a54:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a60:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a66:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff05 	bl	800188c <ETH_SetDMAConfig>
}
 8001a82:	bf00      	nop
 8001a84:	3798      	adds	r7, #152	; 0x98
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3305      	adds	r3, #5
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	3204      	adds	r2, #4
 8001aa4:	7812      	ldrb	r2, [r2, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <ETH_MACAddressConfig+0x68>)
 8001aae:	4413      	add	r3, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3303      	adds	r3, #3
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	061a      	lsls	r2, r3, #24
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	041b      	lsls	r3, r3, #16
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3301      	adds	r3, #1
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	7812      	ldrb	r2, [r2, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <ETH_MACAddressConfig+0x6c>)
 8001ade:	4413      	add	r3, r2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	6013      	str	r3, [r2, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40028040 	.word	0x40028040
 8001af8:	40028044 	.word	0x40028044

08001afc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e03e      	b.n	8001b88 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68d9      	ldr	r1, [r3, #12]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	3206      	adds	r2, #6
 8001b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d80c      	bhi.n	8001b6c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68d9      	ldr	r1, [r3, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	440b      	add	r3, r1
 8001b64:	461a      	mov	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	e004      	b.n	8001b76 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	461a      	mov	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3301      	adds	r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d9bd      	bls.n	8001b0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba0:	611a      	str	r2, [r3, #16]
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	e048      	b.n	8001c4e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6919      	ldr	r1, [r3, #16]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2200      	movs	r2, #0
 8001bea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bf8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	3212      	adds	r2, #18
 8001c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d80c      	bhi.n	8001c3e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6919      	ldr	r1, [r3, #16]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	440b      	add	r3, r1
 8001c36:	461a      	mov	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	e004      	b.n	8001c48 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d9b3      	bls.n	8001bbc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7e:	60da      	str	r2, [r3, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	e175      	b.n	8001f98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001cac:	2201      	movs	r2, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f040 8164 	bne.w	8001f92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d005      	beq.n	8001ce2 <HAL_GPIO_Init+0x56>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d130      	bne.n	8001d44 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	2203      	movs	r2, #3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 0201 	and.w	r2, r3, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d017      	beq.n	8001d80 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d123      	bne.n	8001dd4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	220f      	movs	r2, #15
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	69b9      	ldr	r1, [r7, #24]
 8001dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0203 	and.w	r2, r3, #3
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80be 	beq.w	8001f92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	4b66      	ldr	r3, [pc, #408]	; (8001fb0 <HAL_GPIO_Init+0x324>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a65      	ldr	r2, [pc, #404]	; (8001fb0 <HAL_GPIO_Init+0x324>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <HAL_GPIO_Init+0x324>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e2e:	4a61      	ldr	r2, [pc, #388]	; (8001fb4 <HAL_GPIO_Init+0x328>)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a58      	ldr	r2, [pc, #352]	; (8001fb8 <HAL_GPIO_Init+0x32c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d037      	beq.n	8001eca <HAL_GPIO_Init+0x23e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a57      	ldr	r2, [pc, #348]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_GPIO_Init+0x23a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a56      	ldr	r2, [pc, #344]	; (8001fc0 <HAL_GPIO_Init+0x334>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d02b      	beq.n	8001ec2 <HAL_GPIO_Init+0x236>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a55      	ldr	r2, [pc, #340]	; (8001fc4 <HAL_GPIO_Init+0x338>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d025      	beq.n	8001ebe <HAL_GPIO_Init+0x232>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a54      	ldr	r2, [pc, #336]	; (8001fc8 <HAL_GPIO_Init+0x33c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01f      	beq.n	8001eba <HAL_GPIO_Init+0x22e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a53      	ldr	r2, [pc, #332]	; (8001fcc <HAL_GPIO_Init+0x340>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d019      	beq.n	8001eb6 <HAL_GPIO_Init+0x22a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <HAL_GPIO_Init+0x344>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0x226>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a51      	ldr	r2, [pc, #324]	; (8001fd4 <HAL_GPIO_Init+0x348>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00d      	beq.n	8001eae <HAL_GPIO_Init+0x222>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a50      	ldr	r2, [pc, #320]	; (8001fd8 <HAL_GPIO_Init+0x34c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x21e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4f      	ldr	r2, [pc, #316]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_GPIO_Init+0x21a>
 8001ea2:	2309      	movs	r3, #9
 8001ea4:	e012      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001ea6:	230a      	movs	r3, #10
 8001ea8:	e010      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001eaa:	2308      	movs	r3, #8
 8001eac:	e00e      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001eae:	2307      	movs	r3, #7
 8001eb0:	e00c      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	e00a      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	e008      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e004      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	f002 0203 	and.w	r2, r2, #3
 8001ed2:	0092      	lsls	r2, r2, #2
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001edc:	4935      	ldr	r1, [pc, #212]	; (8001fb4 <HAL_GPIO_Init+0x328>)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eea:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <HAL_GPIO_Init+0x354>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f0e:	4a34      	ldr	r2, [pc, #208]	; (8001fe0 <HAL_GPIO_Init+0x354>)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f14:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <HAL_GPIO_Init+0x354>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f38:	4a29      	ldr	r2, [pc, #164]	; (8001fe0 <HAL_GPIO_Init+0x354>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f3e:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <HAL_GPIO_Init+0x354>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f62:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <HAL_GPIO_Init+0x354>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_GPIO_Init+0x354>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <HAL_GPIO_Init+0x354>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3301      	adds	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b0f      	cmp	r3, #15
 8001f9c:	f67f ae86 	bls.w	8001cac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40013800 	.word	0x40013800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40021400 	.word	0x40021400
 8001fd0:	40021800 	.word	0x40021800
 8001fd4:	40021c00 	.word	0x40021c00
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40022400 	.word	0x40022400
 8001fe0:	40013c00 	.word	0x40013c00

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002000:	e003      	b.n	800200a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	041a      	lsls	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	619a      	str	r2, [r3, #24]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af02      	add	r7, sp, #8
 800201c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e108      	b.n	800223a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe ffbc 	bl	8000fc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2203      	movs	r2, #3
 800204c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002056:	d102      	bne.n	800205e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f003 fc52 	bl	800590c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7c1a      	ldrb	r2, [r3, #16]
 8002070:	f88d 2000 	strb.w	r2, [sp]
 8002074:	3304      	adds	r3, #4
 8002076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002078:	f003 fbee 	bl	8005858 <USB_CoreInit>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2202      	movs	r2, #2
 8002086:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0d5      	b.n	800223a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f003 fc4a 	bl	800592e <USB_SetCurrentMode>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0c6      	b.n	800223a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e04a      	b.n	8002148 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3315      	adds	r3, #21
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3314      	adds	r3, #20
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	b298      	uxth	r0, r3
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	332e      	adds	r3, #46	; 0x2e
 80020ee:	4602      	mov	r2, r0
 80020f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3318      	adds	r3, #24
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	331c      	adds	r3, #28
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3320      	adds	r3, #32
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3324      	adds	r3, #36	; 0x24
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	3301      	adds	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	791b      	ldrb	r3, [r3, #4]
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	429a      	cmp	r2, r3
 8002150:	d3af      	bcc.n	80020b2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	e044      	b.n	80021e2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	f203 2355 	addw	r3, r3, #597	; 0x255
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	3301      	adds	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	791b      	ldrb	r3, [r3, #4]
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d3b5      	bcc.n	8002158 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7c1a      	ldrb	r2, [r3, #16]
 80021f4:	f88d 2000 	strb.w	r2, [sp]
 80021f8:	3304      	adds	r3, #4
 80021fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fc:	f003 fbe4 	bl	80059c8 <USB_DevInit>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e013      	b.n	800223a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7b1b      	ldrb	r3, [r3, #12]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d102      	bne.n	800222e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f80b 	bl	8002244 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fd9f 	bl	8005d76 <USB_DevDisconnect>

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_PCDEx_ActivateLPM+0x44>)
 8002274:	4313      	orrs	r3, r2
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	10000003 	.word	0x10000003

0800228c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40007000 	.word	0x40007000

080022ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_PWREx_EnableOverDrive+0x98>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a22      	ldr	r2, [pc, #136]	; (8002344 <HAL_PWREx_EnableOverDrive+0x98>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_PWREx_EnableOverDrive+0x98>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022da:	f7fe ffb5 	bl	8001248 <HAL_GetTick>
 80022de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022e0:	e009      	b.n	80022f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022e2:	f7fe ffb1 	bl	8001248 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f0:	d901      	bls.n	80022f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e022      	b.n	800233c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002302:	d1ee      	bne.n	80022e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002304:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_PWREx_EnableOverDrive+0x9c>)
 800230a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002310:	f7fe ff9a 	bl	8001248 <HAL_GetTick>
 8002314:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002316:	e009      	b.n	800232c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002318:	f7fe ff96 	bl	8001248 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002326:	d901      	bls.n	800232c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e007      	b.n	800233c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_PWREx_EnableOverDrive+0x9c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002338:	d1ee      	bne.n	8002318 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40023800 	.word	0x40023800
 8002348:	40007000 	.word	0x40007000

0800234c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e29b      	b.n	800289a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8087 	beq.w	800247e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002370:	4b96      	ldr	r3, [pc, #600]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b04      	cmp	r3, #4
 800237a:	d00c      	beq.n	8002396 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237c:	4b93      	ldr	r3, [pc, #588]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d112      	bne.n	80023ae <HAL_RCC_OscConfig+0x62>
 8002388:	4b90      	ldr	r3, [pc, #576]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002394:	d10b      	bne.n	80023ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002396:	4b8d      	ldr	r3, [pc, #564]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d06c      	beq.n	800247c <HAL_RCC_OscConfig+0x130>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d168      	bne.n	800247c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e275      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x7a>
 80023b8:	4b84      	ldr	r3, [pc, #528]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a83      	ldr	r2, [pc, #524]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80023be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	e02e      	b.n	8002424 <HAL_RCC_OscConfig+0xd8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x9c>
 80023ce:	4b7f      	ldr	r3, [pc, #508]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a7e      	ldr	r2, [pc, #504]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80023d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b7c      	ldr	r3, [pc, #496]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a7b      	ldr	r2, [pc, #492]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80023e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e01d      	b.n	8002424 <HAL_RCC_OscConfig+0xd8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0xc0>
 80023f2:	4b76      	ldr	r3, [pc, #472]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a75      	ldr	r2, [pc, #468]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b73      	ldr	r3, [pc, #460]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a72      	ldr	r2, [pc, #456]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0xd8>
 800240c:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6e      	ldr	r2, [pc, #440]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b6c      	ldr	r3, [pc, #432]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6b      	ldr	r2, [pc, #428]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe ff0c 	bl	8001248 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7fe ff08 	bl	8001248 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e229      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b61      	ldr	r3, [pc, #388]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0xe8>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fef8 	bl	8001248 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245c:	f7fe fef4 	bl	8001248 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e215      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	4b57      	ldr	r3, [pc, #348]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x110>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d069      	beq.n	800255e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800248a:	4b50      	ldr	r3, [pc, #320]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002496:	4b4d      	ldr	r3, [pc, #308]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d11c      	bne.n	80024dc <HAL_RCC_OscConfig+0x190>
 80024a2:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d116      	bne.n	80024dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x17a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e1e9      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	493d      	ldr	r1, [pc, #244]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	e040      	b.n	800255e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d023      	beq.n	800252c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e4:	4b39      	ldr	r3, [pc, #228]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a38      	ldr	r2, [pc, #224]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe feaa 	bl	8001248 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fea6 	bl	8001248 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1c7      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250a:	4b30      	ldr	r3, [pc, #192]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002516:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4929      	ldr	r1, [pc, #164]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
 800252a:	e018      	b.n	800255e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a26      	ldr	r2, [pc, #152]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fe86 	bl	8001248 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002540:	f7fe fe82 	bl	8001248 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1a3      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d038      	beq.n	80025dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d019      	beq.n	80025a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002576:	4a15      	ldr	r2, [pc, #84]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257e:	f7fe fe63 	bl	8001248 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002586:	f7fe fe5f 	bl	8001248 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e180      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 800259a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x23a>
 80025a4:	e01a      	b.n	80025dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80025a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025aa:	4a08      	ldr	r2, [pc, #32]	; (80025cc <HAL_RCC_OscConfig+0x280>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b2:	f7fe fe49 	bl	8001248 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ba:	f7fe fe45 	bl	8001248 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d903      	bls.n	80025d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e166      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
 80025cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d0:	4b92      	ldr	r3, [pc, #584]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80025d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80a4 	beq.w	8002732 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4b8c      	ldr	r3, [pc, #560]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10d      	bne.n	8002612 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4b89      	ldr	r3, [pc, #548]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a88      	ldr	r2, [pc, #544]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
 8002602:	4b86      	ldr	r3, [pc, #536]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260e:	2301      	movs	r3, #1
 8002610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002612:	4b83      	ldr	r3, [pc, #524]	; (8002820 <HAL_RCC_OscConfig+0x4d4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800261e:	4b80      	ldr	r3, [pc, #512]	; (8002820 <HAL_RCC_OscConfig+0x4d4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7f      	ldr	r2, [pc, #508]	; (8002820 <HAL_RCC_OscConfig+0x4d4>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262a:	f7fe fe0d 	bl	8001248 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7fe fe09 	bl	8001248 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	; 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e12a      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002644:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCC_OscConfig+0x4d4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x31a>
 8002658:	4b70      	ldr	r3, [pc, #448]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a6f      	ldr	r2, [pc, #444]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
 8002664:	e02d      	b.n	80026c2 <HAL_RCC_OscConfig+0x376>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x33c>
 800266e:	4b6b      	ldr	r3, [pc, #428]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a6a      	ldr	r2, [pc, #424]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
 800267a:	4b68      	ldr	r3, [pc, #416]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a67      	ldr	r2, [pc, #412]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
 8002686:	e01c      	b.n	80026c2 <HAL_RCC_OscConfig+0x376>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x35e>
 8002690:	4b62      	ldr	r3, [pc, #392]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	4a61      	ldr	r2, [pc, #388]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6713      	str	r3, [r2, #112]	; 0x70
 800269c:	4b5f      	ldr	r3, [pc, #380]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a5e      	ldr	r2, [pc, #376]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
 80026a8:	e00b      	b.n	80026c2 <HAL_RCC_OscConfig+0x376>
 80026aa:	4b5c      	ldr	r3, [pc, #368]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	4a5b      	ldr	r2, [pc, #364]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6713      	str	r3, [r2, #112]	; 0x70
 80026b6:	4b59      	ldr	r3, [pc, #356]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a58      	ldr	r2, [pc, #352]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d015      	beq.n	80026f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ca:	f7fe fdbd 	bl	8001248 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7fe fdb9 	bl	8001248 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e0d8      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e8:	4b4c      	ldr	r3, [pc, #304]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ee      	beq.n	80026d2 <HAL_RCC_OscConfig+0x386>
 80026f4:	e014      	b.n	8002720 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f6:	f7fe fda7 	bl	8001248 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe fda3 	bl	8001248 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0c2      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002714:	4b41      	ldr	r3, [pc, #260]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ee      	bne.n	80026fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002720:	7dfb      	ldrb	r3, [r7, #23]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d105      	bne.n	8002732 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a3c      	ldr	r2, [pc, #240]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 800272c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80ae 	beq.w	8002898 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273c:	4b37      	ldr	r3, [pc, #220]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d06d      	beq.n	8002824 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d14b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b32      	ldr	r3, [pc, #200]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a31      	ldr	r2, [pc, #196]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 8002756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800275a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fd74 	bl	8001248 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fd70 	bl	8001248 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e091      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	019b      	lsls	r3, r3, #6
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	3b01      	subs	r3, #1
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	071b      	lsls	r3, r3, #28
 80027ae:	491b      	ldr	r1, [pc, #108]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a18      	ldr	r2, [pc, #96]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe fd42 	bl	8001248 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7fe fd3e 	bl	8001248 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e05f      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x47c>
 80027e6:	e057      	b.n	8002898 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0b      	ldr	r2, [pc, #44]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 80027ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fd28 	bl	8001248 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe fd24 	bl	8001248 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e045      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	4b03      	ldr	r3, [pc, #12]	; (800281c <HAL_RCC_OscConfig+0x4d0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x4b0>
 800281a:	e03d      	b.n	8002898 <HAL_RCC_OscConfig+0x54c>
 800281c:	40023800 	.word	0x40023800
 8002820:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002824:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <HAL_RCC_OscConfig+0x558>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d030      	beq.n	8002894 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d129      	bne.n	8002894 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d122      	bne.n	8002894 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002854:	4013      	ands	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800285a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800285c:	4293      	cmp	r3, r2
 800285e:	d119      	bne.n	8002894 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	3b01      	subs	r3, #1
 800286e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d10f      	bne.n	8002894 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d107      	bne.n	8002894 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800

080028a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0d0      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028c0:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d910      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b67      	ldr	r3, [pc, #412]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 020f 	bic.w	r2, r3, #15
 80028d6:	4965      	ldr	r1, [pc, #404]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b63      	ldr	r3, [pc, #396]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0b8      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 800290e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002912:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a52      	ldr	r2, [pc, #328]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800292a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292c:	4b50      	ldr	r3, [pc, #320]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	494d      	ldr	r1, [pc, #308]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d040      	beq.n	80029cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d115      	bne.n	800298a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e07f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296a:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e073      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297a:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e06b      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4936      	ldr	r1, [pc, #216]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800299c:	f7fe fc54 	bl	8001248 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a4:	f7fe fc50 	bl	8001248 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e053      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 020c 	and.w	r2, r3, #12
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1eb      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029cc:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d210      	bcs.n	80029fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 020f 	bic.w	r2, r3, #15
 80029e2:	4922      	ldr	r1, [pc, #136]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e032      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4916      	ldr	r1, [pc, #88]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	490e      	ldr	r1, [pc, #56]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a3a:	f000 f821 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	490a      	ldr	r1, [pc, #40]	; (8002a74 <HAL_RCC_ClockConfig+0x1cc>)
 8002a4c:	5ccb      	ldrb	r3, [r1, r3]
 8002a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_RCC_ClockConfig+0x1d0>)
 8002a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1d4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe fbb0 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023c00 	.word	0x40023c00
 8002a70:	40023800 	.word	0x40023800
 8002a74:	08005ec8 	.word	0x08005ec8
 8002a78:	20000014 	.word	0x20000014
 8002a7c:	20000018 	.word	0x20000018

08002a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a84:	b094      	sub	sp, #80	; 0x50
 8002a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a90:	2300      	movs	r3, #0
 8002a92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a98:	4b79      	ldr	r3, [pc, #484]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	f200 80e1 	bhi.w	8002c6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x3a>
 8002ab2:	e0db      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ab4:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ab8:	e0db      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aba:	4b73      	ldr	r3, [pc, #460]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x208>)
 8002abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002abe:	e0d8      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ac0:	4b6f      	ldr	r3, [pc, #444]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002aca:	4b6d      	ldr	r3, [pc, #436]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d063      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad6:	4b6a      	ldr	r3, [pc, #424]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	099b      	lsrs	r3, r3, #6
 8002adc:	2200      	movs	r2, #0
 8002ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aea:	2300      	movs	r3, #0
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
 8002aee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002af2:	4622      	mov	r2, r4
 8002af4:	462b      	mov	r3, r5
 8002af6:	f04f 0000 	mov.w	r0, #0
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	0159      	lsls	r1, r3, #5
 8002b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b04:	0150      	lsls	r0, r2, #5
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	1a51      	subs	r1, r2, r1
 8002b0e:	6139      	str	r1, [r7, #16]
 8002b10:	4629      	mov	r1, r5
 8002b12:	eb63 0301 	sbc.w	r3, r3, r1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b24:	4659      	mov	r1, fp
 8002b26:	018b      	lsls	r3, r1, #6
 8002b28:	4651      	mov	r1, sl
 8002b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b2e:	4651      	mov	r1, sl
 8002b30:	018a      	lsls	r2, r1, #6
 8002b32:	4651      	mov	r1, sl
 8002b34:	ebb2 0801 	subs.w	r8, r2, r1
 8002b38:	4659      	mov	r1, fp
 8002b3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b52:	4690      	mov	r8, r2
 8002b54:	4699      	mov	r9, r3
 8002b56:	4623      	mov	r3, r4
 8002b58:	eb18 0303 	adds.w	r3, r8, r3
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	462b      	mov	r3, r5
 8002b60:	eb49 0303 	adc.w	r3, r9, r3
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b72:	4629      	mov	r1, r5
 8002b74:	024b      	lsls	r3, r1, #9
 8002b76:	4621      	mov	r1, r4
 8002b78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	024a      	lsls	r2, r1, #9
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b86:	2200      	movs	r2, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b90:	f7fd fb52 	bl	8000238 <__aeabi_uldivmod>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4613      	mov	r3, r2
 8002b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b9c:	e058      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9e:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	099b      	lsrs	r3, r3, #6
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	4611      	mov	r1, r2
 8002baa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bb8:	4642      	mov	r2, r8
 8002bba:	464b      	mov	r3, r9
 8002bbc:	f04f 0000 	mov.w	r0, #0
 8002bc0:	f04f 0100 	mov.w	r1, #0
 8002bc4:	0159      	lsls	r1, r3, #5
 8002bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bca:	0150      	lsls	r0, r2, #5
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8002bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	00eb      	lsls	r3, r5, #3
 8002c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c06:	00e2      	lsls	r2, r4, #3
 8002c08:	4614      	mov	r4, r2
 8002c0a:	461d      	mov	r5, r3
 8002c0c:	4643      	mov	r3, r8
 8002c0e:	18e3      	adds	r3, r4, r3
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	464b      	mov	r3, r9
 8002c14:	eb45 0303 	adc.w	r3, r5, r3
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c26:	4629      	mov	r1, r5
 8002c28:	028b      	lsls	r3, r1, #10
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c30:	4621      	mov	r1, r4
 8002c32:	028a      	lsls	r2, r1, #10
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	61fa      	str	r2, [r7, #28]
 8002c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c44:	f7fd faf8 	bl	8000238 <__aeabi_uldivmod>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002c60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c6a:	e002      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3750      	adds	r7, #80	; 0x50
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	007a1200 	.word	0x007a1200

08002c8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000014 	.word	0x20000014

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ca8:	f7ff fff0 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0a9b      	lsrs	r3, r3, #10
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4903      	ldr	r1, [pc, #12]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08005ed8 	.word	0x08005ed8

08002ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cd0:	f7ff ffdc 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0b5b      	lsrs	r3, r3, #13
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	08005ed8 	.word	0x08005ed8

08002cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d012      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d1c:	4b69      	ldr	r3, [pc, #420]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a68      	ldr	r2, [pc, #416]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d26:	6093      	str	r3, [r2, #8]
 8002d28:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	4964      	ldr	r1, [pc, #400]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d017      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d4e:	4b5d      	ldr	r3, [pc, #372]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	4959      	ldr	r1, [pc, #356]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d017      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d8a:	4b4e      	ldr	r3, [pc, #312]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	494a      	ldr	r1, [pc, #296]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da8:	d101      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002db6:	2301      	movs	r3, #1
 8002db8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 808b 	beq.w	8002eee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a39      	ldr	r2, [pc, #228]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
 8002de4:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002df0:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a34      	ldr	r2, [pc, #208]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fa24 	bl	8001248 <HAL_GetTick>
 8002e00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e04:	f7fe fa20 	bl	8001248 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e38f      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e16:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e22:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d035      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d02e      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e40:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e56:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a1a      	ldr	r2, [pc, #104]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e62:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e68:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d114      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe f9e8 	bl	8001248 <HAL_GetTick>
 8002e78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7c:	f7fe f9e4 	bl	8001248 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e351      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e92:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0ee      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eaa:	d111      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002eba:	400b      	ands	r3, r1
 8002ebc:	4901      	ldr	r1, [pc, #4]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
 8002ec2:	e00b      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	0ffffcff 	.word	0x0ffffcff
 8002ed0:	4bac      	ldr	r3, [pc, #688]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4aab      	ldr	r2, [pc, #684]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002eda:	6093      	str	r3, [r2, #8]
 8002edc:	4ba9      	ldr	r3, [pc, #676]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	49a6      	ldr	r1, [pc, #664]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d010      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002efa:	4ba2      	ldr	r3, [pc, #648]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f00:	4aa0      	ldr	r2, [pc, #640]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f0a:	4b9e      	ldr	r3, [pc, #632]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	499b      	ldr	r1, [pc, #620]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f28:	4b96      	ldr	r3, [pc, #600]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f36:	4993      	ldr	r1, [pc, #588]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f4a:	4b8e      	ldr	r3, [pc, #568]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f58:	498a      	ldr	r1, [pc, #552]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f6c:	4b85      	ldr	r3, [pc, #532]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7a:	4982      	ldr	r1, [pc, #520]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f8e:	4b7d      	ldr	r3, [pc, #500]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4979      	ldr	r1, [pc, #484]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fb0:	4b74      	ldr	r3, [pc, #464]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f023 0203 	bic.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	4971      	ldr	r1, [pc, #452]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fd2:	4b6c      	ldr	r3, [pc, #432]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	f023 020c 	bic.w	r2, r3, #12
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe0:	4968      	ldr	r1, [pc, #416]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ff4:	4b63      	ldr	r3, [pc, #396]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003002:	4960      	ldr	r1, [pc, #384]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003016:	4b5b      	ldr	r3, [pc, #364]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003024:	4957      	ldr	r1, [pc, #348]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003038:	4b52      	ldr	r3, [pc, #328]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003046:	494f      	ldr	r1, [pc, #316]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800305a:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003068:	4946      	ldr	r1, [pc, #280]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800307c:	4b41      	ldr	r3, [pc, #260]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	493e      	ldr	r1, [pc, #248]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800309e:	4b39      	ldr	r3, [pc, #228]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ac:	4935      	ldr	r1, [pc, #212]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ce:	492d      	ldr	r1, [pc, #180]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d011      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030e2:	4b28      	ldr	r3, [pc, #160]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f0:	4924      	ldr	r1, [pc, #144]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003100:	d101      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003102:	2301      	movs	r3, #1
 8003104:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003112:	2301      	movs	r3, #1
 8003114:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	4914      	ldr	r1, [pc, #80]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003154:	490b      	ldr	r1, [pc, #44]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00f      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003178:	4902      	ldr	r1, [pc, #8]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003180:	e002      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00b      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003194:	4b8a      	ldr	r3, [pc, #552]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800319a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	4986      	ldr	r1, [pc, #536]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00b      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80031b8:	4b81      	ldr	r3, [pc, #516]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c8:	497d      	ldr	r1, [pc, #500]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d006      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80d6 	beq.w	8003390 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031e4:	4b76      	ldr	r3, [pc, #472]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a75      	ldr	r2, [pc, #468]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f0:	f7fe f82a 	bl	8001248 <HAL_GetTick>
 80031f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031f8:	f7fe f826 	bl	8001248 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e195      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800320a:	4b6d      	ldr	r3, [pc, #436]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d021      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11d      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800322a:	4b65      	ldr	r3, [pc, #404]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800322c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003238:	4b61      	ldr	r3, [pc, #388]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800323a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323e:	0e1b      	lsrs	r3, r3, #24
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	019a      	lsls	r2, r3, #6
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	071b      	lsls	r3, r3, #28
 800325e:	4958      	ldr	r1, [pc, #352]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d004      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003284:	2b00      	cmp	r3, #0
 8003286:	d02e      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003290:	d129      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003292:	4b4b      	ldr	r3, [pc, #300]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032a0:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a6:	0f1b      	lsrs	r3, r3, #28
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	019a      	lsls	r2, r3, #6
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	061b      	lsls	r3, r3, #24
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	071b      	lsls	r3, r3, #28
 80032c6:	493e      	ldr	r1, [pc, #248]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032ce:	4b3c      	ldr	r3, [pc, #240]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d4:	f023 021f 	bic.w	r2, r3, #31
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	3b01      	subs	r3, #1
 80032de:	4938      	ldr	r1, [pc, #224]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01d      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032f2:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f8:	0e1b      	lsrs	r3, r3, #24
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003300:	4b2f      	ldr	r3, [pc, #188]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003306:	0f1b      	lsrs	r3, r3, #28
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	019a      	lsls	r2, r3, #6
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	041b      	lsls	r3, r3, #16
 800331a:	431a      	orrs	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	061b      	lsls	r3, r3, #24
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	071b      	lsls	r3, r3, #28
 8003326:	4926      	ldr	r1, [pc, #152]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d011      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	019a      	lsls	r2, r3, #6
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	071b      	lsls	r3, r3, #28
 8003356:	491a      	ldr	r1, [pc, #104]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800335e:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003364:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336a:	f7fd ff6d 	bl	8001248 <HAL_GetTick>
 800336e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003370:	e008      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003372:	f7fd ff69 	bl	8001248 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b64      	cmp	r3, #100	; 0x64
 800337e:	d901      	bls.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0d8      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b01      	cmp	r3, #1
 8003394:	f040 80ce 	bne.w	8003534 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a08      	ldr	r2, [pc, #32]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a4:	f7fd ff50 	bl	8001248 <HAL_GetTick>
 80033a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033aa:	e00b      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033ac:	f7fd ff4c 	bl	8001248 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d904      	bls.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e0bb      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033c4:	4b5e      	ldr	r3, [pc, #376]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033d0:	d0ec      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d02e      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d12a      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033fa:	4b51      	ldr	r3, [pc, #324]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	0c1b      	lsrs	r3, r3, #16
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003408:	4b4d      	ldr	r3, [pc, #308]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	0f1b      	lsrs	r3, r3, #28
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	019a      	lsls	r2, r3, #6
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	061b      	lsls	r3, r3, #24
 8003428:	431a      	orrs	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	071b      	lsls	r3, r3, #28
 800342e:	4944      	ldr	r1, [pc, #272]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003436:	4b42      	ldr	r3, [pc, #264]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800343c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	3b01      	subs	r3, #1
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	493d      	ldr	r1, [pc, #244]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d022      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003464:	d11d      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003466:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	0e1b      	lsrs	r3, r3, #24
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003474:	4b32      	ldr	r3, [pc, #200]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	0f1b      	lsrs	r3, r3, #28
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	019a      	lsls	r2, r3, #6
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	431a      	orrs	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	061b      	lsls	r3, r3, #24
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	071b      	lsls	r3, r3, #28
 800349a:	4929      	ldr	r1, [pc, #164]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d028      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	0e1b      	lsrs	r3, r3, #24
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034bc:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	019a      	lsls	r2, r3, #6
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	431a      	orrs	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	071b      	lsls	r3, r3, #28
 80034e2:	4917      	ldr	r1, [pc, #92]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	4911      	ldr	r1, [pc, #68]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350c:	f7fd fe9c 	bl	8001248 <HAL_GetTick>
 8003510:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003514:	f7fd fe98 	bl	8001248 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e007      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800352e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003532:	d1ef      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800

08003544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d001      	beq.n	800355c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e054      	b.n	8003606 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <HAL_TIM_Base_Start_IT+0xd0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d022      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003586:	d01d      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a22      	ldr	r2, [pc, #136]	; (8003618 <HAL_TIM_Base_Start_IT+0xd4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d018      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a21      	ldr	r2, [pc, #132]	; (800361c <HAL_TIM_Base_Start_IT+0xd8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d013      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1f      	ldr	r2, [pc, #124]	; (8003620 <HAL_TIM_Base_Start_IT+0xdc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00e      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <HAL_TIM_Base_Start_IT+0xe0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d009      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <HAL_TIM_Base_Start_IT+0xe4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1b      	ldr	r2, [pc, #108]	; (800362c <HAL_TIM_Base_Start_IT+0xe8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d115      	bne.n	80035f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_TIM_Base_Start_IT+0xec>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d015      	beq.n	8003602 <HAL_TIM_Base_Start_IT+0xbe>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d011      	beq.n	8003602 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ee:	e008      	b.n	8003602 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e000      	b.n	8003604 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003602:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40010000 	.word	0x40010000
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800
 8003620:	40000c00 	.word	0x40000c00
 8003624:	40010400 	.word	0x40010400
 8003628:	40014000 	.word	0x40014000
 800362c:	40001800 	.word	0x40001800
 8003630:	00010007 	.word	0x00010007

08003634 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e049      	b.n	80036da <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd fb80 	bl	8000d60 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 f9de 	bl	8003a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d020      	beq.n	8003746 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01b      	beq.n	8003746 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f06f 0202 	mvn.w	r2, #2
 8003716:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f963 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 8003732:	e005      	b.n	8003740 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f955 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f966 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01b      	beq.n	8003792 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f06f 0204 	mvn.w	r2, #4
 8003762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f93d 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 800377e:	e005      	b.n	800378c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f92f 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f940 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d020      	beq.n	80037de <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01b      	beq.n	80037de <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f06f 0208 	mvn.w	r2, #8
 80037ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2204      	movs	r2, #4
 80037b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f917 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 80037ca:	e005      	b.n	80037d8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f909 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f91a 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d020      	beq.n	800382a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01b      	beq.n	800382a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f06f 0210 	mvn.w	r2, #16
 80037fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2208      	movs	r2, #8
 8003800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f8f1 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 8003816:	e005      	b.n	8003824 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f8e3 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f8f4 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00c      	beq.n	800384e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f06f 0201 	mvn.w	r2, #1
 8003846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7fd f99d 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fc7e 	bl	8004178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fc76 	bl	800418c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00c      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8ae 	bl	8003a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0220 	mvn.w	r2, #32
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fc3e 	bl	8004164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_TIM_OC_ConfigChannel+0x1e>
 800390a:	2302      	movs	r3, #2
 800390c:	e066      	b.n	80039dc <HAL_TIM_OC_ConfigChannel+0xec>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b14      	cmp	r3, #20
 800391a:	d857      	bhi.n	80039cc <HAL_TIM_OC_ConfigChannel+0xdc>
 800391c:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <HAL_TIM_OC_ConfigChannel+0x34>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003979 	.word	0x08003979
 8003928:	080039cd 	.word	0x080039cd
 800392c:	080039cd 	.word	0x080039cd
 8003930:	080039cd 	.word	0x080039cd
 8003934:	08003987 	.word	0x08003987
 8003938:	080039cd 	.word	0x080039cd
 800393c:	080039cd 	.word	0x080039cd
 8003940:	080039cd 	.word	0x080039cd
 8003944:	08003995 	.word	0x08003995
 8003948:	080039cd 	.word	0x080039cd
 800394c:	080039cd 	.word	0x080039cd
 8003950:	080039cd 	.word	0x080039cd
 8003954:	080039a3 	.word	0x080039a3
 8003958:	080039cd 	.word	0x080039cd
 800395c:	080039cd 	.word	0x080039cd
 8003960:	080039cd 	.word	0x080039cd
 8003964:	080039b1 	.word	0x080039b1
 8003968:	080039cd 	.word	0x080039cd
 800396c:	080039cd 	.word	0x080039cd
 8003970:	080039cd 	.word	0x080039cd
 8003974:	080039bf 	.word	0x080039bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f904 	bl	8003b8c <TIM_OC1_SetConfig>
      break;
 8003984:	e025      	b.n	80039d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 f96f 	bl	8003c70 <TIM_OC2_SetConfig>
      break;
 8003992:	e01e      	b.n	80039d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f9e0 	bl	8003d60 <TIM_OC3_SetConfig>
      break;
 80039a0:	e017      	b.n	80039d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fa4f 	bl	8003e4c <TIM_OC4_SetConfig>
      break;
 80039ae:	e010      	b.n	80039d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 faa0 	bl	8003efc <TIM_OC5_SetConfig>
      break;
 80039bc:	e009      	b.n	80039d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 faeb 	bl	8003fa0 <TIM_OC6_SetConfig>
      break;
 80039ca:	e002      	b.n	80039d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75fb      	strb	r3, [r7, #23]
      break;
 80039d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039da:	7dfb      	ldrb	r3, [r7, #23]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a46      	ldr	r2, [pc, #280]	; (8003b60 <TIM_Base_SetConfig+0x12c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a52:	d00f      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a43      	ldr	r2, [pc, #268]	; (8003b64 <TIM_Base_SetConfig+0x130>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00b      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a42      	ldr	r2, [pc, #264]	; (8003b68 <TIM_Base_SetConfig+0x134>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a41      	ldr	r2, [pc, #260]	; (8003b6c <TIM_Base_SetConfig+0x138>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a40      	ldr	r2, [pc, #256]	; (8003b70 <TIM_Base_SetConfig+0x13c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d108      	bne.n	8003a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a35      	ldr	r2, [pc, #212]	; (8003b60 <TIM_Base_SetConfig+0x12c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d02b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d027      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a32      	ldr	r2, [pc, #200]	; (8003b64 <TIM_Base_SetConfig+0x130>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d023      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a31      	ldr	r2, [pc, #196]	; (8003b68 <TIM_Base_SetConfig+0x134>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01f      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <TIM_Base_SetConfig+0x138>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2f      	ldr	r2, [pc, #188]	; (8003b70 <TIM_Base_SetConfig+0x13c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d017      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a2e      	ldr	r2, [pc, #184]	; (8003b74 <TIM_Base_SetConfig+0x140>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a2d      	ldr	r2, [pc, #180]	; (8003b78 <TIM_Base_SetConfig+0x144>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <TIM_Base_SetConfig+0x148>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2b      	ldr	r2, [pc, #172]	; (8003b80 <TIM_Base_SetConfig+0x14c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2a      	ldr	r2, [pc, #168]	; (8003b84 <TIM_Base_SetConfig+0x150>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a29      	ldr	r2, [pc, #164]	; (8003b88 <TIM_Base_SetConfig+0x154>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d108      	bne.n	8003af8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <TIM_Base_SetConfig+0x12c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_Base_SetConfig+0xf8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <TIM_Base_SetConfig+0x13c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d103      	bne.n	8003b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d105      	bne.n	8003b52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f023 0201 	bic.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	611a      	str	r2, [r3, #16]
  }
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40010000 	.word	0x40010000
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800
 8003b6c:	40000c00 	.word	0x40000c00
 8003b70:	40010400 	.word	0x40010400
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40014400 	.word	0x40014400
 8003b7c:	40014800 	.word	0x40014800
 8003b80:	40001800 	.word	0x40001800
 8003b84:	40001c00 	.word	0x40001c00
 8003b88:	40002000 	.word	0x40002000

08003b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f023 0201 	bic.w	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <TIM_OC1_SetConfig+0xd8>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f023 0302 	bic.w	r3, r3, #2
 8003bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <TIM_OC1_SetConfig+0xdc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_OC1_SetConfig+0x64>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <TIM_OC1_SetConfig+0xe0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d10c      	bne.n	8003c0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 0308 	bic.w	r3, r3, #8
 8003bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f023 0304 	bic.w	r3, r3, #4
 8003c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <TIM_OC1_SetConfig+0xdc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d003      	beq.n	8003c1a <TIM_OC1_SetConfig+0x8e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <TIM_OC1_SetConfig+0xe0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d111      	bne.n	8003c3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	621a      	str	r2, [r3, #32]
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	fffeff8f 	.word	0xfffeff8f
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	40010400 	.word	0x40010400

08003c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f023 0210 	bic.w	r2, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <TIM_OC2_SetConfig+0xe4>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f023 0320 	bic.w	r3, r3, #32
 8003cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a23      	ldr	r2, [pc, #140]	; (8003d58 <TIM_OC2_SetConfig+0xe8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <TIM_OC2_SetConfig+0x68>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a22      	ldr	r2, [pc, #136]	; (8003d5c <TIM_OC2_SetConfig+0xec>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d10d      	bne.n	8003cf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <TIM_OC2_SetConfig+0xe8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_OC2_SetConfig+0x94>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <TIM_OC2_SetConfig+0xec>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d113      	bne.n	8003d2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	feff8fff 	.word	0xfeff8fff
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	40010400 	.word	0x40010400

08003d60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4b2d      	ldr	r3, [pc, #180]	; (8003e40 <TIM_OC3_SetConfig+0xe0>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a22      	ldr	r2, [pc, #136]	; (8003e44 <TIM_OC3_SetConfig+0xe4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_OC3_SetConfig+0x66>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <TIM_OC3_SetConfig+0xe8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10d      	bne.n	8003de2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <TIM_OC3_SetConfig+0xe4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_OC3_SetConfig+0x92>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <TIM_OC3_SetConfig+0xe8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d113      	bne.n	8003e1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	621a      	str	r2, [r3, #32]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	fffeff8f 	.word	0xfffeff8f
 8003e44:	40010000 	.word	0x40010000
 8003e48:	40010400 	.word	0x40010400

08003e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <TIM_OC4_SetConfig+0xa4>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	031b      	lsls	r3, r3, #12
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <TIM_OC4_SetConfig+0xa8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_OC4_SetConfig+0x68>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a12      	ldr	r2, [pc, #72]	; (8003ef8 <TIM_OC4_SetConfig+0xac>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d109      	bne.n	8003ec8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	019b      	lsls	r3, r3, #6
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	feff8fff 	.word	0xfeff8fff
 8003ef4:	40010000 	.word	0x40010000
 8003ef8:	40010400 	.word	0x40010400

08003efc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <TIM_OC5_SetConfig+0x98>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <TIM_OC5_SetConfig+0x9c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d003      	beq.n	8003f5a <TIM_OC5_SetConfig+0x5e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a11      	ldr	r2, [pc, #68]	; (8003f9c <TIM_OC5_SetConfig+0xa0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d109      	bne.n	8003f6e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	621a      	str	r2, [r3, #32]
}
 8003f88:	bf00      	nop
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	fffeff8f 	.word	0xfffeff8f
 8003f98:	40010000 	.word	0x40010000
 8003f9c:	40010400 	.word	0x40010400

08003fa0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4b1c      	ldr	r3, [pc, #112]	; (800403c <TIM_OC6_SetConfig+0x9c>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	021b      	lsls	r3, r3, #8
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	051b      	lsls	r3, r3, #20
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a13      	ldr	r2, [pc, #76]	; (8004040 <TIM_OC6_SetConfig+0xa0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_OC6_SetConfig+0x60>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a12      	ldr	r2, [pc, #72]	; (8004044 <TIM_OC6_SetConfig+0xa4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d109      	bne.n	8004014 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004006:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	feff8fff 	.word	0xfeff8fff
 8004040:	40010000 	.word	0x40010000
 8004044:	40010400 	.word	0x40010400

08004048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800405c:	2302      	movs	r3, #2
 800405e:	e06d      	b.n	800413c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a30      	ldr	r2, [pc, #192]	; (8004148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2f      	ldr	r2, [pc, #188]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800409a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a20      	ldr	r2, [pc, #128]	; (8004148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d022      	beq.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d2:	d01d      	beq.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1d      	ldr	r2, [pc, #116]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d018      	beq.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1c      	ldr	r2, [pc, #112]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d013      	beq.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1a      	ldr	r2, [pc, #104]	; (8004158 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00e      	beq.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a15      	ldr	r2, [pc, #84]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d009      	beq.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a16      	ldr	r2, [pc, #88]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a15      	ldr	r2, [pc, #84]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d10c      	bne.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004116:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	4313      	orrs	r3, r2
 8004120:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40010000 	.word	0x40010000
 800414c:	40010400 	.word	0x40010400
 8004150:	40000400 	.word	0x40000400
 8004154:	40000800 	.word	0x40000800
 8004158:	40000c00 	.word	0x40000c00
 800415c:	40014000 	.word	0x40014000
 8004160:	40001800 	.word	0x40001800

08004164 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e040      	b.n	8004234 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fc fe2a 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2224      	movs	r2, #36	; 0x24
 80041cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0201 	bic.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fe6c 	bl	8004ec4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fc05 	bl	80049fc <UART_SetConfig>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e01b      	b.n	8004234 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800420a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800421a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 feeb 	bl	8005008 <UART_CheckIdleState>
 8004232:	4603      	mov	r3, r0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004250:	2b20      	cmp	r3, #32
 8004252:	d177      	bne.n	8004344 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_UART_Transmit+0x24>
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e070      	b.n	8004346 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2221      	movs	r2, #33	; 0x21
 8004270:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004272:	f7fc ffe9 	bl	8001248 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	88fa      	ldrh	r2, [r7, #6]
 800427c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	88fa      	ldrh	r2, [r7, #6]
 8004284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d108      	bne.n	80042a4 <HAL_UART_Transmit+0x68>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	e003      	b.n	80042ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042ac:	e02f      	b.n	800430e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 ff4d 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d004      	beq.n	80042ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e03b      	b.n	8004346 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	3302      	adds	r3, #2
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	e007      	b.n	80042fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	781a      	ldrb	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	3301      	adds	r3, #1
 80042fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1c9      	bne.n	80042ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2200      	movs	r2, #0
 8004322:	2140      	movs	r1, #64	; 0x40
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 ff17 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e005      	b.n	8004346 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	e000      	b.n	8004346 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004344:	2302      	movs	r3, #2
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b08a      	sub	sp, #40	; 0x28
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	4613      	mov	r3, r2
 800435a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004362:	2b20      	cmp	r3, #32
 8004364:	d132      	bne.n	80043cc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <HAL_UART_Receive_IT+0x24>
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e02b      	b.n	80043ce <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d018      	beq.n	80043bc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	613b      	str	r3, [r7, #16]
   return(result);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	623b      	str	r3, [r7, #32]
 80043aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	69f9      	ldr	r1, [r7, #28]
 80043ae:	6a3a      	ldr	r2, [r7, #32]
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e6      	bne.n	800438a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	461a      	mov	r2, r3
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 ff36 	bl	8005234 <UART_Start_Receive_IT>
 80043c8:	4603      	mov	r3, r0
 80043ca:	e000      	b.n	80043ce <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3728      	adds	r7, #40	; 0x28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b0ba      	sub	sp, #232	; 0xe8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004402:	f640 030f 	movw	r3, #2063	; 0x80f
 8004406:	4013      	ands	r3, r2
 8004408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800440c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d115      	bne.n	8004440 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00f      	beq.n	8004440 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 82ac 	beq.w	800498e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
      }
      return;
 800443e:	e2a6      	b.n	800498e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004440:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8117 	beq.w	8004678 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800444a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004456:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800445a:	4b85      	ldr	r3, [pc, #532]	; (8004670 <HAL_UART_IRQHandler+0x298>)
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 810a 	beq.w	8004678 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d011      	beq.n	8004494 <HAL_UART_IRQHandler+0xbc>
 8004470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2201      	movs	r2, #1
 8004482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448a:	f043 0201 	orr.w	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d011      	beq.n	80044c4 <HAL_UART_IRQHandler+0xec>
 80044a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00b      	beq.n	80044c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2202      	movs	r2, #2
 80044b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ba:	f043 0204 	orr.w	r2, r3, #4
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d011      	beq.n	80044f4 <HAL_UART_IRQHandler+0x11c>
 80044d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2204      	movs	r2, #4
 80044e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ea:	f043 0202 	orr.w	r2, r3, #2
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d017      	beq.n	8004530 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d105      	bne.n	8004518 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800450c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004510:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00b      	beq.n	8004530 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2208      	movs	r2, #8
 800451e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004526:	f043 0208 	orr.w	r2, r3, #8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004538:	2b00      	cmp	r3, #0
 800453a:	d012      	beq.n	8004562 <HAL_UART_IRQHandler+0x18a>
 800453c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00c      	beq.n	8004562 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004558:	f043 0220 	orr.w	r2, r3, #32
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8212 	beq.w	8004992 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00d      	beq.n	8004596 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800457a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d005      	beq.n	80045ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d04f      	beq.n	800465a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 ff00 	bl	80053c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d141      	bne.n	8004652 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3308      	adds	r3, #8
 80045d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3308      	adds	r3, #8
 80045f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1d9      	bne.n	80045ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461e:	2b00      	cmp	r3, #0
 8004620:	d013      	beq.n	800464a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004626:	4a13      	ldr	r2, [pc, #76]	; (8004674 <HAL_UART_IRQHandler+0x29c>)
 8004628:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462e:	4618      	mov	r0, r3
 8004630:	f7fc ffbb 	bl	80015aa <HAL_DMA_Abort_IT>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004644:	4610      	mov	r0, r2
 8004646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	e00f      	b.n	800466a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f9b6 	bl	80049bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004650:	e00b      	b.n	800466a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f9b2 	bl	80049bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004658:	e007      	b.n	800466a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f9ae 	bl	80049bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004668:	e193      	b.n	8004992 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466a:	bf00      	nop
    return;
 800466c:	e191      	b.n	8004992 <HAL_UART_IRQHandler+0x5ba>
 800466e:	bf00      	nop
 8004670:	04000120 	.word	0x04000120
 8004674:	08005489 	.word	0x08005489

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467c:	2b01      	cmp	r3, #1
 800467e:	f040 814c 	bne.w	800491a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8145 	beq.w	800491a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 813e 	beq.w	800491a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2210      	movs	r2, #16
 80046a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	f040 80b6 	bne.w	8004822 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 8165 	beq.w	8004996 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046d6:	429a      	cmp	r2, r3
 80046d8:	f080 815d 	bcs.w	8004996 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f0:	f000 8086 	beq.w	8004800 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800470c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800471e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004722:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800472a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1da      	bne.n	80046f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800474e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3308      	adds	r3, #8
 800475e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004762:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004766:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800476a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e1      	bne.n	800473e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3308      	adds	r3, #8
 8004780:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800478a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004790:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3308      	adds	r3, #8
 800479a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800479e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e3      	bne.n	800477a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d0:	f023 0310 	bic.w	r3, r3, #16
 80047d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80047e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e4      	bne.n	80047c0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc fe65 	bl	80014ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004812:	b29b      	uxth	r3, r3
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	b29b      	uxth	r3, r3
 8004818:	4619      	mov	r1, r3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f8d8 	bl	80049d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004820:	e0b9      	b.n	8004996 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800482e:	b29b      	uxth	r3, r3
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80ab 	beq.w	800499a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004844:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80a6 	beq.w	800499a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004862:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004870:	647b      	str	r3, [r7, #68]	; 0x44
 8004872:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800487e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e4      	bne.n	800484e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3308      	adds	r3, #8
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	623b      	str	r3, [r7, #32]
   return(result);
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3308      	adds	r3, #8
 80048a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048a8:	633a      	str	r2, [r7, #48]	; 0x30
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e3      	bne.n	8004884 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f023 0310 	bic.w	r3, r3, #16
 80048e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	69b9      	ldr	r1, [r7, #24]
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	617b      	str	r3, [r7, #20]
   return(result);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e4      	bne.n	80048d0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2202      	movs	r2, #2
 800490a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800490c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f85c 	bl	80049d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004918:	e03f      	b.n	800499a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800491a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00e      	beq.n	8004944 <HAL_UART_IRQHandler+0x56c>
 8004926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800492a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800493a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f853 	bl	80049e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004942:	e02d      	b.n	80049a0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00e      	beq.n	800496e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01c      	beq.n	800499e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	4798      	blx	r3
    }
    return;
 800496c:	e017      	b.n	800499e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800496e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d012      	beq.n	80049a0 <HAL_UART_IRQHandler+0x5c8>
 800497a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00c      	beq.n	80049a0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fd94 	bl	80054b4 <UART_EndTransmit_IT>
    return;
 800498c:	e008      	b.n	80049a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 800498e:	bf00      	nop
 8004990:	e006      	b.n	80049a0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004992:	bf00      	nop
 8004994:	e004      	b.n	80049a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <HAL_UART_IRQHandler+0x5c8>
    return;
 800499e:	bf00      	nop
  }

}
 80049a0:	37e8      	adds	r7, #232	; 0xe8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop

080049a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4ba6      	ldr	r3, [pc, #664]	; (8004cc0 <UART_SetConfig+0x2c4>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	6979      	ldr	r1, [r7, #20]
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a94      	ldr	r2, [pc, #592]	; (8004cc4 <UART_SetConfig+0x2c8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d120      	bne.n	8004aba <UART_SetConfig+0xbe>
 8004a78:	4b93      	ldr	r3, [pc, #588]	; (8004cc8 <UART_SetConfig+0x2cc>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d816      	bhi.n	8004ab4 <UART_SetConfig+0xb8>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <UART_SetConfig+0x90>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004aa9 	.word	0x08004aa9
 8004a94:	08004aa3 	.word	0x08004aa3
 8004a98:	08004aaf 	.word	0x08004aaf
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e150      	b.n	8004d44 <UART_SetConfig+0x348>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	77fb      	strb	r3, [r7, #31]
 8004aa6:	e14d      	b.n	8004d44 <UART_SetConfig+0x348>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e14a      	b.n	8004d44 <UART_SetConfig+0x348>
 8004aae:	2308      	movs	r3, #8
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e147      	b.n	8004d44 <UART_SetConfig+0x348>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e144      	b.n	8004d44 <UART_SetConfig+0x348>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a83      	ldr	r2, [pc, #524]	; (8004ccc <UART_SetConfig+0x2d0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d132      	bne.n	8004b2a <UART_SetConfig+0x12e>
 8004ac4:	4b80      	ldr	r3, [pc, #512]	; (8004cc8 <UART_SetConfig+0x2cc>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	2b0c      	cmp	r3, #12
 8004ad0:	d828      	bhi.n	8004b24 <UART_SetConfig+0x128>
 8004ad2:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <UART_SetConfig+0xdc>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004b0d 	.word	0x08004b0d
 8004adc:	08004b25 	.word	0x08004b25
 8004ae0:	08004b25 	.word	0x08004b25
 8004ae4:	08004b25 	.word	0x08004b25
 8004ae8:	08004b19 	.word	0x08004b19
 8004aec:	08004b25 	.word	0x08004b25
 8004af0:	08004b25 	.word	0x08004b25
 8004af4:	08004b25 	.word	0x08004b25
 8004af8:	08004b13 	.word	0x08004b13
 8004afc:	08004b25 	.word	0x08004b25
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b25 	.word	0x08004b25
 8004b08:	08004b1f 	.word	0x08004b1f
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e118      	b.n	8004d44 <UART_SetConfig+0x348>
 8004b12:	2302      	movs	r3, #2
 8004b14:	77fb      	strb	r3, [r7, #31]
 8004b16:	e115      	b.n	8004d44 <UART_SetConfig+0x348>
 8004b18:	2304      	movs	r3, #4
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e112      	b.n	8004d44 <UART_SetConfig+0x348>
 8004b1e:	2308      	movs	r3, #8
 8004b20:	77fb      	strb	r3, [r7, #31]
 8004b22:	e10f      	b.n	8004d44 <UART_SetConfig+0x348>
 8004b24:	2310      	movs	r3, #16
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e10c      	b.n	8004d44 <UART_SetConfig+0x348>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a68      	ldr	r2, [pc, #416]	; (8004cd0 <UART_SetConfig+0x2d4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d120      	bne.n	8004b76 <UART_SetConfig+0x17a>
 8004b34:	4b64      	ldr	r3, [pc, #400]	; (8004cc8 <UART_SetConfig+0x2cc>)
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b3e:	2b30      	cmp	r3, #48	; 0x30
 8004b40:	d013      	beq.n	8004b6a <UART_SetConfig+0x16e>
 8004b42:	2b30      	cmp	r3, #48	; 0x30
 8004b44:	d814      	bhi.n	8004b70 <UART_SetConfig+0x174>
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d009      	beq.n	8004b5e <UART_SetConfig+0x162>
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d810      	bhi.n	8004b70 <UART_SetConfig+0x174>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <UART_SetConfig+0x15c>
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d006      	beq.n	8004b64 <UART_SetConfig+0x168>
 8004b56:	e00b      	b.n	8004b70 <UART_SetConfig+0x174>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e0f2      	b.n	8004d44 <UART_SetConfig+0x348>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e0ef      	b.n	8004d44 <UART_SetConfig+0x348>
 8004b64:	2304      	movs	r3, #4
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e0ec      	b.n	8004d44 <UART_SetConfig+0x348>
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	77fb      	strb	r3, [r7, #31]
 8004b6e:	e0e9      	b.n	8004d44 <UART_SetConfig+0x348>
 8004b70:	2310      	movs	r3, #16
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e0e6      	b.n	8004d44 <UART_SetConfig+0x348>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a56      	ldr	r2, [pc, #344]	; (8004cd4 <UART_SetConfig+0x2d8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d120      	bne.n	8004bc2 <UART_SetConfig+0x1c6>
 8004b80:	4b51      	ldr	r3, [pc, #324]	; (8004cc8 <UART_SetConfig+0x2cc>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b8c:	d013      	beq.n	8004bb6 <UART_SetConfig+0x1ba>
 8004b8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b90:	d814      	bhi.n	8004bbc <UART_SetConfig+0x1c0>
 8004b92:	2b80      	cmp	r3, #128	; 0x80
 8004b94:	d009      	beq.n	8004baa <UART_SetConfig+0x1ae>
 8004b96:	2b80      	cmp	r3, #128	; 0x80
 8004b98:	d810      	bhi.n	8004bbc <UART_SetConfig+0x1c0>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <UART_SetConfig+0x1a8>
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d006      	beq.n	8004bb0 <UART_SetConfig+0x1b4>
 8004ba2:	e00b      	b.n	8004bbc <UART_SetConfig+0x1c0>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e0cc      	b.n	8004d44 <UART_SetConfig+0x348>
 8004baa:	2302      	movs	r3, #2
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e0c9      	b.n	8004d44 <UART_SetConfig+0x348>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e0c6      	b.n	8004d44 <UART_SetConfig+0x348>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e0c3      	b.n	8004d44 <UART_SetConfig+0x348>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e0c0      	b.n	8004d44 <UART_SetConfig+0x348>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a44      	ldr	r2, [pc, #272]	; (8004cd8 <UART_SetConfig+0x2dc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d125      	bne.n	8004c18 <UART_SetConfig+0x21c>
 8004bcc:	4b3e      	ldr	r3, [pc, #248]	; (8004cc8 <UART_SetConfig+0x2cc>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bda:	d017      	beq.n	8004c0c <UART_SetConfig+0x210>
 8004bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004be0:	d817      	bhi.n	8004c12 <UART_SetConfig+0x216>
 8004be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be6:	d00b      	beq.n	8004c00 <UART_SetConfig+0x204>
 8004be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bec:	d811      	bhi.n	8004c12 <UART_SetConfig+0x216>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <UART_SetConfig+0x1fe>
 8004bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf6:	d006      	beq.n	8004c06 <UART_SetConfig+0x20a>
 8004bf8:	e00b      	b.n	8004c12 <UART_SetConfig+0x216>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	77fb      	strb	r3, [r7, #31]
 8004bfe:	e0a1      	b.n	8004d44 <UART_SetConfig+0x348>
 8004c00:	2302      	movs	r3, #2
 8004c02:	77fb      	strb	r3, [r7, #31]
 8004c04:	e09e      	b.n	8004d44 <UART_SetConfig+0x348>
 8004c06:	2304      	movs	r3, #4
 8004c08:	77fb      	strb	r3, [r7, #31]
 8004c0a:	e09b      	b.n	8004d44 <UART_SetConfig+0x348>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e098      	b.n	8004d44 <UART_SetConfig+0x348>
 8004c12:	2310      	movs	r3, #16
 8004c14:	77fb      	strb	r3, [r7, #31]
 8004c16:	e095      	b.n	8004d44 <UART_SetConfig+0x348>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a2f      	ldr	r2, [pc, #188]	; (8004cdc <UART_SetConfig+0x2e0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d125      	bne.n	8004c6e <UART_SetConfig+0x272>
 8004c22:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <UART_SetConfig+0x2cc>)
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c30:	d017      	beq.n	8004c62 <UART_SetConfig+0x266>
 8004c32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c36:	d817      	bhi.n	8004c68 <UART_SetConfig+0x26c>
 8004c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3c:	d00b      	beq.n	8004c56 <UART_SetConfig+0x25a>
 8004c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c42:	d811      	bhi.n	8004c68 <UART_SetConfig+0x26c>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <UART_SetConfig+0x254>
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4c:	d006      	beq.n	8004c5c <UART_SetConfig+0x260>
 8004c4e:	e00b      	b.n	8004c68 <UART_SetConfig+0x26c>
 8004c50:	2301      	movs	r3, #1
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e076      	b.n	8004d44 <UART_SetConfig+0x348>
 8004c56:	2302      	movs	r3, #2
 8004c58:	77fb      	strb	r3, [r7, #31]
 8004c5a:	e073      	b.n	8004d44 <UART_SetConfig+0x348>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e070      	b.n	8004d44 <UART_SetConfig+0x348>
 8004c62:	2308      	movs	r3, #8
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e06d      	b.n	8004d44 <UART_SetConfig+0x348>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e06a      	b.n	8004d44 <UART_SetConfig+0x348>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <UART_SetConfig+0x2e4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d138      	bne.n	8004cea <UART_SetConfig+0x2ee>
 8004c78:	4b13      	ldr	r3, [pc, #76]	; (8004cc8 <UART_SetConfig+0x2cc>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c86:	d017      	beq.n	8004cb8 <UART_SetConfig+0x2bc>
 8004c88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c8c:	d82a      	bhi.n	8004ce4 <UART_SetConfig+0x2e8>
 8004c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c92:	d00b      	beq.n	8004cac <UART_SetConfig+0x2b0>
 8004c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c98:	d824      	bhi.n	8004ce4 <UART_SetConfig+0x2e8>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <UART_SetConfig+0x2aa>
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca2:	d006      	beq.n	8004cb2 <UART_SetConfig+0x2b6>
 8004ca4:	e01e      	b.n	8004ce4 <UART_SetConfig+0x2e8>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e04b      	b.n	8004d44 <UART_SetConfig+0x348>
 8004cac:	2302      	movs	r3, #2
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e048      	b.n	8004d44 <UART_SetConfig+0x348>
 8004cb2:	2304      	movs	r3, #4
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e045      	b.n	8004d44 <UART_SetConfig+0x348>
 8004cb8:	2308      	movs	r3, #8
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e042      	b.n	8004d44 <UART_SetConfig+0x348>
 8004cbe:	bf00      	nop
 8004cc0:	efff69f3 	.word	0xefff69f3
 8004cc4:	40011000 	.word	0x40011000
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40004400 	.word	0x40004400
 8004cd0:	40004800 	.word	0x40004800
 8004cd4:	40004c00 	.word	0x40004c00
 8004cd8:	40005000 	.word	0x40005000
 8004cdc:	40011400 	.word	0x40011400
 8004ce0:	40007800 	.word	0x40007800
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e02c      	b.n	8004d44 <UART_SetConfig+0x348>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a72      	ldr	r2, [pc, #456]	; (8004eb8 <UART_SetConfig+0x4bc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d125      	bne.n	8004d40 <UART_SetConfig+0x344>
 8004cf4:	4b71      	ldr	r3, [pc, #452]	; (8004ebc <UART_SetConfig+0x4c0>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cfe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d02:	d017      	beq.n	8004d34 <UART_SetConfig+0x338>
 8004d04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d08:	d817      	bhi.n	8004d3a <UART_SetConfig+0x33e>
 8004d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0e:	d00b      	beq.n	8004d28 <UART_SetConfig+0x32c>
 8004d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d14:	d811      	bhi.n	8004d3a <UART_SetConfig+0x33e>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <UART_SetConfig+0x326>
 8004d1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d1e:	d006      	beq.n	8004d2e <UART_SetConfig+0x332>
 8004d20:	e00b      	b.n	8004d3a <UART_SetConfig+0x33e>
 8004d22:	2300      	movs	r3, #0
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e00d      	b.n	8004d44 <UART_SetConfig+0x348>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e00a      	b.n	8004d44 <UART_SetConfig+0x348>
 8004d2e:	2304      	movs	r3, #4
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e007      	b.n	8004d44 <UART_SetConfig+0x348>
 8004d34:	2308      	movs	r3, #8
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e004      	b.n	8004d44 <UART_SetConfig+0x348>
 8004d3a:	2310      	movs	r3, #16
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	e001      	b.n	8004d44 <UART_SetConfig+0x348>
 8004d40:	2310      	movs	r3, #16
 8004d42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4c:	d15b      	bne.n	8004e06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004d4e:	7ffb      	ldrb	r3, [r7, #31]
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d828      	bhi.n	8004da6 <UART_SetConfig+0x3aa>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <UART_SetConfig+0x360>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004d81 	.word	0x08004d81
 8004d60:	08004d89 	.word	0x08004d89
 8004d64:	08004d91 	.word	0x08004d91
 8004d68:	08004da7 	.word	0x08004da7
 8004d6c:	08004d97 	.word	0x08004d97
 8004d70:	08004da7 	.word	0x08004da7
 8004d74:	08004da7 	.word	0x08004da7
 8004d78:	08004da7 	.word	0x08004da7
 8004d7c:	08004d9f 	.word	0x08004d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d80:	f7fd ff90 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8004d84:	61b8      	str	r0, [r7, #24]
        break;
 8004d86:	e013      	b.n	8004db0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d88:	f7fd ffa0 	bl	8002ccc <HAL_RCC_GetPCLK2Freq>
 8004d8c:	61b8      	str	r0, [r7, #24]
        break;
 8004d8e:	e00f      	b.n	8004db0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d90:	4b4b      	ldr	r3, [pc, #300]	; (8004ec0 <UART_SetConfig+0x4c4>)
 8004d92:	61bb      	str	r3, [r7, #24]
        break;
 8004d94:	e00c      	b.n	8004db0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d96:	f7fd fe73 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8004d9a:	61b8      	str	r0, [r7, #24]
        break;
 8004d9c:	e008      	b.n	8004db0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da2:	61bb      	str	r3, [r7, #24]
        break;
 8004da4:	e004      	b.n	8004db0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	77bb      	strb	r3, [r7, #30]
        break;
 8004dae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d074      	beq.n	8004ea0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	005a      	lsls	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	085b      	lsrs	r3, r3, #1
 8004dc0:	441a      	add	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b0f      	cmp	r3, #15
 8004dd0:	d916      	bls.n	8004e00 <UART_SetConfig+0x404>
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	d212      	bcs.n	8004e00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f023 030f 	bic.w	r3, r3, #15
 8004de2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	085b      	lsrs	r3, r3, #1
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	89fb      	ldrh	r3, [r7, #14]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	89fa      	ldrh	r2, [r7, #14]
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	e04f      	b.n	8004ea0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	77bb      	strb	r3, [r7, #30]
 8004e04:	e04c      	b.n	8004ea0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e06:	7ffb      	ldrb	r3, [r7, #31]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d828      	bhi.n	8004e5e <UART_SetConfig+0x462>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0x418>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e39 	.word	0x08004e39
 8004e18:	08004e41 	.word	0x08004e41
 8004e1c:	08004e49 	.word	0x08004e49
 8004e20:	08004e5f 	.word	0x08004e5f
 8004e24:	08004e4f 	.word	0x08004e4f
 8004e28:	08004e5f 	.word	0x08004e5f
 8004e2c:	08004e5f 	.word	0x08004e5f
 8004e30:	08004e5f 	.word	0x08004e5f
 8004e34:	08004e57 	.word	0x08004e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e38:	f7fd ff34 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8004e3c:	61b8      	str	r0, [r7, #24]
        break;
 8004e3e:	e013      	b.n	8004e68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e40:	f7fd ff44 	bl	8002ccc <HAL_RCC_GetPCLK2Freq>
 8004e44:	61b8      	str	r0, [r7, #24]
        break;
 8004e46:	e00f      	b.n	8004e68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e48:	4b1d      	ldr	r3, [pc, #116]	; (8004ec0 <UART_SetConfig+0x4c4>)
 8004e4a:	61bb      	str	r3, [r7, #24]
        break;
 8004e4c:	e00c      	b.n	8004e68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4e:	f7fd fe17 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8004e52:	61b8      	str	r0, [r7, #24]
        break;
 8004e54:	e008      	b.n	8004e68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5a:	61bb      	str	r3, [r7, #24]
        break;
 8004e5c:	e004      	b.n	8004e68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	77bb      	strb	r3, [r7, #30]
        break;
 8004e66:	bf00      	nop
    }

    if (pclk != 0U)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d018      	beq.n	8004ea0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	085a      	lsrs	r2, r3, #1
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	441a      	add	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b0f      	cmp	r3, #15
 8004e86:	d909      	bls.n	8004e9c <UART_SetConfig+0x4a0>
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8e:	d205      	bcs.n	8004e9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	e001      	b.n	8004ea0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004eac:	7fbb      	ldrb	r3, [r7, #30]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40007c00 	.word	0x40007c00
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	00f42400 	.word	0x00f42400

08004ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01a      	beq.n	8004fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc2:	d10a      	bne.n	8004fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b098      	sub	sp, #96	; 0x60
 800500c:	af02      	add	r7, sp, #8
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005018:	f7fc f916 	bl	8001248 <HAL_GetTick>
 800501c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d12e      	bne.n	800508a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f88c 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d021      	beq.n	800508a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505a:	653b      	str	r3, [r7, #80]	; 0x50
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005064:	647b      	str	r3, [r7, #68]	; 0x44
 8005066:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800506a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e062      	b.n	8005150 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d149      	bne.n	800512c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a0:	2200      	movs	r2, #0
 80050a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f856 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d03c      	beq.n	800512c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	623b      	str	r3, [r7, #32]
   return(result);
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d0:	633b      	str	r3, [r7, #48]	; 0x30
 80050d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e6      	bne.n	80050b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3308      	adds	r3, #8
 8005102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005104:	61fa      	str	r2, [r7, #28]
 8005106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	69b9      	ldr	r1, [r7, #24]
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	617b      	str	r3, [r7, #20]
   return(result);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e011      	b.n	8005150 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3758      	adds	r7, #88	; 0x58
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005168:	e04f      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005170:	d04b      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005172:	f7fc f869 	bl	8001248 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	429a      	cmp	r2, r3
 8005180:	d302      	bcc.n	8005188 <UART_WaitOnFlagUntilTimeout+0x30>
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e04e      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d037      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xb2>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b80      	cmp	r3, #128	; 0x80
 800519e:	d034      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xb2>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d031      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d110      	bne.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2208      	movs	r2, #8
 80051ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f8ff 	bl	80053c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2208      	movs	r2, #8
 80051c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e029      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e4:	d111      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f8e5 	bl	80053c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e00f      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	429a      	cmp	r2, r3
 8005226:	d0a0      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005234:	b480      	push	{r7}
 8005236:	b097      	sub	sp, #92	; 0x5c
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	4613      	mov	r3, r2
 8005240:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005266:	d10e      	bne.n	8005286 <UART_Start_Receive_IT+0x52>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d105      	bne.n	800527c <UART_Start_Receive_IT+0x48>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005276:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800527a:	e02d      	b.n	80052d8 <UART_Start_Receive_IT+0xa4>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	22ff      	movs	r2, #255	; 0xff
 8005280:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005284:	e028      	b.n	80052d8 <UART_Start_Receive_IT+0xa4>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10d      	bne.n	80052aa <UART_Start_Receive_IT+0x76>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <UART_Start_Receive_IT+0x6c>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	22ff      	movs	r2, #255	; 0xff
 800529a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800529e:	e01b      	b.n	80052d8 <UART_Start_Receive_IT+0xa4>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	227f      	movs	r2, #127	; 0x7f
 80052a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052a8:	e016      	b.n	80052d8 <UART_Start_Receive_IT+0xa4>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052b2:	d10d      	bne.n	80052d0 <UART_Start_Receive_IT+0x9c>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d104      	bne.n	80052c6 <UART_Start_Receive_IT+0x92>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	227f      	movs	r2, #127	; 0x7f
 80052c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052c4:	e008      	b.n	80052d8 <UART_Start_Receive_IT+0xa4>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	223f      	movs	r2, #63	; 0x3f
 80052ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052ce:	e003      	b.n	80052d8 <UART_Start_Receive_IT+0xa4>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2222      	movs	r2, #34	; 0x22
 80052e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3308      	adds	r3, #8
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	f043 0301 	orr.w	r3, r3, #1
 80052fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005308:	64ba      	str	r2, [r7, #72]	; 0x48
 800530a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800530e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e5      	bne.n	80052e8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005324:	d107      	bne.n	8005336 <UART_Start_Receive_IT+0x102>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d103      	bne.n	8005336 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4a21      	ldr	r2, [pc, #132]	; (80053b8 <UART_Start_Receive_IT+0x184>)
 8005332:	669a      	str	r2, [r3, #104]	; 0x68
 8005334:	e002      	b.n	800533c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4a20      	ldr	r2, [pc, #128]	; (80053bc <UART_Start_Receive_IT+0x188>)
 800533a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d019      	beq.n	8005378 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005358:	64fb      	str	r3, [r7, #76]	; 0x4c
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
 8005364:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e6      	bne.n	8005344 <UART_Start_Receive_IT+0x110>
 8005376:	e018      	b.n	80053aa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	613b      	str	r3, [r7, #16]
   return(result);
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f043 0320 	orr.w	r3, r3, #32
 800538c:	653b      	str	r3, [r7, #80]	; 0x50
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005396:	623b      	str	r3, [r7, #32]
 8005398:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	69f9      	ldr	r1, [r7, #28]
 800539c:	6a3a      	ldr	r2, [r7, #32]
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e6      	bne.n	8005378 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	375c      	adds	r7, #92	; 0x5c
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	080056b1 	.word	0x080056b1
 80053bc:	08005509 	.word	0x08005509

080053c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b095      	sub	sp, #84	; 0x54
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e6:	643b      	str	r3, [r7, #64]	; 0x40
 80053e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e6      	bne.n	80053c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3308      	adds	r3, #8
 8005400:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	61fb      	str	r3, [r7, #28]
   return(result);
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	64bb      	str	r3, [r7, #72]	; 0x48
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3308      	adds	r3, #8
 8005418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800541a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e5      	bne.n	80053fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005432:	2b01      	cmp	r3, #1
 8005434:	d118      	bne.n	8005468 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	60bb      	str	r3, [r7, #8]
   return(result);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f023 0310 	bic.w	r3, r3, #16
 800544a:	647b      	str	r3, [r7, #68]	; 0x44
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6979      	ldr	r1, [r7, #20]
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	613b      	str	r3, [r7, #16]
   return(result);
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e6      	bne.n	8005436 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800547c:	bf00      	nop
 800547e:	3754      	adds	r7, #84	; 0x54
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7ff fa88 	bl	80049bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ac:	bf00      	nop
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6979      	ldr	r1, [r7, #20]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	613b      	str	r3, [r7, #16]
   return(result);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e6      	bne.n	80054bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff fa54 	bl	80049a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005500:	bf00      	nop
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b09c      	sub	sp, #112	; 0x70
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005516:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005520:	2b22      	cmp	r3, #34	; 0x22
 8005522:	f040 80b9 	bne.w	8005698 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005530:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005534:	b2d9      	uxtb	r1, r3
 8005536:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800553a:	b2da      	uxtb	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	400a      	ands	r2, r1
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	f040 809c 	bne.w	80056a8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800557e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005584:	66bb      	str	r3, [r7, #104]	; 0x68
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800558e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005590:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005594:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800559c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e6      	bne.n	8005570 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3308      	adds	r3, #8
 80055a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	667b      	str	r3, [r7, #100]	; 0x64
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3308      	adds	r3, #8
 80055c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80055c2:	647a      	str	r2, [r7, #68]	; 0x44
 80055c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e5      	bne.n	80055a2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d018      	beq.n	800562a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	623b      	str	r3, [r7, #32]
   return(result);
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800560c:	663b      	str	r3, [r7, #96]	; 0x60
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005616:	633b      	str	r3, [r7, #48]	; 0x30
 8005618:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800561c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e6      	bne.n	80055f8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562e:	2b01      	cmp	r3, #1
 8005630:	d12e      	bne.n	8005690 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	60fb      	str	r3, [r7, #12]
   return(result);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f023 0310 	bic.w	r3, r3, #16
 800564c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	69b9      	ldr	r1, [r7, #24]
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	617b      	str	r3, [r7, #20]
   return(result);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e6      	bne.n	8005638 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b10      	cmp	r3, #16
 8005676:	d103      	bne.n	8005680 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2210      	movs	r2, #16
 800567e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff f9a1 	bl	80049d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800568e:	e00b      	b.n	80056a8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7fb f9c5 	bl	8000a20 <HAL_UART_RxCpltCallback>
}
 8005696:	e007      	b.n	80056a8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0208 	orr.w	r2, r2, #8
 80056a6:	619a      	str	r2, [r3, #24]
}
 80056a8:	bf00      	nop
 80056aa:	3770      	adds	r7, #112	; 0x70
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b09c      	sub	sp, #112	; 0x70
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c8:	2b22      	cmp	r3, #34	; 0x22
 80056ca:	f040 80b9 	bne.w	8005840 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056dc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80056de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80056e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80056e6:	4013      	ands	r3, r2
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	1c9a      	adds	r2, r3, #2
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	f040 809c 	bne.w	8005850 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800572c:	667b      	str	r3, [r7, #100]	; 0x64
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005736:	657b      	str	r3, [r7, #84]	; 0x54
 8005738:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800573c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e6      	bne.n	8005718 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	663b      	str	r3, [r7, #96]	; 0x60
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3308      	adds	r3, #8
 8005768:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800576a:	643a      	str	r2, [r7, #64]	; 0x40
 800576c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e5      	bne.n	800574a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d018      	beq.n	80057d2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d12e      	bne.n	8005838 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f023 0310 	bic.w	r3, r3, #16
 80057f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057fe:	61bb      	str	r3, [r7, #24]
 8005800:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6979      	ldr	r1, [r7, #20]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	613b      	str	r3, [r7, #16]
   return(result);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e6      	bne.n	80057e0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	2b10      	cmp	r3, #16
 800581e:	d103      	bne.n	8005828 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2210      	movs	r2, #16
 8005826:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800582e:	4619      	mov	r1, r3
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff f8cd 	bl	80049d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005836:	e00b      	b.n	8005850 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fb f8f1 	bl	8000a20 <HAL_UART_RxCpltCallback>
}
 800583e:	e007      	b.n	8005850 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0208 	orr.w	r2, r2, #8
 800584e:	619a      	str	r2, [r3, #24]
}
 8005850:	bf00      	nop
 8005852:	3770      	adds	r7, #112	; 0x70
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005858:	b084      	sub	sp, #16
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	f107 001c 	add.w	r0, r7, #28
 8005866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800586a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800586e:	2b01      	cmp	r3, #1
 8005870:	d121      	bne.n	80058b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	4b21      	ldr	r3, [pc, #132]	; (8005908 <USB_CoreInit+0xb0>)
 8005884:	4013      	ands	r3, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800589a:	2b01      	cmp	r3, #1
 800589c:	d105      	bne.n	80058aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fa92 	bl	8005dd4 <USB_CoreReset>
 80058b0:	4603      	mov	r3, r0
 80058b2:	73fb      	strb	r3, [r7, #15]
 80058b4:	e010      	b.n	80058d8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fa86 	bl	8005dd4 <USB_CoreReset>
 80058c8:	4603      	mov	r3, r0
 80058ca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80058d8:	7fbb      	ldrb	r3, [r7, #30]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d10b      	bne.n	80058f6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f043 0206 	orr.w	r2, r3, #6
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f043 0220 	orr.w	r2, r3, #32
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005902:	b004      	add	sp, #16
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	ffbdffbf 	.word	0xffbdffbf

0800590c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f023 0201 	bic.w	r2, r3, #1
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	460b      	mov	r3, r1
 8005938:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d115      	bne.n	800597c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800595c:	200a      	movs	r0, #10
 800595e:	f7fb fc7f 	bl	8001260 <HAL_Delay>
      ms += 10U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	330a      	adds	r3, #10
 8005966:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fa25 	bl	8005db8 <USB_GetMode>
 800596e:	4603      	mov	r3, r0
 8005970:	2b01      	cmp	r3, #1
 8005972:	d01e      	beq.n	80059b2 <USB_SetCurrentMode+0x84>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2bc7      	cmp	r3, #199	; 0xc7
 8005978:	d9f0      	bls.n	800595c <USB_SetCurrentMode+0x2e>
 800597a:	e01a      	b.n	80059b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d115      	bne.n	80059ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800598e:	200a      	movs	r0, #10
 8005990:	f7fb fc66 	bl	8001260 <HAL_Delay>
      ms += 10U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	330a      	adds	r3, #10
 8005998:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa0c 	bl	8005db8 <USB_GetMode>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <USB_SetCurrentMode+0x84>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2bc7      	cmp	r3, #199	; 0xc7
 80059aa:	d9f0      	bls.n	800598e <USB_SetCurrentMode+0x60>
 80059ac:	e001      	b.n	80059b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e005      	b.n	80059be <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2bc8      	cmp	r3, #200	; 0xc8
 80059b6:	d101      	bne.n	80059bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059c8:	b084      	sub	sp, #16
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059e2:	2300      	movs	r3, #0
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	e009      	b.n	80059fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	3340      	adds	r3, #64	; 0x40
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	2200      	movs	r2, #0
 80059f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	3301      	adds	r3, #1
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	2b0e      	cmp	r3, #14
 8005a00:	d9f2      	bls.n	80059e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d11c      	bne.n	8005a44 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a18:	f043 0302 	orr.w	r3, r3, #2
 8005a1c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	e005      	b.n	8005a50 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a56:	461a      	mov	r2, r3
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a5c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d10d      	bne.n	8005a80 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d104      	bne.n	8005a76 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f968 	bl	8005d44 <USB_SetDevSpeed>
 8005a74:	e008      	b.n	8005a88 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a76:	2101      	movs	r1, #1
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f963 	bl	8005d44 <USB_SetDevSpeed>
 8005a7e:	e003      	b.n	8005a88 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a80:	2103      	movs	r1, #3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f95e 	bl	8005d44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a88:	2110      	movs	r1, #16
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8fa 	bl	8005c84 <USB_FlushTxFifo>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f924 	bl	8005ce8 <USB_FlushRxFifo>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abc:	461a      	mov	r2, r3
 8005abe:	2300      	movs	r3, #0
 8005ac0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2300      	movs	r3, #0
 8005acc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	e043      	b.n	8005b5c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aea:	d118      	bne.n	8005b1e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	461a      	mov	r2, r3
 8005b00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	e013      	b.n	8005b30 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	461a      	mov	r2, r3
 8005b16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	e008      	b.n	8005b30 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b60:	461a      	mov	r2, r3
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d3b5      	bcc.n	8005ad4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	e043      	b.n	8005bf6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b84:	d118      	bne.n	8005bb8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	e013      	b.n	8005bca <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e008      	b.n	8005bca <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	2300      	movs	r3, #0
 8005bda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	461a      	mov	r2, r3
 8005bea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d3b5      	bcc.n	8005b6e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f043 0210 	orr.w	r2, r3, #16
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <USB_DevInit+0x2b4>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c44:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f043 0208 	orr.w	r2, r3, #8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d105      	bne.n	8005c6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699a      	ldr	r2, [r3, #24]
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <USB_DevInit+0x2b8>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c78:	b004      	add	sp, #16
 8005c7a:	4770      	bx	lr
 8005c7c:	803c3800 	.word	0x803c3800
 8005c80:	40000004 	.word	0x40000004

08005c84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c9e:	d901      	bls.n	8005ca4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e01b      	b.n	8005cdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	daf2      	bge.n	8005c92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	019b      	lsls	r3, r3, #6
 8005cb4:	f043 0220 	orr.w	r2, r3, #32
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005cc8:	d901      	bls.n	8005cce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e006      	b.n	8005cdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d0f0      	beq.n	8005cbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d00:	d901      	bls.n	8005d06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e018      	b.n	8005d38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	daf2      	bge.n	8005cf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2210      	movs	r2, #16
 8005d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d24:	d901      	bls.n	8005d2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e006      	b.n	8005d38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0310 	and.w	r3, r3, #16
 8005d32:	2b10      	cmp	r3, #16
 8005d34:	d0f0      	beq.n	8005d18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d90:	f023 0303 	bic.w	r3, r3, #3
 8005d94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da4:	f043 0302 	orr.w	r3, r3, #2
 8005da8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3301      	adds	r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005dec:	d901      	bls.n	8005df2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e01b      	b.n	8005e2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	daf2      	bge.n	8005de0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f043 0201 	orr.w	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005e16:	d901      	bls.n	8005e1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e006      	b.n	8005e2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d0f0      	beq.n	8005e0a <USB_CoreReset+0x36>

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <memset>:
 8005e36:	4402      	add	r2, r0
 8005e38:	4603      	mov	r3, r0
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d100      	bne.n	8005e40 <memset+0xa>
 8005e3e:	4770      	bx	lr
 8005e40:	f803 1b01 	strb.w	r1, [r3], #1
 8005e44:	e7f9      	b.n	8005e3a <memset+0x4>
	...

08005e48 <__libc_init_array>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4d0d      	ldr	r5, [pc, #52]	; (8005e80 <__libc_init_array+0x38>)
 8005e4c:	4c0d      	ldr	r4, [pc, #52]	; (8005e84 <__libc_init_array+0x3c>)
 8005e4e:	1b64      	subs	r4, r4, r5
 8005e50:	10a4      	asrs	r4, r4, #2
 8005e52:	2600      	movs	r6, #0
 8005e54:	42a6      	cmp	r6, r4
 8005e56:	d109      	bne.n	8005e6c <__libc_init_array+0x24>
 8005e58:	4d0b      	ldr	r5, [pc, #44]	; (8005e88 <__libc_init_array+0x40>)
 8005e5a:	4c0c      	ldr	r4, [pc, #48]	; (8005e8c <__libc_init_array+0x44>)
 8005e5c:	f000 f818 	bl	8005e90 <_init>
 8005e60:	1b64      	subs	r4, r4, r5
 8005e62:	10a4      	asrs	r4, r4, #2
 8005e64:	2600      	movs	r6, #0
 8005e66:	42a6      	cmp	r6, r4
 8005e68:	d105      	bne.n	8005e76 <__libc_init_array+0x2e>
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e70:	4798      	blx	r3
 8005e72:	3601      	adds	r6, #1
 8005e74:	e7ee      	b.n	8005e54 <__libc_init_array+0xc>
 8005e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7a:	4798      	blx	r3
 8005e7c:	3601      	adds	r6, #1
 8005e7e:	e7f2      	b.n	8005e66 <__libc_init_array+0x1e>
 8005e80:	08005ee8 	.word	0x08005ee8
 8005e84:	08005ee8 	.word	0x08005ee8
 8005e88:	08005ee8 	.word	0x08005ee8
 8005e8c:	08005eec 	.word	0x08005eec

08005e90 <_init>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	bf00      	nop
 8005e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e96:	bc08      	pop	{r3}
 8005e98:	469e      	mov	lr, r3
 8005e9a:	4770      	bx	lr

08005e9c <_fini>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr
